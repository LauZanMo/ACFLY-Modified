<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ACFly.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ACFly.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Tue Apr 13 13:03:11 2021
<BR><P>
<H3>Maximum Stack Usage =       7044 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
M32_PosCtrl::main_func(void*, unsigned) &rArr; process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1eb]">__user_initial_stackheap</a>
 <LI><a href="#[288]">__cxa_guard_acquire</a>
 <LI><a href="#[28a]">__cxa_guard_release</a>
 <LI><a href="#[148]">__cxa_pure_virtual</a>
 <LI><a href="#[64b]">abort_message</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[6fc]">lfs_file_rawwrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6fc]">lfs_file_rawwrite</a><BR>
 <LI><a href="#[6fb]">lfs_file_rawread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6cd]">lfs_file_flush</a><BR>
 <LI><a href="#[6d5]">lfs_dir_traverse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d5]">lfs_dir_traverse</a><BR>
 <LI><a href="#[6ca]">lfs_dir_commit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d3]">lfs_dir_drop</a><BR>
 <LI><a href="#[6e9]">lfs_fs_relocate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6ca]">lfs_dir_commit</a><BR>
 <LI><a href="#[6e5]">lfs_dir_split</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6dc]">lfs_dir_compact</a><BR>
 <LI><a href="#[68c]">pattern_matching</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68c]">pattern_matching</a><BR>
 <LI><a href="#[633]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[633]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[639]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[639]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[640]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[640]">std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[646]">std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[646]">std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from drv_sensors.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from gui.o(.text.DMA2D_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e4]">Flash_erase</a> from flash_diskio.o(.text.Flash_erase) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[e2]">Flash_read</a> from flash_diskio.o(.text.Flash_read) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[e5]">Flash_sync</a> from flash_diskio.o(.text.Flash_sync) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[e3]">Flash_write</a> from flash_diskio.o(.text.Flash_write) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from drv_extiic.o(.text.I2C1_ER_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from drv_extiic.o(.text.I2C1_EV_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from drv_usb.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from drv_flash.o(.text.QUADSPI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from drv_sdmmc.o(.text.SDMMC1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[132]">SD_initialize</a> from sd_diskio.o(.text.SD_initialize) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[136]">SD_ioctl</a> from sd_diskio.o(.text.SD_ioctl) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[134]">SD_read</a> from sd_diskio.o(.text.SD_read) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[133]">SD_status</a> from sd_diskio.o(.text.SD_status) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[135]">SD_write</a> from sd_diskio.o(.text.SD_write) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from drv_oled.o(.text.SPI4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from drv_sensors.o(.text.TIM16_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from drv_sensors.o(.text.TIM17_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from drv_rcppm.o(.text.TIM1_CC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9f]">TIM1_IRQHandlerTCB</a> from drv_rcppm.o(.text.TIM1_IRQHandlerTCB) referenced 2 times from drv_rcppm.o(.text.TIM1_CC_IRQHandler)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from drv_adc.o(.text.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from timebase.o(.text.TIM5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from drv_uart5.o(.text.UART5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from drv_uart7.o(.text.UART7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from drv_uart8.o(.text.UART8_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from drv_uart1.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from drv_rcsbus.o(.text.USART2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a5]">USART2_IRQHandlerTCB</a> from drv_rcsbus.o(.text.USART2_IRQHandlerTCB) referenced 2 times from drv_rcsbus.o(.text.USART2_IRQHandler)
 <LI><a href="#[31]">USART3_IRQHandler</a> from drv_uart3.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16a]">_GLOBAL__sub_I_AuxFuncs.cpp</a> from auxfuncs.o(.text._GLOBAL__sub_I_AuxFuncs.cpp) referenced from auxfuncs.o(.init_array)
 <LI><a href="#[167]">_GLOBAL__sub_I_Commulink.cpp</a> from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp) referenced from commulink.o(.init_array)
 <LI><a href="#[16c]">_GLOBAL__sub_I_Ctrl_Attitude.cpp</a> from ctrl_attitude.o(.text._GLOBAL__sub_I_Ctrl_Attitude.cpp) referenced from ctrl_attitude.o(.init_array)
 <LI><a href="#[157]">_GLOBAL__sub_I_GUI.cpp</a> from gui.o(.text._GLOBAL__sub_I_GUI.cpp) referenced from gui.o(.init_array)
 <LI><a href="#[16e]">_GLOBAL__sub_I_MS_Attitude.cpp</a> from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp) referenced from ms_attitude.o(.init_array)
 <LI><a href="#[16f]">_GLOBAL__sub_I_MS_Position.cpp</a> from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp) referenced from ms_position.o(.init_array)
 <LI><a href="#[168]">_GLOBAL__sub_I_MavlinkRCProcess.cpp</a> from mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp) referenced from mavlinkrcprocess.o(.init_array)
 <LI><a href="#[158]">_GLOBAL__sub_I_Missions.cpp</a> from missions.o(.text._GLOBAL__sub_I_Missions.cpp) referenced from missions.o(.init_array)
 <LI><a href="#[169]">_GLOBAL__sub_I_Modes.cpp</a> from modes.o(.text._GLOBAL__sub_I_Modes.cpp) referenced from modes.o(.init_array)
 <LI><a href="#[156]">_GLOBAL__sub_I_Parameters.cpp</a> from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp) referenced from parameters.o(.init_array)
 <LI><a href="#[15b]">_GLOBAL__sub_I_Receiver.cpp</a> from receiver.o(.text._GLOBAL__sub_I_Receiver.cpp) referenced from receiver.o(.init_array)
 <LI><a href="#[155]">_GLOBAL__sub_I_SDStorage.cpp</a> from sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp) referenced from sdstorage.o(.init_array)
 <LI><a href="#[15a]">_GLOBAL__sub_I_Sensors.cpp</a> from sensors.o(.text._GLOBAL__sub_I_Sensors.cpp) referenced from sensors.o(.init_array)
 <LI><a href="#[159]">_GLOBAL__sub_I_cpu_load.cpp</a> from cpu_load.o(.text._GLOBAL__sub_I_cpu_load.cpp) referenced from cpu_load.o(.init_array)
 <LI><a href="#[16b]">_GLOBAL__sub_I_ctrl_Main.cpp</a> from ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp) referenced from ctrl_main.o(.init_array)
 <LI><a href="#[16d]">_GLOBAL__sub_I_ctrl_Position.cpp</a> from ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp) referenced from ctrl_position.o(.init_array)
 <LI><a href="#[165]">_GLOBAL__sub_I_drv_ADC.cpp</a> from drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp) referenced from drv_adc.o(.init_array)
 <LI><a href="#[162]">_GLOBAL__sub_I_drv_ExtIIC.cpp</a> from drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp) referenced from drv_extiic.o(.init_array)
 <LI><a href="#[163]">_GLOBAL__sub_I_drv_ExtMag.cpp</a> from drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp) referenced from drv_extmag.o(.init_array)
 <LI><a href="#[166]">_GLOBAL__sub_I_drv_InternalMag.cpp</a> from drv_internalmag.o(.text._GLOBAL__sub_I_drv_InternalMag.cpp) referenced from drv_internalmag.o(.init_array)
 <LI><a href="#[164]">_GLOBAL__sub_I_drv_Oled.cpp</a> from drv_oled.o(.text._GLOBAL__sub_I_drv_Oled.cpp) referenced from drv_oled.o(.init_array)
 <LI><a href="#[15c]">_GLOBAL__sub_I_drv_Sensors.cpp</a> from drv_sensors.o(.text._GLOBAL__sub_I_drv_Sensors.cpp) referenced from drv_sensors.o(.init_array)
 <LI><a href="#[15d]">_GLOBAL__sub_I_drv_Uart1.cpp</a> from drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp) referenced from drv_uart1.o(.init_array)
 <LI><a href="#[15e]">_GLOBAL__sub_I_drv_Uart3.cpp</a> from drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp) referenced from drv_uart3.o(.init_array)
 <LI><a href="#[15f]">_GLOBAL__sub_I_drv_Uart5.cpp</a> from drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp) referenced from drv_uart5.o(.init_array)
 <LI><a href="#[160]">_GLOBAL__sub_I_drv_Uart7.cpp</a> from drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp) referenced from drv_uart7.o(.init_array)
 <LI><a href="#[161]">_GLOBAL__sub_I_drv_Uart8.cpp</a> from drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp) referenced from drv_uart8.o(.init_array)
 <LI><a href="#[bb]">Lock_Uart1(double)</a> from drv_uart1.o(.text._Z10Lock_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c2]">Lock_Uart3(double)</a> from drv_uart3.o(.text._Z10Lock_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[c9]">Lock_Uart5(double)</a> from drv_uart5.o(.text._Z10Lock_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[d0]">Lock_Uart7(double)</a> from drv_uart7.o(.text._Z10Lock_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[d7]">Lock_Uart8(double)</a> from drv_uart8.o(.text._Z10Lock_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[bd]">Read_Uart1(unsigned char*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z10Read_Uart1Phtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c4]">Read_Uart3(unsigned char*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z10Read_Uart3Phtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[cb]">Read_Uart5(unsigned char*, unsigned short, double, double)</a> from drv_uart5.o(.text._Z10Read_Uart5Phtdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[d2]">Read_Uart7(unsigned char*, unsigned short, double, double)</a> from drv_uart7.o(.text._Z10Read_Uart7Phtdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[d9]">Read_Uart8(unsigned char*, unsigned short, double, double)</a> from drv_uart8.o(.text._Z10Read_Uart8Phtdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[b9]">Write_Uart1(const unsigned char*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z11Write_Uart1PKhtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c0]">Write_Uart3(const unsigned char*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z11Write_Uart3PKhtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[c7]">Write_Uart5(const unsigned char*, unsigned short, double, double)</a> from drv_uart5.o(.text._Z11Write_Uart5PKhtdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[ce]">Write_Uart7(const unsigned char*, unsigned short, double, double)</a> from drv_uart7.o(.text._Z11Write_Uart7PKhtdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[d5]">Write_Uart8(const unsigned char*, unsigned short, double, double)</a> from drv_uart8.o(.text._Z11Write_Uart8PKhtdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[ad]">MS_Main_Gyro(void*)</a> from ms_main.o(.text._Z12MS_Main_GyroPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[bc]">Unlock_Uart1()</a> from drv_uart1.o(.text._Z12Unlock_Uart1v) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c3]">Unlock_Uart3()</a> from drv_uart3.o(.text._Z12Unlock_Uart3v) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[ca]">Unlock_Uart5()</a> from drv_uart5.o(.text._Z12Unlock_Uart5v) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[d1]">Unlock_Uart7()</a> from drv_uart7.o(.text._Z12Unlock_Uart7v) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[d8]">Unlock_Uart8()</a> from drv_uart8.o(.text._Z12Unlock_Uart8v) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[be]">ResetRx_Uart1(double)</a> from drv_uart1.o(.text._Z13ResetRx_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c5]">ResetRx_Uart3(double)</a> from drv_uart3.o(.text._Z13ResetRx_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[cc]">ResetRx_Uart5(double)</a> from drv_uart5.o(.text._Z13ResetRx_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[d3]">ResetRx_Uart7(double)</a> from drv_uart7.o(.text._Z13ResetRx_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[da]">ResetRx_Uart8(double)</a> from drv_uart8.o(.text._Z13ResetRx_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[b2]">Lock_USBD_VCOM(double)</a> from drv_usb.o(.text._Z14Lock_USBD_VCOMd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b4]">Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</a> from drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[ba]">WaitSent_Uart1(double)</a> from drv_uart1.o(.text._Z14WaitSent_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c1]">WaitSent_Uart3(double)</a> from drv_uart3.o(.text._Z14WaitSent_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[c8]">WaitSent_Uart5(double)</a> from drv_uart5.o(.text._Z14WaitSent_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[cf]">WaitSent_Uart7(double)</a> from drv_uart7.o(.text._Z14WaitSent_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[d6]">WaitSent_Uart8(double)</a> from drv_uart8.o(.text._Z14WaitSent_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[100]">DriverInit_task(void*)</a> from main.o(.text._Z15DriverInit_taskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[b1]">Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)</a> from drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b3]">Unlock_USBD_VCOM()</a> from drv_usb.o(.text._Z16Unlock_USBD_VCOMv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b5]">ResetRx_USBD_VCOM(double)</a> from drv_usb.o(.text._Z17ResetRx_USBD_VCOMd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[bf]">SetBaudRate_Uart1(unsigned, double, double)</a> from drv_uart1.o(.text._Z17SetBaudRate_Uart1jdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[c6]">SetBaudRate_Uart3(unsigned, double, double)</a> from drv_uart3.o(.text._Z17SetBaudRate_Uart3jdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[cd]">SetBaudRate_Uart5(unsigned, double, double)</a> from drv_uart5.o(.text._Z17SetBaudRate_Uart5jdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[d4]">SetBaudRate_Uart7(unsigned, double, double)</a> from drv_uart7.o(.text._Z17SetBaudRate_Uart7jdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[db]">SetBaudRate_Uart8(unsigned, double, double)</a> from drv_uart8.o(.text._Z17SetBaudRate_Uart8jdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[ae]">MS_Main(void*)</a> from ms_main.o(.text._Z7MS_MainPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[aa]">_ZL10Debug_taskPv</a> from debug.o(.text._ZL10Debug_taskPv) referenced 2 times from debug.o(.text._Z10init_Debugv)
 <LI><a href="#[ed]">_ZL10GPS_ServerPv</a> from drv_gps.o(.text._ZL10GPS_ServerPv) referenced 2 times from drv_gps.o(.text._ZL14GPS_DriverInit4Portj)
 <LI><a href="#[ec]">_ZL10GUI_ServerPv</a> from gui.o(.text._ZL10GUI_ServerPv) referenced 2 times from gui.o(.text._Z8init_GUIv)
 <LI><a href="#[ee]">_ZL10RTK_ServerPv</a> from drv_rtk.o(.text._ZL10RTK_ServerPv) referenced 2 times from drv_rtk.o(.text._ZL14RTK_DriverInit4Portj)
 <LI><a href="#[a9]">_ZL12LPDaemonTaskPv</a> from basic.o(.text._ZL12LPDaemonTaskPv) referenced 2 times from basic.o(.text._Z10init_Basicv)
 <LI><a href="#[ab]">_ZL12MSafe_ServerPv</a> from msafe.o(.text._ZL12MSafe_ServerPv) referenced 2 times from msafe.o(.text._Z10init_MSafev)
 <LI><a href="#[ac]">_ZL12Modes_ServerPv</a> from modes.o(.text._ZL12Modes_ServerPv) referenced 2 times from modes.o(.text._Z10init_Modesv)
 <LI><a href="#[9a]">_ZL13BMI088GyroTCBPvj</a> from drv_sensors.o(.text._ZL13BMI088GyroTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[dc]">_ZL13ExtLed_ServerPv</a> from drv_extled.o(.text._ZL13ExtLed_ServerPv) referenced 2 times from drv_extled.o(.text._Z15init_drv_ExtLedv)
 <LI><a href="#[dd]">_ZL13ExtMag_ServerPv</a> from drv_extmag.o(.text._ZL13ExtMag_ServerPv) referenced 2 times from drv_extmag.o(.text._Z15init_drv_ExtMagv)
 <LI><a href="#[12c]">_ZL13Msg74_VFR_HUDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[139]">_ZL13NavCmd21_LANDdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[ef]">_ZL13TFMini_ServerPv</a> from drv_tfmini.o(.text._ZL13TFMini_ServerPv) referenced 2 times from drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj)
 <LI><a href="#[a0]">_ZL13UltrasonicTCBPvj</a> from drv_ultrasonic.o(.text._ZL13UltrasonicTCBPvj) referenced 2 times from drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler)
 <LI><a href="#[9b]">_ZL14BMI088AccelTCBPvj</a> from drv_sensors.o(.text._ZL14BMI088AccelTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[af]">_ZL14GPS_DriverInit4Portj</a> from drv_gps.o(.text._ZL14GPS_DriverInit4Portj) referenced 2 times from drv_gps.o(.text._Z12init_drv_GPSv)
 <LI><a href="#[10c]">_ZL14Msg0_HEARTBEAThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[10d]">_ZL14Msg11_SET_MODEhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[124]">_ZL14Msg30_ATTITUDEhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[13b]">_ZL14NavCmd93_DELAYdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[b0]">_ZL14RTK_DriverInit4Portj</a> from drv_rtk.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_rtk.o(.text._Z12init_drv_RTKv)
 <LI><a href="#[df]">_ZL15ExtSPL06_ServerPv</a> from drv_extspl06.o(.text._ZL15ExtSPL06_ServerPv) referenced 2 times from drv_extspl06.o(.text._Z17init_drv_ExtSPL06v)
 <LI><a href="#[12e]">_ZL15Msg124_GPS2_RAWhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL15Msg124_GPS2_RAWhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[110]">_ZL15Msg23_PARAM_SEThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[b6]">_ZL15usb_device_taskPv</a> from drv_usb.o(.text._ZL15usb_device_taskPv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b7]">_ZL16Commulink_ServerPv</a> from commulink.o(.text._ZL16Commulink_ServerPv) referenced 2 times from commulink.o(.text._Z14init_Commulinkv)
 <LI><a href="#[120]">_ZL16Msg01_SYS_STATUShP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[122]">_ZL16Msg26_SCALED_IMUhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL16Msg26_SCALED_IMUhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[13a]">_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[121]">_ZL17Msg24_GPS_RAW_INThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[12b]">_ZL17Msg65_RC_CHANNELShP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[137]">_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[de]">_ZL17TFMini_DriverInit4Portj</a> from drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj) referenced 2 times from drv_tfmini.o(.text._Z15init_drv_TFMiniv)
 <LI><a href="#[e0]">_ZL18ControlSystem_TaskPv</a> from ctrl_main.o(.text._ZL18ControlSystem_TaskPv) referenced 2 times from ctrl_main.o(.text._Z18init_ControlSystemv)
 <LI><a href="#[e6]">_ZL18InternalMag_ServerPv</a> from drv_internalmag.o(.text._ZL18InternalMag_ServerPv) referenced 2 times from drv_internalmag.o(.text._Z20init_drv_InternalMagv)
 <LI><a href="#[12d]">_ZL18Msg116_SCALED_IMU2hP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL18Msg116_SCALED_IMU2hP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[12f]">_ZL18Msg129_SCALED_IMU3hP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL18Msg129_SCALED_IMU3hP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[111]">_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[11a]">_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f1]">_ZL18OpticalFlow_ServerPv</a> from drv_opticalflow_lc302.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj)
 <LI><a href="#[f2]">_ZL18OpticalFlow_ServerPv</a> from drv_opticalflow_lc306.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj)
 <LI><a href="#[f3]">_ZL18OpticalFlow_ServerPv</a> from drv_opticalflow_gl9306.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj)
 <LI><a href="#[f4]">_ZL18OpticalFlow_ServerPv</a> from drv_opticalflow_jl32xx.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj)
 <LI><a href="#[130]">_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL19Msg234_HIGH_LATENCYhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[115]">_ZL19Msg44_MISSION_COUNThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[11d]">_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[11e]">_ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[131]">_ZL20Msg242_HOME_POSITIONhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL20Msg242_HOME_POSITIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f0]">_ZL21AnoOpticalFlow_ServerPv</a> from drv_anoopticalflow.o(.text._ZL21AnoOpticalFlow_ServerPv) referenced 2 times from drv_anoopticalflow.o(.text._ZL25AnoOpticalFlow_DriverInit4Portj)
 <LI><a href="#[106]">_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[123]">_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[112]">_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[129]">_ZL21Msg42_MISSION_CURRENThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL21Msg42_MISSION_CURRENThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[104]">_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[119]">_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[105]">_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[116]">_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e1]">_ZL23UltrasonicTimerCallbackPv</a> from drv_ultrasonic.o(.text._ZL23UltrasonicTimerCallbackPv) referenced 2 times from drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv)
 <LI><a href="#[10e]">_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[10f]">_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[11f]">_ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[126]">_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[128]">_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[e7]">_ZL25AnoOpticalFlow_DriverInit4Portj</a> from drv_anoopticalflow.o(.text._ZL25AnoOpticalFlow_DriverInit4Portj) referenced 2 times from drv_anoopticalflow.o(.text._Z23init_drv_AnoOpticalFlowv)
 <LI><a href="#[125]">_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[127]">_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[113]">_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[117]">_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[118]">_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[138]">_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf</a> from navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[114]">_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[12a]">_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message</a> from mavlinksendfuncs.o(.text._ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[11c]">_ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e8]">_ZL28OpticalFlow_LC302_DriverInit4Portj</a> from drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj) referenced 2 times from drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v)
 <LI><a href="#[e9]">_ZL28OpticalFlow_LC306_DriverInit4Portj</a> from drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj) referenced 2 times from drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v)
 <LI><a href="#[ea]">_ZL29OpticalFlow_GL9306_DriverInit4Portj</a> from drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj) referenced 2 times from drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v)
 <LI><a href="#[eb]">_ZL29OpticalFlow_JL32xx_DriverInit4Portj</a> from drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj) referenced 2 times from drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv)
 <LI><a href="#[11b]">_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message</a> from mavlinkrcprocess.o(.text._ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[108]">_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[107]">_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[109]">_ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[13c]">_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd</a> from inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[10a]">_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[13d]">_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd</a> from inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[13e]">_ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd</a> from inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[10b]">_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message</a> from mavlinkcmdprocess.o(.text._ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[a1]">_ZL5TxTCBPvj</a> from drv_uart5.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart5.o(.text.UART5_IRQHandler)
 <LI><a href="#[a2]">_ZL5TxTCBPvj</a> from drv_uart7.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart7.o(.text.UART7_IRQHandler)
 <LI><a href="#[a3]">_ZL5TxTCBPvj</a> from drv_uart8.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart8.o(.text.UART8_IRQHandler)
 <LI><a href="#[a4]">_ZL5TxTCBPvj</a> from drv_uart1.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart1.o(.text.USART1_IRQHandler)
 <LI><a href="#[a6]">_ZL5TxTCBPvj</a> from drv_uart3.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart3.o(.text.USART3_IRQHandler)
 <LI><a href="#[b8]">_ZL8SDS_TaskPv</a> from sdstorage.o(.text._ZL8SDS_TaskPv) referenced 2 times from sdstorage.o(.text._Z14init_SDStoragev)
 <LI><a href="#[9d]">_ZL8SPL06TCBPvj</a> from drv_sensors.o(.text._ZL8SPL06TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[9c]">_ZL9AK8975TCBPvj</a> from drv_sensors.o(.text._ZL9AK8975TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[13f]">M10_RCCalib::main_func(void*, unsigned)</a> from m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj) referenced from m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
 <LI><a href="#[141]">M30_AttCtrl::main_func(void*, unsigned)</a> from m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj) referenced from m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
 <LI><a href="#[143]">M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m32_posctrl.o(.text._ZN11M32_PosCtrl15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
 <LI><a href="#[142]">M32_PosCtrl::main_func(void*, unsigned)</a> from m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj) referenced from m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
 <LI><a href="#[144]">M12_AccCalib::main_func(void*, unsigned)</a> from m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj) referenced from m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
 <LI><a href="#[145]">M13_MagCalib::main_func(void*, unsigned)</a> from m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj) referenced from m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
 <LI><a href="#[146]">M11_TempCalib::main_func(void*, unsigned)</a> from m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj) referenced from m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
 <LI><a href="#[147]">M35_Auto1::main_func(void*, unsigned)</a> from m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj) referenced from m35_auto1.o(.rodata._ZTV9M35_Auto1)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m35_auto1.o(.rodata._ZTV9M35_Auto1)
 <LI><a href="#[140]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m10_rccalib.o(.rodata._ZTV9Mode_Base)
 <LI><a href="#[a8]">RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[a7]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[a7]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
 <LI><a href="#[f6]">std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()</a> from receiver.o(.text._ZNSt3__13mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev) referenced 2 times from receiver.o(.text.__cxx_global_var_init)
 <LI><a href="#[f8]">std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()</a> from parameters.o(.text._ZNSt3__13mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev) referenced 2 times from parameters.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[f5]">std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()</a> from parameters.o(.text._ZNSt3__13mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2Ev) referenced 2 times from parameters.o(.text.__cxx_global_var_init)
 <LI><a href="#[148]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from m10_rccalib.o(.rodata._ZTV9Mode_Base)
 <LI><a href="#[f7]">__cxx_global_array_dtor</a> from commulink.o(.text.__cxx_global_array_dtor) referenced 2 times from commulink.o(.text.__cxx_global_var_init)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[99]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[98]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[97]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[14d]">cdcd_control_complete</a> from usb_composite.o(.text.cdcd_control_complete) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14c]">cdcd_control_request</a> from usb_composite.o(.text.cdcd_control_request) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[149]">cdcd_init</a> from usb_composite.o(.text.cdcd_init) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14b]">cdcd_open</a> from usb_composite.o(.text.cdcd_open) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14a]">cdcd_reset</a> from usb_composite.o(.text.cdcd_reset) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14e]">cdcd_xfer_cb</a> from usb_composite.o(.text.cdcd_xfer_cb) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[f9]">lfs_alloc_lookahead</a> from lfs.o(.text.lfs_alloc_lookahead) referenced 2 times from lfs.o(.text.lfs_alloc)
 <LI><a href="#[fa]">lfs_dir_commit_commit</a> from lfs.o(.text.lfs_dir_commit_commit) referenced 2 times from lfs.o(.text.lfs_dir_commit)
 <LI><a href="#[fa]">lfs_dir_commit_commit</a> from lfs.o(.text.lfs_dir_commit_commit) referenced 2 times from lfs.o(.text.lfs_dir_compact)
 <LI><a href="#[fb]">lfs_dir_commit_size</a> from lfs.o(.text.lfs_dir_commit_size) referenced 2 times from lfs.o(.text.lfs_dir_compact)
 <LI><a href="#[fc]">lfs_dir_find_match</a> from lfs.o(.text.lfs_dir_find_match) referenced 2 times from lfs.o(.text.lfs_dir_find)
 <LI><a href="#[fc]">lfs_dir_find_match</a> from lfs.o(.text.lfs_dir_find_match) referenced 2 times from lfs.o(.text.lfs_rawmount)
 <LI><a href="#[fd]">lfs_dir_traverse_filter</a> from lfs.o(.text.lfs_dir_traverse_filter) referenced 2 times from lfs.o(.text.lfs_dir_traverse)
 <LI><a href="#[fe]">lfs_fs_parent_match</a> from lfs.o(.text.lfs_fs_parent_match) referenced 2 times from lfs.o(.text.lfs_fs_parent)
 <LI><a href="#[ff]">lfs_fs_size_count</a> from lfs.o(.text.lfs_fs_size_count) referenced 2 times from lfs.o(.text.lfs_fs_rawsize)
 <LI><a href="#[153]">mscd_control_complete</a> from usb_composite.o(.text.mscd_control_complete) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[152]">mscd_control_request</a> from usb_composite.o(.text.mscd_control_request) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14f]">mscd_init</a> from usb_composite.o(.text.mscd_init) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[151]">mscd_open</a> from usb_composite.o(.text.mscd_open) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[150]">mscd_reset</a> from usb_composite.o(.text.mscd_reset) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[154]">mscd_xfer_cb</a> from usb_composite.o(.text.mscd_xfer_cb) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[102]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[101]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[103]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[9e]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from gui.o(.text.DMA2D_IRQHandler)
 <LI><a href="#[9e]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_ER_IRQHandler)
 <LI><a href="#[9e]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_EV_IRQHandler)
 <LI><a href="#[9e]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 4 times from drv_flash.o(.text.QUADSPI_IRQHandler)
 <LI><a href="#[9e]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_oled.o(.text.SPI4_IRQHandler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[799]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[79a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[79b]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[79c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[79d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[174]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[176]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[178]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17a]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17c]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[79e]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[17e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[180]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[181]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[182]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[184]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[186]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[188]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[189]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[18a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[18c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[79f]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[18e]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[190]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[192]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[194]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[7a0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[196]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[198]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7a1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7a2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[7a3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7a4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[7a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[7a8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7a9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7aa]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7ab]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7ac]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7ad]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[7b1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7b2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7b3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[7b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[7b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[7b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[7b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[7b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[7b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[7ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[172]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1a4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; _ZL18SystemClock_Configv &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1f0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[7be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1ad]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1a0]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7bf]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[69b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[7c0]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[1b2]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1b4]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
</UL>

<P><STRONG><a name="[7c1]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[6f3]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[6f1]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[6f0]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[5be]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[5fb]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
</UL>

<P><STRONG><a name="[45b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[45a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7c2]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[7c3]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[338]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::operator =(const Position_Sensor&)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::operator =(const Receiver&)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg11_SET_MODEhPK17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
</UL>

<P><STRONG><a name="[7c4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[7c6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1be]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[564]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_reset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_NavCmdInf(NavCmdInf*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[7c7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[544]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7c8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7ca]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[7cb]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7cc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1c4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[17f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[175]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[97]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[187]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[183]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[18b]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[185]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[18d]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[177]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1cb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1b7]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[7cd]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7ce]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1bc]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[7cf]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[7d0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7d1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[1ce]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[18f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[191]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[193]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[195]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1e6]"></a>_c32rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[1cd]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1a3]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[1d6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sig_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1d5]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[7d2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7d4]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7d5]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7d6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7d7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ed]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[199]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1ef]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7d8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1dc]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1aa]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1e9]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1af]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __ARM_get_argv &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[7d9]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[7da]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[7db]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1f3]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SD_GetCardInfo &rArr; HAL_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[1f5]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[1f7]"></a>BSP_SD_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[1f8]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, bsp_driver_sd.o(.text.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[1fb]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_driver_sd.o(.text.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sd_diskio.o(.text.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[1ff]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_driver_sd.o(.text.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[201]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sd_diskio.o(.text.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[459]"></a>Clear_SD_Init_Complete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text.Clear_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, drv_sensors.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19SPI1_Transmit_StartPKht
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gui.o(.text.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = DMA2D_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[205]"></a>EnterIdleTask</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, cpu_load.o(.text.EnterIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EnterIdleTask &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[208]"></a>ExitIdleTask</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, cpu_load.o(.text.ExitIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ExitIdleTask &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator +=(const TIME&)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator -=(const TIME&)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[20b]"></a>FATFS_LinkDriver</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[20c]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, ff_gen_drv.o(.text.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[20d]"></a>FATFS_UnLinkDriver</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ff_gen_drv.o(.text.FATFS_UnLinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FATFS_UnLinkDriver &rArr; FATFS_UnLinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[20e]"></a>FATFS_UnLinkDriverEx</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ff_gen_drv.o(.text.FATFS_UnLinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_UnLinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
</UL>

<P><STRONG><a name="[223]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32h7xx_hal_flash_ex.o(.text.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[20f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32h7xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[211]"></a>FlashEraseSectors</STRONG> (Thumb, 736 bytes, Stack size 96 bytes, drv_flash.o(.text.FlashEraseSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FlashEraseSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_erase
</UL>

<P><STRONG><a name="[215]"></a>FlashProgramPages</STRONG> (Thumb, 848 bytes, Stack size 96 bytes, drv_flash.o(.text.FlashProgramPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FlashProgramPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
</UL>

<P><STRONG><a name="[216]"></a>FlashReadPages</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, drv_flash.o(.text.FlashReadPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FlashReadPages &rArr; _ZL23FlashCMDRead_QuadOutputPhthjhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23FlashCMDRead_QuadOutputPhthjhd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[e4]"></a>Flash_erase</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flash_diskio.o(.text.Flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Flash_erase &rArr; FlashEraseSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[e2]"></a>Flash_read</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, flash_diskio.o(.text.Flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Flash_read &rArr; FlashReadPages &rArr; _ZL23FlashCMDRead_QuadOutputPhthjhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPages
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[e5]"></a>Flash_sync</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, flash_diskio.o(.text.Flash_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Flash_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[e3]"></a>Flash_write</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, flash_diskio.o(.text.Flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Flash_write &rArr; FlashProgramPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[4f8]"></a>GetTimeZone</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, timebase.o(.text.GetTimeZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetTimeZone
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[21c]"></a>Get_RTC_Time</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, timebase.o(.text.Get_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Get_RTC_Time &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[458]"></a>Get_SD_Init_Complete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdstorage.o(.text.Get_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[21f]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timebase.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_Delay &rArr; delay(double) &rArr; TIME::get_pass_time() const &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>

<P><STRONG><a name="[3b0]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[221]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, stm32h7xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[463]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[224]"></a>HAL_FLASH_Program</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[467]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 158 bytes, Stack size 4 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[255]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 602 bytes, Stack size 64 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit()
</UL>

<P><STRONG><a name="[256]"></a>HAL_GPIO_Init</STRONG> (Thumb, 978 bytes, Stack size 64 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit()
</UL>

<P><STRONG><a name="[23a]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[210]"></a>HAL_GetTick</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timebase.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[226]"></a>HAL_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[228]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, timebase.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_MPU_Disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_MPU_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[229]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[22b]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit()
</UL>

<P><STRONG><a name="[22d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[22a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit()
</UL>

<P><STRONG><a name="[232]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[234]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_PWREx_ConfigSupply &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[56b]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[56a]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[235]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3748 bytes, Stack size 120 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[238]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1124 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[227]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 788 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[239]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2480 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
</UL>

<P><STRONG><a name="[24e]"></a>HAL_SDEx_Read_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf0CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SDEx_Read_DMADoubleBuf0CpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[24c]"></a>HAL_SDEx_Read_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf1CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SDEx_Read_DMADoubleBuf1CpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>HAL_SDEx_Write_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf0CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SDEx_Write_DMADoubleBuf0CpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>HAL_SDEx_Write_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf1CpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SDEx_Write_DMADoubleBuf1CpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[23e]"></a>HAL_SD_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SD_DeInit &rArr; HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[247]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SD_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 644 bytes, Stack size 12 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[242]"></a>HAL_SD_GetCardStatus</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = HAL_SD_GetCardStatus &rArr; SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[244]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 876 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf1CpltCallback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf0CpltCallback
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf1CpltCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf0CpltCallback
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_SD_Init</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[250]"></a>HAL_SD_InitCard</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[240]"></a>HAL_SD_MspDeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[24f]"></a>HAL_SD_MspInit</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[248]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[249]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_extiic.o(.text.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = I2C1_ER_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, drv_extiic.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = I2C1_EV_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25e]"></a>Lock_SD</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_sdmmc.o(.text.Lock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_usb.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OTG_FS_IRQHandler &rArr; usb_handler &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; ExitIdleTask &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, drv_flash.o(.text.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = QUADSPI_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[286]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, timebase.o(.text.RTC_ByteToBcd2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>

<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_sdmmc.o(.text.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[262]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[265]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_GetCmdResp3
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[257]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[267]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[268]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[26a]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_GetCmdResp7
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[259]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[25a]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[26c]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[26d]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_GetCmdResp2
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[26f]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_GetCmdResp2
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[270]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[271]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[272]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[274]"></a>SDMMC_CmdStatusRegister</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdStatusRegister &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[246]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[25b]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[25c]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[258]"></a>SDMMC_ConfigData</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[275]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[27b]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetPowerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[276]"></a>SDMMC_GetResponse</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[23d]"></a>SDMMC_Init</STRONG> (Thumb, 92 bytes, Stack size 44 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[27d]"></a>SDMMC_PowerState_OFF</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_PowerState_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
</UL>

<P><STRONG><a name="[252]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_PowerState_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[27a]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[263]"></a>SDMMC_SendCommand</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[27e]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_WriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[132]"></a>SD_initialize</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sd_diskio.o(.text.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SD_initialize &rArr; SD_CheckStatus &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[136]"></a>SD_ioctl</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, sd_diskio.o(.text.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo &rArr; HAL_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[134]"></a>SD_read</STRONG> (Thumb, 768 bytes, Stack size 104 bytes, sd_diskio.o(.text.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SD_read &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[133]"></a>SD_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sd_diskio.o(.text.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[135]"></a>SD_write</STRONG> (Thumb, 760 bytes, Stack size 112 bytes, sd_diskio.o(.text.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SD_write &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, drv_oled.o(.text.SPI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SPI4_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[285]"></a>Set_RTC_Time</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, timebase.o(.text.Set_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Set_RTC_Time &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message
</UL>

<P><STRONG><a name="[455]"></a>Set_SD_Init_Complete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text.Set_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 812 bytes, Stack size 88 bytes, drv_sensors.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TIM16_IRQHandler &rArr; TD4_Lite::track4(double, double, double, double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::TD4_Lite__sub_object()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::track4(double, double, double, double, double, double)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::get_x2()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;float&rang;(T1, T1)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1, T1)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10set_TC_Outd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, drv_sensors.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM17_IRQHandler &rArr; _ZL26SPI1_TransmitReceive_StartPKhPht &rArr; _ZL28SCB_InvalidateDCache_by_AddrPji
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, drv_rcppm.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = TIM1_CC_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;float&rang;(T1, T1, T1)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11count_shorttt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>TIM1_IRQHandlerTCB</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, drv_rcppm.o(.text.TIM1_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = TIM1_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcppm.o(.text.TIM1_CC_IRQHandler)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_adc.o(.text.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timebase.o(.text.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, drv_uart5.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = UART5_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, drv_uart7.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = UART7_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, drv_uart8.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = UART8_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, drv_uart1.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USART1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 636 bytes, Stack size 24 bytes, drv_rcsbus.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USART2_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>USART2_IRQHandlerTCB</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, drv_rcsbus.o(.text.USART2_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = USART2_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcsbus.o(.text.USART2_IRQHandler)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, drv_uart3.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USART3_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[299]"></a>USB_DevDisconnect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay &rArr; delay(double) &rArr; TIME::get_pass_time() const &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[29b]"></a>USB_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
</UL>

<P><STRONG><a name="[29c]"></a>USB_FlushTxFifo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
</UL>

<P><STRONG><a name="[29a]"></a>USB_StopDevice</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32h7xx_ll_usb.o(.text.USB_StopDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_StopDevice &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[4f9]"></a>UTC2LocalTime</STRONG> (Thumb, 1140 bytes, Stack size 52 bytes, timebase.o(.text.UTC2LocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UTC2LocalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[278]"></a>UnLock_SD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_sdmmc.o(.text.UnLock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UnLock_SD &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[bb]"></a>Lock_Uart1(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_uart1.o(.text._Z10Lock_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Uart1(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c2]"></a>Lock_Uart3(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_uart3.o(.text._Z10Lock_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Uart3(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c9]"></a>Lock_Uart5(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_uart5.o(.text._Z10Lock_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Uart5(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[d0]"></a>Lock_Uart7(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_uart7.o(.text._Z10Lock_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Uart7(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[d7]"></a>Lock_Uart8(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_uart8.o(.text._Z10Lock_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Uart8(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[5b3]"></a>MS_get_WGA(unsigned*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z10MS_get_WGAPj))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[bd]"></a>Read_Uart1(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, drv_uart1.o(.text._Z10Read_Uart1Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Uart1(unsigned char*, unsigned short, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c4]"></a>Read_Uart3(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, drv_uart3.o(.text._Z10Read_Uart3Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Uart3(unsigned char*, unsigned short, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[cb]"></a>Read_Uart5(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, drv_uart5.o(.text._Z10Read_Uart5Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Uart5(unsigned char*, unsigned short, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[d2]"></a>Read_Uart7(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, drv_uart7.o(.text._Z10Read_Uart7Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Uart7(unsigned char*, unsigned short, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[d9]"></a>Read_Uart8(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, drv_uart8.o(.text._Z10Read_Uart8Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Uart8(unsigned char*, unsigned short, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[2e0]"></a>SDLog_Txt1(const char*, unsigned short, double)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sdstorage.o(.text._Z10SDLog_Txt1PKctd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SDLog_Txt1(const char*, unsigned short, double) &rArr; _ZL12Lock_Txt1Logd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14UnLock_Txt1Logv
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Lock_Txt1Logd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[2e4]"></a>SetMsgRate(unsigned char, unsigned short, float, double)</STRONG> (Thumb, 832 bytes, Stack size 368 bytes, commulink.o(.text._Z10SetMsgRatehtfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = SetMsgRate(unsigned char, unsigned short, float, double) &rArr; std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::erase(std::__1::__tree_const_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::find&lang;unsigned short&rang;(const T1&)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17CommuPortRegisterh
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[2e8]"></a>UnlockCtrl()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ctrl_main.o(.text._Z10UnlockCtrlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UnlockCtrl() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYAutoSpeed(double)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_ZAutoSpeed(double)
</UL>

<P><STRONG><a name="[2e9]"></a>addMission(MissionInf, bool, double)</STRONG> (Thumb, 436 bytes, Stack size 184 bytes, missions.o(.text._Z10addMission10MissionInfbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2292 + Unknown Stack Size
<LI>Call Chain = addMission(MissionInf, bool, double) &rArr; WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15UnLock_Missionsv
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Lock_Missionsd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[37a]"></a>degree2rad(double)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sensors.o(.text._Z10degree2radd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = degree2rad(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19map_projection_initP14Map_Projectiondd
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>

<P><STRONG><a name="[37e]"></a>degree2rad(float)</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._Z10degree2radf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = degree2rad(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[2ed]"></a>init_Basic()</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, basic.o(.text._Z10init_Basicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = init_Basic() &rArr; init_TimeBase() &rArr; _ZL18SystemClock_Configv &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16SCB_EnableICachev
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16SCB_EnableDCachev
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f6]"></a>init_Debug()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, debug.o(.text._Z10init_Debugv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_Debug() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2f7]"></a>init_MSafe()</STRONG> (Thumb, 354 bytes, Stack size 296 bytes, msafe.o(.text._Z10init_MSafev))
<BR><BR>[Stack]<UL><LI>Max Depth = 2628 + Unknown Stack Size
<LI>Call Chain = init_MSafe() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2f9]"></a>init_Modes()</STRONG> (Thumb, 726 bytes, Stack size 688 bytes, modes.o(.text._Z10init_Modesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3380 + Unknown Stack Size
<LI>Call Chain = init_Modes() &rArr; init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[453]"></a>rad2degree(double)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdstorage.o(.text._Z10rad2degreed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rad2degree(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
</UL>

<P><STRONG><a name="[51b]"></a>rad2degree(float)</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text._Z10rad2degreef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rad2degree(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[465]"></a>setLedMode(LEDMode)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, commulink.o(.text._Z10setLedMode7LEDMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setLedMode(LEDMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3ff]"></a>Aux_PWM_Out(double, unsigned char)</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, drv_pwmout.o(.text._Z11Aux_PWM_Outdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Aux_PWM_Out(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>

<P><STRONG><a name="[303]"></a>Lock_ExtIIC(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_extiic.o(.text._Z11Lock_ExtIICd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>

<P><STRONG><a name="[304]"></a>MS_Attitude(unsigned char, IMU_Sensor)</STRONG> (Thumb, 13160 bytes, Stack size 728 bytes, ms_attitude.o(.text._Z11MS_Attitudeh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1892 + Unknown Stack Size
<LI>Call Chain = MS_Attitude(unsigned char, IMU_Sensor) &rArr; _ZL18MS_AttitudeHeadingdPP9PosAccInf &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[30f]"></a>MS_Position(unsigned char, IMU_Sensor)</STRONG> (Thumb, 22764 bytes, Stack size 776 bytes, ms_position.o(.text._Z11MS_Positionh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312 + Unknown Stack Size
<LI>Call Chain = MS_Position(unsigned char, IMU_Sensor) &rArr; PositionSensorSetInavailable(unsigned char, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularAcc_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[318]"></a>ReadMission(unsigned short, MissionInf*, double)</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, missions.o(.text._Z11ReadMissiontP10MissionInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2172 + Unknown Stack Size
<LI>Call Chain = ReadMission(unsigned short, MissionInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[31a]"></a>UnLock_Oled()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_oled.o(.text._Z11UnLock_Oledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UnLock_Oled() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>

<P><STRONG><a name="[31b]"></a>UpdateParam(SName, unsigned long long, double)</STRONG> (Thumb, 592 bytes, Stack size 280 bytes, parameters.o(.text._Z11UpdateParam5SNameyd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2028 + Unknown Stack Size
<LI>Call Chain = UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[b9]"></a>Write_Uart1(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_uart1.o(.text._Z11Write_Uart1PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_Uart1(const unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c0]"></a>Write_Uart3(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_uart3.o(.text._Z11Write_Uart3PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_Uart3(const unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c7]"></a>Write_Uart5(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_uart5.o(.text._Z11Write_Uart5PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_Uart5(const unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[ce]"></a>Write_Uart7(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_uart7.o(.text._Z11Write_Uart7PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_Uart7(const unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[d5]"></a>Write_Uart8(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_uart8.o(.text._Z11Write_Uart8PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_Uart8(const unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[325]"></a>enter_MSafe(bool, double)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ctrl_main.o(.text._Z11enter_MSafebd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = enter_MSafe(bool, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[328]"></a>getReceiver(Receiver*, SName*, double)</STRONG> (Thumb, 1958 bytes, Stack size 1000 bytes, receiver.o(.text._Z11getReceiverP8ReceiverP5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::operator =(const Receiver&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[51e]"></a>get_LandVel()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z11get_LandVelv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[5ff]"></a>get_maxLean()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z11get_maxLeanv))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[32b]"></a>smooth_kp_0(double, double, double)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._Z11smooth_kp_0ddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smooth_kp_0(double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_0(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[32d]"></a>smooth_kp_1(double, double, double, double)</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._Z11smooth_kp_1dddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smooth_kp_1(double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_1(double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_0(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
</UL>

<P><STRONG><a name="[32f]"></a>smooth_kp_2(double, double, double, double, double)</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._Z11smooth_kp_2ddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smooth_kp_2(double, double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_2(double, double)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_1(double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_0(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
</UL>

<P><STRONG><a name="[331]"></a>smooth_kp_3(double, double, double, double, double, double)</STRONG> (Thumb, 328 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._Z11smooth_kp_3dddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smooth_kp_3(double, double, double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_3(double, double, double)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_2(double, double)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_1(double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_0(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
</UL>

<P><STRONG><a name="[333]"></a>GetGyroscope(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, sensors.o(.text._Z12GetGyroscopehP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetGyroscope(unsigned char, IMU_Sensor*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[ad]"></a>MS_Main_Gyro(void*)</STRONG> (Thumb, 224 bytes, Stack size 408 bytes, ms_main.o(.text._Z12MS_Main_GyroPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = MS_Main_Gyro(void*) &rArr; MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[622]"></a>ModeRegister(Mode_Base*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, modes.o(.text._Z12ModeRegisterP9Mode_Baseh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
</UL>

<P><STRONG><a name="[34b]"></a>PortRegister(unsigned char, Port)</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, commulink.o(.text._Z12PortRegisterh4Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortRegister(unsigned char, Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[bc]"></a>Unlock_Uart1()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart1.o(.text._Z12Unlock_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_Uart1() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c3]"></a>Unlock_Uart3()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart3.o(.text._Z12Unlock_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_Uart3() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[ca]"></a>Unlock_Uart5()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart5.o(.text._Z12Unlock_Uart5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_Uart5() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[d1]"></a>Unlock_Uart7()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart7.o(.text._Z12Unlock_Uart7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_Uart7() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[d8]"></a>Unlock_Uart8()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart8.o(.text._Z12Unlock_Uart8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_Uart8() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[603]"></a>check_NavCmd(unsigned short, double, unsigned char, double*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, navcmdprocess.o(.text._Z12check_NavCmdtdhPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_NavCmd(unsigned short, double, unsigned char, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[368]"></a>fast_sin_cos(double, double*, double*)</STRONG> (Thumb, 672 bytes, Stack size 104 bytes, sensors.o(.text._Z12fast_sin_cosdPdS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fast_sin_cos(double, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[33a]"></a>getHomePoint(vector2&lang;double&rang;*, double)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z12getHomePointP7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = getHomePoint(vector2&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[33c]"></a>get_Health_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, ms_position.o(.text._Z12get_Health_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_Health_Z(PosSensorHealthInf1*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[572]"></a>get_mav_mode(unsigned short*, unsigned short*, unsigned short*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, commulink.o(.text._Z12get_mav_modePtS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_mav_mode(unsigned short*, unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
</UL>

<P><STRONG><a name="[606]"></a>get_maxAccXY()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxAccXYv))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[604]"></a>get_maxVelUp()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxVelUpv))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[607]"></a>get_maxVelXY()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z12get_maxVelXYv))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[33d]"></a>init_MS_Main()</STRONG> (Thumb, 300 bytes, Stack size 120 bytes, ms_main.o(.text._Z12init_MS_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2452 + Unknown Stack Size
<LI>Call Chain = init_MS_Main() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[340]"></a>init_Sensors()</STRONG> (Thumb, 1238 bytes, Stack size 1496 bytes, sensors.o(.text._Z12init_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3828 + Unknown Stack Size
<LI>Call Chain = init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[341]"></a>init_drv_ADC()</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, drv_adc.o(.text._Z12init_drv_ADCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = init_drv_ADC() &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[343]"></a>init_drv_GPS()</STRONG> (Thumb, 150 bytes, Stack size 112 bytes, drv_gps.o(.text._Z12init_drv_GPSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2444 + Unknown Stack Size
<LI>Call Chain = init_drv_GPS() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[345]"></a>init_drv_LED()</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, drv_led.o(.text._Z12init_drv_LEDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_LED() &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[346]"></a>init_drv_RTK()</STRONG> (Thumb, 150 bytes, Stack size 112 bytes, drv_rtk.o(.text._Z12init_drv_RTKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2444 + Unknown Stack Size
<LI>Call Chain = init_drv_RTK() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[347]"></a>init_drv_USB()</STRONG> (Thumb, 328 bytes, Stack size 120 bytes, drv_usb.o(.text._Z12init_drv_USBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = init_drv_USB() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[34d]"></a>saveMissions(double)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, missions.o(.text._Z12saveMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2076 + Unknown Stack Size
<LI>Call Chain = saveMissions(double) &rArr; SaveVolatileParamGroup(SName, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15UnLock_Missionsv
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Lock_Missionsd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[34f]"></a>set_mav_mode(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, commulink.o(.text._Z12set_mav_modettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_mav_mode(unsigned short, unsigned short, unsigned short) &rArr; xTaskGetCurrentTaskHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[342]"></a>set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, drv_sensors.o(.text._Z12set_registerRVjhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
</UL>

<P><STRONG><a name="[351]"></a>update_ESO_1()</STRONG> (Thumb, 138 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._Z12update_ESO_1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = update_ESO_1() &rArr; get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::run(double)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[356]"></a>update_ESO_2()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z12update_ESO_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_ESO_2() &rArr; ESO_h::update_u(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::update_u(double)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::update_u(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[be]"></a>ResetRx_Uart1(double)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z13ResetRx_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart1(double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c5]"></a>ResetRx_Uart3(double)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_uart3.o(.text._Z13ResetRx_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart3(double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[cc]"></a>ResetRx_Uart5(double)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_uart5.o(.text._Z13ResetRx_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart5(double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[d3]"></a>ResetRx_Uart7(double)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_uart7.o(.text._Z13ResetRx_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart7(double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[da]"></a>ResetRx_Uart8(double)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z13ResetRx_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ResetRx_Uart8(double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[35a]"></a>SendMsgToMode(ModeMsg, double)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, modes.o(.text._Z13SendMsgToMode7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg11_SET_MODEhPK17__mavlink_message
</UL>

<P><STRONG><a name="[35b]"></a>Unlock_ExtIIC()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_extiic.o(.text._Z13Unlock_ExtIICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_ExtIIC() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>

<P><STRONG><a name="[35c]"></a>clearMissions(double)</STRONG> (Thumb, 222 bytes, Stack size 144 bytes, missions.o(.text._Z13clearMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2196 + Unknown Stack Size
<LI>Call Chain = clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15UnLock_Missionsv
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Lock_Missionsd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
</UL>

<P><STRONG><a name="[35f]"></a>ctrl_Attitude()</STRONG> (Thumb, 5744 bytes, Stack size 2408 bytes, ctrl_attitude.o(.text._Z13ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 3996 + Unknown Stack Size
<LI>Call Chain = ctrl_Attitude() &rArr; _ZL24ctrl_Attitude_MultiRotorhdddPdS_ &rArr; _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *(const Quaternion&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::conjugate()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::get_EsAngularAcceleration() const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::get_EsDisturbance() const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::get_EsAngularRate() const
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::get_EsMainPower() const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::get_rotation_matrix(double(*)[3]) const
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::reset()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::get_tracking_mode()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::conjugate()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_Rotation_vec()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(float)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24ctrl_Attitude_MultiRotorhdddPdS_
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[386]"></a>ctrl_Position()</STRONG> (Thumb, 12344 bytes, Stack size 4032 bytes, ctrl_position.o(.text._Z13ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4764 + Unknown Stack Size
<LI>Call Chain = ctrl_Position() &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::get_square() const
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::zero()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1, T1)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::reset(double)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator +(const vector2&lang;double&rang;&) const
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator *(double) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator /(double) const
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator +=(const vector2&lang;double&rang;&)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::reset()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::get_tracking_mode()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_STThrottle()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_0(double, double, double)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -() const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator /(double) const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator *(const vector2&lang;double&rang;&) const
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -=(const vector2&lang;double&rang;&)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::constrain(double)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[3a8]"></a>getHomeLatLon(vector2&lang;double&rang;*, double)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z13getHomeLatLonP7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = getHomeLatLon(vector2&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3a2]"></a>getHomeLocalZ(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z13getHomeLocalZPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = getHomeLocalZ(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[405]"></a>get_CommuPort(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, commulink.o(.text._Z13get_CommuPorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_CommuPort(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[3a9]"></a>get_Health_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, ms_position.o(.text._Z13get_Health_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_Health_XY(PosSensorHealthInf2*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[302]"></a>init_AuxFuncs()</STRONG> (Thumb, 370 bytes, Stack size 360 bytes, auxfuncs.o(.text._Z13init_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2692 + Unknown Stack Size
<LI>Call Chain = init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[3aa]"></a>init_Missions()</STRONG> (Thumb, 292 bytes, Stack size 344 bytes, missions.o(.text._Z13init_Missionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2492 + Unknown Stack Size
<LI>Call Chain = init_Missions() &rArr; VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2f0]"></a>init_TimeBase()</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, timebase.o(.text._Z13init_TimeBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = init_TimeBase() &rArr; _ZL18SystemClock_Configv &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18SystemClock_Configv
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[3b3]"></a>init_drv_Main()</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, drv_main.o(.text._Z13init_drv_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3836 + Unknown Stack Size
<LI>Call Chain = init_drv_Main() &rArr; init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VDDA_Voltage()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_JL32xx()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_GL9306()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC306()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC302()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_AnoOpticalFlow()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_InternalMag()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtSPL06()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtLed()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[3bb]"></a>init_drv_Oled()</STRONG> (Thumb, 1488 bytes, Stack size 408 bytes, drv_oled.o(.text._Z13init_drv_Oledv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = init_drv_Oled() &rArr; LCD_Clear(unsigned short, double) &rArr; _ZL15LCD_Address_Settttt &rArr; _ZL11LCD_WR_DATAtd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_WR_DATA8hd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LCD_WR_REGhd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[50c]"></a>sendLedSignal(LEDSignal)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text._Z13sendLedSignal9LEDSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sendLedSignal(LEDSignal)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3d8]"></a>sendParamList()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commulink.o(.text._Z13sendParamListv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sendParamList() &rArr; ResetParametersIterator() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[b2]"></a>Lock_USBD_VCOM(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_usb.o(.text._Z14Lock_USBD_VCOMd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_USBD_VCOM(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[5b4]"></a>MS_WGA_Correct()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z14MS_WGA_Correctv))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[3da]"></a>Matrix_Inverse(double*, unsigned char)</STRONG> (Thumb, 1290 bytes, Stack size 96 bytes, m12_acccalib.o(.text._Z14Matrix_InversePdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Matrix_Inverse(double*, unsigned char) &rArr; operator new[] (unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3dc]"></a>ModeReceiveMsg(ModeMsg*, double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, modes.o(.text._Z14ModeReceiveMsgP7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ModeReceiveMsg(ModeMsg*, double) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[413]"></a>PWM_DisableAll()</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z14PWM_DisableAllv))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
</UL>

<P><STRONG><a name="[514]"></a>Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, navcmdprocess.o(.text._Z14Process_NavCmdtdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3ad]"></a>ReadParamGroup(SName, unsigned long long*, bool*, double)</STRONG> (Thumb, 616 bytes, Stack size 256 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[306]"></a>ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)</STRONG> (Thumb, 704 bytes, Stack size 272 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[b4]"></a>Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Read_USBD_VCOM(unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[294]"></a>ReceiverUpdate(SName, bool, float*, unsigned char, double)</STRONG> (Thumb, 1428 bytes, Stack size 864 bytes, receiver.o(.text._Z14ReceiverUpdate5SNamebPfhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1436<LI>Call Chain = ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;float&rang;(T1, T1, T1)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
</UL>

<P><STRONG><a name="[4f6]"></a>RtkPort_setEna(unsigned char, bool)</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, commulink.o(.text._Z14RtkPort_setEnahb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RtkPort_setEna(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[ba]"></a>WaitSent_Uart1(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z14WaitSent_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WaitSent_Uart1(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c1]"></a>WaitSent_Uart3(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart3.o(.text._Z14WaitSent_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WaitSent_Uart3(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c8]"></a>WaitSent_Uart5(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart5.o(.text._Z14WaitSent_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WaitSent_Uart5(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[cf]"></a>WaitSent_Uart7(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart7.o(.text._Z14WaitSent_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WaitSent_Uart7(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[d6]"></a>WaitSent_Uart8(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z14WaitSent_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WaitSent_Uart8(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[3a0]"></a>get_STThrottle()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z14get_STThrottlev))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[605]"></a>get_maxVelDown()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z14get_maxVelDownv))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3a6]"></a>get_throttle_b(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z14get_throttle_bPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_throttle_b(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::get_b()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[3ba]"></a>init_Commulink()</STRONG> (Thumb, 496 bytes, Stack size 424 bytes, commulink.o(.text._Z14init_Commulinkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2756 + Unknown Stack Size
<LI>Call Chain = init_Commulink() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3e3]"></a>init_NavCmdInf(NavCmdInf*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m32_posctrl.o(.text._Z14init_NavCmdInfP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_NavCmdInf(NavCmdInf*) &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3be]"></a>init_SDStorage()</STRONG> (Thumb, 316 bytes, Stack size 272 bytes, sdstorage.o(.text._Z14init_SDStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 2604 + Unknown Stack Size
<LI>Call Chain = init_SDStorage() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3b5]"></a>init_drv_Flash()</STRONG> (Thumb, 1112 bytes, Stack size 16 bytes, drv_flash.o(.text._Z14init_drv_Flashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = init_drv_Flash() &rArr; _ZL12FlashCMDReadPhthjhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8FlashCMDhd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28SCB_InvalidateDCache_by_AddrPji
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12FlashCMDReadPhthjhd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c6]"></a>init_drv_RCPPM()</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, drv_rcppm.o(.text._Z14init_drv_RCPPMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2956 + Unknown Stack Size
<LI>Call Chain = init_drv_RCPPM() &rArr; ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3b8]"></a>init_drv_SDMMC()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drv_sdmmc.o(.text._Z14init_drv_SDMMCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = init_drv_SDMMC() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17MX_SDMMC1_SD_Initv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3bf]"></a>init_drv_Uart1()</STRONG> (Thumb, 608 bytes, Stack size 144 bytes, drv_uart1.o(.text._Z14init_drv_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart1() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c0]"></a>init_drv_Uart3()</STRONG> (Thumb, 624 bytes, Stack size 144 bytes, drv_uart3.o(.text._Z14init_drv_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart3() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c1]"></a>init_drv_Uart5()</STRONG> (Thumb, 624 bytes, Stack size 152 bytes, drv_uart5.o(.text._Z14init_drv_Uart5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart5() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c2]"></a>init_drv_Uart7()</STRONG> (Thumb, 632 bytes, Stack size 144 bytes, drv_uart7.o(.text._Z14init_drv_Uart7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart7() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c3]"></a>init_drv_Uart8()</STRONG> (Thumb, 616 bytes, Stack size 144 bytes, drv_uart8.o(.text._Z14init_drv_Uart8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = init_drv_Uart8() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[505]"></a>set_BuzzerFreq(unsigned short)</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, drv_led.o(.text._Z14set_BuzzerFreqt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_BuzzerFreq(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[3fd]"></a>AuxCamTakePhoto()</STRONG> (Thumb, 748 bytes, Stack size 504 bytes, auxfuncs.o(.text._Z15AuxCamTakePhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 2916 + Unknown Stack Size
<LI>Call Chain = AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_CamTakePhoto()
</UL>

<P><STRONG><a name="[100]"></a>DriverInit_task(void*)</STRONG> (Thumb, 496 bytes, Stack size 232 bytes, main.o(.text._Z15DriverInit_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4484 + Unknown Stack Size
<LI>Call Chain = DriverInit_task(void*) &rArr; init_ControlSystem() &rArr; init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitializationCompleted()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullUpAll()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAV_MainMotorCount(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[40f]"></a>GetMagnetometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, sensors.o(.text._Z15GetMagnetometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetMagnetometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[34a]"></a>HAL_PCD_MspInit()</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, drv_usb.o(.text._Z15HAL_PCD_MspInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[25d]"></a>PWM_PullDownAll()</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z15PWM_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[4f2]"></a>RtkPortRegister(RtkPort)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, commulink.o(.text._Z15RtkPortRegister7RtkPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtkPortRegister(RtkPort)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[b1]"></a>Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Write_USBD_VCOM(const unsigned char*, unsigned short, double, double) &rArr; cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[388]"></a>get_is_inFlight(bool*, double)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z15get_is_inFlightPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_is_inFlight(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[600]"></a>get_maxYawSpeed()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z15get_maxYawSpeedv))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3b7]"></a>init_Parameters()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, parameters.o(.text._Z15init_Parametersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = init_Parameters() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c7]"></a>init_drv_ExtIIC()</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, drv_extiic.o(.text._Z15init_drv_ExtIICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = init_drv_ExtIIC() &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3d2]"></a>init_drv_ExtLed()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_extled.o(.text._Z15init_drv_ExtLedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_ExtLed() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3ca]"></a>init_drv_ExtMag()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_extmag.o(.text._Z15init_drv_ExtMagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_ExtMag() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3bd]"></a>init_drv_PWMOut()</STRONG> (Thumb, 1120 bytes, Stack size 168 bytes, drv_pwmout.o(.text._Z15init_drv_PWMOutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = init_drv_PWMOut() &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DisableAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c5]"></a>init_drv_RCSbus()</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, drv_rcsbus.o(.text._Z15init_drv_RCSbusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2956 + Unknown Stack Size
<LI>Call Chain = init_drv_RCSbus() &rArr; ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3d1]"></a>init_drv_TFMini()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_tfmini.o(.text._Z15init_drv_TFMiniv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_TFMini() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[59b]"></a>inject_RtkPorts(const unsigned char*, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, commulink.o(.text._Z15inject_RtkPortsPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inject_RtkPorts(const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[50f]"></a>T1 remove_deadband&lang;double&rang;(T1, T1)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, m32_posctrl.o(.text._Z15remove_deadbandIdET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T1 remove_deadband&lang;double&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[457]"></a>set_BuzzerOnOff(bool)</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, drv_led.o(.text._Z15set_BuzzerOnOffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_BuzzerOnOff(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[415]"></a>ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, drv_extiic.o(.text._Z16ExtIIC_SendAddr7hPKhtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double) &rArr; Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ExtIIC()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_ExtIIC(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtLed_ServerPv
</UL>

<P><STRONG><a name="[416]"></a>GetAccelerometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, sensors.o(.text._Z16GetAccelerometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetAccelerometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[3b4]"></a>Get_VDDA_Voltage()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_adc.o(.text._Z16Get_VDDA_Voltagev))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[417]"></a>LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, drv_oled.o(.text._Z16LCD_WritePicturettttPvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double) &rArr; _ZL15LCD_Address_Settttt &rArr; _ZL11LCD_WR_DATAtd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Oled(double)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_Oled()
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LCD_Address_Settttt
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[3eb]"></a>ReceiverRegister(SName)</STRONG> (Thumb, 466 bytes, Stack size 576 bytes, receiver.o(.text._Z16ReceiverRegister5SName))
<BR><BR>[Stack]<UL><LI>Max Depth = 2908 + Unknown Stack Size
<LI>Call Chain = ReceiverRegister(SName) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverSync::ReceiverSync__sub_object()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
</UL>

<P><STRONG><a name="[b3]"></a>Unlock_USBD_VCOM()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usb.o(.text._Z16Unlock_USBD_VCOMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Unlock_USBD_VCOM() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[35e]"></a>UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)</STRONG> (Thumb, 912 bytes, Stack size 304 bytes, parameters.o(.text._Z16UpdateParamGroup5SNamePKyttbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2052 + Unknown Stack Size
<LI>Call Chain = UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[421]"></a>constrain_vector(double&, double&, double)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, m32_posctrl.o(.text._Z16constrain_vectorRdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = constrain_vector(double&, double&, double) &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
</UL>

<P><STRONG><a name="[5ca]"></a>getMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z16getMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[601]"></a>get_CrashedState()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z16get_CrashedStatev))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3a5]"></a>get_ESO_height_T(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z16get_ESO_height_TPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_ESO_height_T(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::get_T()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[516]"></a>get_RcButtonZone(double, unsigned char)</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, modes.o(.text._Z16get_RcButtonZonedh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_RcButtonZone(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[33e]"></a>init_MS_Attitude()</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z16init_MS_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_MS_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[33f]"></a>init_MS_Position()</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, ms_position.o(.text._Z16init_MS_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_MS_Position()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[3c4]"></a>init_drv_Sensors()</STRONG> (Thumb, 2472 bytes, Stack size 336 bytes, drv_sensors.o(.text._Z16init_drv_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3012 + Unknown Stack Size
<LI>Call Chain = init_drv_Sensors() &rArr; _ZL11AK8975_initv &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Accelerometer_UpdateFreq(unsigned char, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Gyroscope_UpdateFreq(unsigned char, double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20SPI1_TransmitReceivePKhPht
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SPI1_TransmitPKht
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[42f]"></a>process_AuxFuncs(const Receiver*)</STRONG> (Thumb, 872 bytes, Stack size 144 bytes, auxfuncs.o(.text._Z16process_AuxFuncsPK8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 3060 + Unknown Stack Size
<LI>Call Chain = process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[515]"></a>setLedManualCtrl(float, float, float, bool, unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, commulink.o(.text._Z16setLedManualCtrlfffbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setLedManualCtrl(float, float, float, bool, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[430]"></a>set_mav_mode_arm()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, commulink.o(.text._Z16set_mav_mode_armv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_mav_mode_arm() &rArr; xTaskGetCurrentTaskHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[431]"></a>AuxGimbalSetAngle(double)</STRONG> (Thumb, 216 bytes, Stack size 144 bytes, auxfuncs.o(.text._Z17AuxGimbalSetAngled))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AuxChannelCount()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_SetGimbalPitch(double)
</UL>

<P><STRONG><a name="[433]"></a>BUT_IIR_calc_freq(double*, double, double, double)</STRONG> (Thumb, 320 bytes, Stack size 96 bytes, ctrl_main.o(.text._Z17BUT_IIR_calc_freqPdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BUT_IIR_calc_freq(double*, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::set_cutoff_frequency(double, double)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::set_cutoff_frequency(double, double)
</UL>

<P><STRONG><a name="[308]"></a>GetPositionSensor(unsigned char, Position_Sensor*, double)</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, sensors.o(.text._Z17GetPositionSensorhP15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetPositionSensor(unsigned char, Position_Sensor*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::operator =(const Position_Sensor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[348]"></a>HAL_PCD_MspDeInit()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_usb.o(.text._Z17HAL_PCD_MspDeInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_MspDeInit() &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[489]"></a>MainMotor_PWM_Out(double*)</STRONG> (Thumb, 432 bytes, Stack size 4 bytes, drv_pwmout.o(.text._Z17MainMotor_PWM_OutPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MainMotor_PWM_Out(double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24ctrl_Attitude_MultiRotorhdddPdS_
</UL>

<P><STRONG><a name="[344]"></a>PortFunc_Register(unsigned char, bool(*)(Port, unsigned))</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, commulink.o(.text._Z17PortFunc_RegisterhPFb4PortjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_JL32xx()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_GL9306()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC306()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC302()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_AnoOpticalFlow()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
</UL>

<P><STRONG><a name="[b5]"></a>ResetRx_USBD_VCOM(double)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_usb.o(.text._Z17ResetRx_USBD_VCOMd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ResetRx_USBD_VCOM(double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[bf]"></a>SetBaudRate_Uart1(unsigned, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, drv_uart1.o(.text._Z17SetBaudRate_Uart1jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetBaudRate_Uart1(unsigned, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c6]"></a>SetBaudRate_Uart3(unsigned, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, drv_uart3.o(.text._Z17SetBaudRate_Uart3jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetBaudRate_Uart3(unsigned, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[cd]"></a>SetBaudRate_Uart5(unsigned, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, drv_uart5.o(.text._Z17SetBaudRate_Uart5jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetBaudRate_Uart5(unsigned, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[d4]"></a>SetBaudRate_Uart7(unsigned, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, drv_uart7.o(.text._Z17SetBaudRate_Uart7jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetBaudRate_Uart7(unsigned, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[db]"></a>SetBaudRate_Uart8(unsigned, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, drv_uart8.o(.text._Z17SetBaudRate_Uart8jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetBaudRate_Uart8(unsigned, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11setBaudRatej
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[365]"></a>get_Airframe_quat(Quaternion*, double)</STRONG> (Thumb, 648 bytes, Stack size 160 bytes, ms_attitude.o(.text._Z17get_Airframe_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[311]"></a>get_Attitude_quat(Quaternion*, double)</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z17get_Attitude_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = get_Attitude_quat(Quaternion*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[389]"></a>get_Position_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z17get_Position_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_Position_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_ZAutoSpeed(double)
</UL>

<P><STRONG><a name="[436]"></a>get_lastZCtrlTime(TIME*, double)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ctrl_main.o(.text._Z17get_lastZCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_lastZCtrlTime(TIME*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3c8]"></a>init_drv_ExtSPL06()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_extspl06.o(.text._Z17init_drv_ExtSPL06v))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_ExtSPL06() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3ae]"></a>setCurrentMission(unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, missions.o(.text._Z17setCurrentMissiont))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setCurrentMission(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[437]"></a>set_LedBrightness(float, float, float)</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, drv_led.o(.text._Z17set_LedBrightnessfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
</UL>

<P><STRONG><a name="[439]"></a>GetParametersCount(unsigned*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, parameters.o(.text._Z18GetParametersCountPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetParametersCount(unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[43a]"></a>IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 696 bytes, Stack size 320 bytes, sensors.o(.text._Z18IMUGyroscopeUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[2f8]"></a>ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)</STRONG> (Thumb, 1668 bytes, Stack size 632 bytes, parameters.o(.text._Z18ParamGroupRegister5SNametjPK14MAV_PARAM_TYPEPKS_PKy))
<BR><BR>[Stack]<UL><LI>Max Depth = 2332 + Unknown Stack Size
<LI>Call Chain = ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator !=(const SName&) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroup::ParamGroup__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>

<P><STRONG><a name="[442]"></a>ReadCurrentMission(MissionInf*, unsigned short*, double)</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, missions.o(.text._Z18ReadCurrentMissionP10MissionInfPtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2180 + Unknown Stack Size
<LI>Call Chain = ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[40b]"></a>UAV_MainMotorCount(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text._Z18UAV_MainMotorCounth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UAV_MainMotorCount(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[315]"></a>get_AirframeY_quat(Quaternion*, double)</STRONG> (Thumb, 808 bytes, Stack size 176 bytes, ms_attitude.o(.text._Z18get_AirframeY_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[401]"></a>get_CommulinkSysId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z18get_CommulinkSysIdv))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg42_MISSION_CURRENThP17__mavlink_message
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[443]"></a>get_MainBatteryInf(float*, float*, float*, float*, float*)</STRONG> (Thumb, 206 bytes, Stack size 176 bytes, ctrl_main.o(.text._Z18get_MainBatteryInfPfS_S_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = get_MainBatteryInf(float*, float*, float*, float*, float*) &rArr; _ZL24get_MainBatteryRMPercentPK10BatteryCfg &rArr; Get_MainBaterry_Voltage() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24get_MainBatteryRMPercentPK10BatteryCfg
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[3fe]"></a>get_MainMotorCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z18get_MainMotorCountv))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
</UL>

<P><STRONG><a name="[447]"></a>get_OptimalRange_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, ms_position.o(.text._Z18get_OptimalRange_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_OptimalRange_Z(PosSensorHealthInf1*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
</UL>

<P><STRONG><a name="[448]"></a>get_YawDeclination(double*, double)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z18get_YawDeclinationPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_YawDeclination(double*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
</UL>

<P><STRONG><a name="[3a4]"></a>get_hover_throttle(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z18get_hover_throttlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_hover_throttle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[449]"></a>get_lastXYCtrlTime(TIME*, double)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ctrl_main.o(.text._Z18get_lastXYCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_lastXYCtrlTime(TIME*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[38b]"></a>get_throttle_force(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z18get_throttle_forcePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_throttle_force(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::get_force()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[409]"></a>init_ControlSystem()</STRONG> (Thumb, 582 bytes, Stack size 488 bytes, ctrl_main.o(.text._Z18init_ControlSystemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4252 + Unknown Stack Size
<LI>Call Chain = init_ControlSystem() &rArr; init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[44b]"></a>init_Ctrl_Attitude()</STRONG> (Thumb, 1106 bytes, Stack size 856 bytes, ctrl_attitude.o(.text._Z18init_Ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 3188 + Unknown Stack Size
<LI>Call Chain = init_Ctrl_Attitude() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::set_cutoff_frequency(double, double)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::set_cutoff_frequency(double, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[44c]"></a>init_Ctrl_Position()</STRONG> (Thumb, 1238 bytes, Stack size 1432 bytes, ctrl_position.o(.text._Z18init_Ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3764 + Unknown Stack Size
<LI>Call Chain = init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::set_cutoff_frequency(double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::TD4_SL__sub_object(double, double, double, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[40c]"></a>set_MainMotorCount(unsigned char)</STRONG> (Thumb, 240 bytes, Stack size 4 bytes, drv_pwmout.o(.text._Z18set_MainMotorCounth))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_MainMotorCount(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[40d]"></a>MainMotor_PullUpAll()</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z19MainMotor_PullUpAllv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[602]"></a>Process_InflightCmd(unsigned short, double*)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inflightcmdprocess.o(.text._Z19Process_InflightCmdtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Process_InflightCmd(unsigned short, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[384]"></a>SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, sdstorage.o(.text._Z19SDLog_Msg_DebugVectPKcPdhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SDLog_Msg_DebugVect(const char*, double*, unsigned char, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12UnLock_SDLogv
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Lock_SDLogd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[452]"></a>SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)</STRONG> (Thumb, 1464 bytes, Stack size 624 bytes, sdstorage.o(.text._Z19SDLog_Msg_PosSensorh15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12UnLock_SDLogv
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Lock_SDLogd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[314]"></a>get_AngularAcc_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z19get_AngularAcc_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_AngularAcc_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[432]"></a>get_AuxChannelCount()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z19get_AuxChannelCountv))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>

<P><STRONG><a name="[402]"></a>get_CommulinkCompId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z19get_CommulinkCompIdv))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg42_MISSION_CURRENThP17__mavlink_message
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[4b4]"></a>get_Current_ZSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z19get_Current_ZSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[454]"></a>get_OptimalGlobal_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, ms_position.o(.text._Z19get_OptimalGlobal_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_OptimalGlobal_Z(PosSensorHealthInf1*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
</UL>

<P><STRONG><a name="[3a7]"></a>get_Target_Throttle(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z19get_Target_ThrottlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_Target_Throttle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[39d]"></a>get_WindDisturbance(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, ctrl_attitude.o(.text._Z19get_WindDisturbanceP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_WindDisturbance(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[3b9]"></a>init_drv_BootLoader()</STRONG> (Thumb, 1628 bytes, Stack size 36 bytes, drv_bootloader.o(.text._Z19init_drv_BootLoaderv))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = init_drv_BootLoader() &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD_Init_Complete
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Complete
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_SD_Init_Complete
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHex(char, _HexData*)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NVIC_SystemResetv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3d0]"></a>init_drv_ultrasonic()</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = init_drv_ultrasonic() &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register(volatile unsigned&, unsigned char, unsigned char, unsigned char)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[46f]"></a>set_mav_mode_disarm()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, commulink.o(.text._Z19set_mav_mode_disarmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_mav_mode_disarm() &rArr; xTaskGetCurrentTaskHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[428]"></a>IMUGyroscopeRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 496 bytes, Stack size 256 bytes, sensors.o(.text._Z20IMUGyroscopeRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2588 + Unknown Stack Size
<LI>Call Chain = IMUGyroscopeRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::zero()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::zero()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[471]"></a>ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 488 bytes, Stack size 184 bytes, parameters.o(.text._Z20ReadCurrentParameterP5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[59e]"></a>getCurrentMissionInd()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z20getCurrentMissionIndv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg42_MISSION_CURRENThP17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[313]"></a>get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z20get_AngularRate_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_AngularRate_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[4b3]"></a>get_Current_XYSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z20get_Current_XYSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[472]"></a>get_OptimalGlobal_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 800 bytes, Stack size 56 bytes, ms_position.o(.text._Z20get_OptimalGlobal_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_OptimalGlobal_XY(PosSensorHealthInf2*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[38a]"></a>get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z20get_VelocityENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[473]"></a>get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 472 bytes, Stack size 112 bytes, ms_position.o(.text._Z20get_VelocityFLU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double) &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3b6]"></a>init_InternalStorage()</STRONG> (Thumb, 424 bytes, Stack size 176 bytes, internalstorage.o(.text._Z20init_InternalStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1836 + Unknown Stack Size
<LI>Call Chain = init_InternalStorage() &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorCount
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VDDA_Voltage()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3c9]"></a>init_drv_InternalMag()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_internalmag.o(.text._Z20init_drv_InternalMagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_drv_InternalMag() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[47a]"></a>IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 696 bytes, Stack size 320 bytes, sensors.o(.text._Z21IMUMagnetometerUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
</UL>

<P><STRONG><a name="[361]"></a>MainMotor_PullDownAll()</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z21MainMotor_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24ctrl_Attitude_MultiRotorhdddPdS_
</UL>

<P><STRONG><a name="[483]"></a>get_Altitude_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Altitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[310]"></a>get_Attitude_MSStatus()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z21get_Attitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[47b]"></a>get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, ms_position.o(.text._Z21get_OptimalGlobal_XYZP19PosSensorHealthInf3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[38c]"></a>get_Position_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Position_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[47c]"></a>init_process_AuxFuncs()</STRONG> (Thumb, 282 bytes, Stack size 136 bytes, auxfuncs.o(.text._Z21init_process_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = init_process_AuxFuncs() &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[47d]"></a>IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 712 bytes, Stack size 328 bytes, sensors.o(.text._Z22IMUAccelerometerUpdateh7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object(int, int, int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::set_vector(int, int, int)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
</UL>

<P><STRONG><a name="[42d]"></a>PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)</STRONG> (Thumb, 688 bytes, Stack size 168 bytes, sensors.o(.text._Z22PositionSensorRegisterh20Position_Sensor_Type24Position_Sensor_DataType21Position_Sensor_framedddPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17TFMini_DriverInit4Portj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC302_DriverInit4Portj
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_JL32xx_DriverInit4Portj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC306_DriverInit4Portj
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_GL9306_DriverInit4Portj
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25AnoOpticalFlow_DriverInit4Portj
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
</UL>

<P><STRONG><a name="[319]"></a>ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)</STRONG> (Thumb, 1372 bytes, Stack size 352 bytes, parameters.o(.text._Z22ReadVolatileParamGroup5SNamePvttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108 + Unknown Stack Size
<LI>Call Chain = ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
</UL>

<P><STRONG><a name="[34e]"></a>SaveVolatileParamGroup(SName, double)</STRONG> (Thumb, 688 bytes, Stack size 272 bytes, parameters.o(.text._Z22SaveVolatileParamGroup5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2028 + Unknown Stack Size
<LI>Call Chain = SaveVolatileParamGroup(SName, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
</UL>

<P><STRONG><a name="[541]"></a>get_VelocityENU_Ctrl_x()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z22get_VelocityENU_Ctrl_xv))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[542]"></a>get_VelocityENU_Ctrl_y()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z22get_VelocityENU_Ctrl_yv))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[482]"></a>Altitude_Control_Enable(double)</STRONG> (Thumb, 452 bytes, Stack size 120 bytes, ctrl_position.o(.text._Z23Altitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_ZAutoSpeed(double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[484]"></a>Attitude_Control_Enable(double)</STRONG> (Thumb, 1256 bytes, Stack size 320 bytes, ctrl_attitude.o(.text._Z23Attitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAV_MainMotorCount(unsigned char)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::init(double, double, double)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(float)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[48a]"></a>ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, drv_extiic.o(.text._Z23ExtIIC_SendReceiveAddr7hPKhtS0_td))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double) &rArr; Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ExtIIC()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_ExtIIC(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
</UL>

<P><STRONG><a name="[445]"></a>Get_MainBaterry_Current()</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, drv_adc.o(.text._Z23Get_MainBaterry_Currentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = Get_MainBaterry_Current() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[444]"></a>Get_MainBaterry_Voltage()</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, drv_adc.o(.text._Z23Get_MainBaterry_Voltagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = Get_MainBaterry_Voltage() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24get_MainBatteryRMPercentPK10BatteryCfg
</UL>

<P><STRONG><a name="[48b]"></a>IMUMagnetometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 496 bytes, Stack size 256 bytes, sensors.o(.text._Z23IMUMagnetometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2588 + Unknown Stack Size
<LI>Call Chain = IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::zero()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::zero()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
</UL>

<P><STRONG><a name="[48c]"></a>MS_Notify_IMUGyroUpdate(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_main.o(.text._Z23MS_Notify_IMUGyroUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_Notify_IMUGyroUpdate(unsigned char) &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[48e]"></a>NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)</STRONG> (Thumb, 3328 bytes, Stack size 1728 bytes, navcmdprocess.o(.text._Z23NavCmd16_WAYPOINT_GetABhPdP7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*) &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf3::PosSensorHealthInf3__sub_object()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[495]"></a>PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)</STRONG> (Thumb, 2344 bytes, Stack size 1408 bytes, sensors.o(.text._Z23PositionSensorUpdateVelh7vector3IdEbdddPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message
</UL>

<P><STRONG><a name="[499]"></a>Position_Control_Enable(double)</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, ctrl_position.o(.text._Z23Position_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260<LI>Call Chain = Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYAutoSpeed(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3d9]"></a>ResetParametersIterator()</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, parameters.o(.text._Z23ResetParametersIteratorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ResetParametersIterator() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendParamList()
</UL>

<P><STRONG><a name="[2eb]"></a>WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)</STRONG> (Thumb, 1464 bytes, Stack size 352 bytes, parameters.o(.text._Z23WriteVolatileParamGroup5SNamePKvttbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108 + Unknown Stack Size
<LI>Call Chain = WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
</UL>

<P><STRONG><a name="[49c]"></a>get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, ms_position.o(.text._Z23get_PosSensorHealth_XYZP19PosSensorHealthInf3hd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[3cf]"></a>init_drv_AnoOpticalFlow()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_anoopticalflow.o(.text._Z23init_drv_AnoOpticalFlowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_AnoOpticalFlow() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[49d]"></a>Altitude_Control_Disable(double)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z24Altitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Altitude_Control_Disable(double) &rArr; Position_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
</UL>

<P><STRONG><a name="[49f]"></a>Attitude_Control_Disable(double)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._Z24Attitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Attitude_Control_Disable(double) &rArr; Altitude_Control_Disable(double) &rArr; Position_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[427]"></a>IMUAccelerometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 496 bytes, Stack size 256 bytes, sensors.o(.text._Z24IMUAccelerometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2588 + Unknown Stack Size
<LI>Call Chain = IMUAccelerometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::zero()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::zero()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[4a0]"></a>InflightCmd_CamTakePhoto()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, inflightcmdprocess.o(.text._Z24InflightCmd_CamTakePhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 2924 + Unknown Stack Size
<LI>Call Chain = InflightCmd_CamTakePhoto() &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[43d]"></a>InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, internalstorage.o(.text._Z24InternalStorage_ReadFilePKcS0_PvPjjid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700 + Unknown Stack Size
<LI>Call Chain = InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[31f]"></a>InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, internalstorage.o(.text._Z24InternalStorage_SaveFilePKcS0_PKvjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748 + Unknown Stack Size
<LI>Call Chain = InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
</UL>

<P><STRONG><a name="[41b]"></a>LockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z24LockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[339]"></a>MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)</STRONG> (Thumb, 1430 bytes, Stack size 64 bytes, ms_attitude.o(.text._Z24MS_Attitude_GyroIntegralh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[4a7]"></a>MS_Notify_IMUAceelUpdate(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_main.o(.text._Z24MS_Notify_IMUAceelUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_Notify_IMUAceelUpdate(unsigned char) &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
</UL>

<P><STRONG><a name="[4a8]"></a>PositionSensorUnRegister(unsigned char, double)</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, sensors.o(.text._Z24PositionSensorUnRegisterhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PositionSensorUnRegister(unsigned char, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[49e]"></a>Position_Control_Disable(double)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z24Position_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Position_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
</UL>

<P><STRONG><a name="[354]"></a>get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z24get_AccelerationENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[4a9]"></a>get_Altitude_ControlMode(Position_ControlMode*, double)</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z24get_Altitude_ControlModeP20Position_ControlModed))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_Altitude_ControlMode(Position_ControlMode*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[4aa]"></a>get_AngularRateNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, ctrl_main.o(.text._Z24get_AngularRateNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_AngularRateNC_filted(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::get_result()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4ac]"></a>get_Position_ControlMode(Position_ControlMode*, double)</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z24get_Position_ControlModeP20Position_ControlModed))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_Position_ControlMode(Position_ControlMode*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[317]"></a>get_history_AttitudeQuat(Quaternion*, double, double)</STRONG> (Thumb, 536 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z24get_history_AttitudeQuatP10Quaterniondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = get_history_AttitudeQuat(Quaternion*, double, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[4ad]"></a>IMUMagnetometerUnRegister(unsigned char, double)</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, sensors.o(.text._Z25IMUMagnetometerUnRegisterhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = IMUMagnetometerUnRegister(unsigned char, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
</UL>

<P><STRONG><a name="[481]"></a>InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, internalstorage.o(.text._Z25InternalStorage_WriteFilePKcS0_PKvjjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1756 + Unknown Stack Size
<LI>Call Chain = InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[4ae]"></a>ParameterIteratorMoveNext()</STRONG> (Thumb, 316 bytes, Stack size 128 bytes, parameters.o(.text._Z25ParameterIteratorMoveNextv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ParameterIteratorMoveNext() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[567]"></a>getUploadingMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z25getUploadingMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[4af]"></a>get_AccelerationNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, ctrl_main.o(.text._Z25get_AccelerationNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_AccelerationNC_filted(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::set_vector(double, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::get_result()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[496]"></a>get_history_AirframeQuatY(Quaternion*, double, double)</STRONG> (Thumb, 872 bytes, Stack size 184 bytes, ms_attitude.o(.text._Z25get_history_AirframeQuatYP10Quaterniondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = get_history_AirframeQuatY(Quaternion*, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[4b0]"></a>InflightCmd_SetGimbalPitch(double)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inflightcmdprocess.o(.text._Z26InflightCmd_SetGimbalPitchd))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = InflightCmd_SetGimbalPitch(double) &rArr; AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd
</UL>

<P><STRONG><a name="[4b1]"></a>Position_Control_set_ZLock(double)</STRONG> (Thumb, 288 bytes, Stack size 104 bytes, ctrl_position.o(.text._Z26Position_Control_set_ZLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[4b2]"></a>SDLog_Msg_LocalPositionNed(double)</STRONG> (Thumb, 416 bytes, Stack size 256 bytes, sdstorage.o(.text._Z26SDLog_Msg_LocalPositionNedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SDLog_Msg_LocalPositionNed(double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_XYSensor()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_ZSensor()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12UnLock_SDLogv
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Lock_SDLogd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[35d]"></a>TruncateVolatileParamGroup(SName, unsigned short, double)</STRONG> (Thumb, 576 bytes, Stack size 264 bytes, parameters.o(.text._Z26TruncateVolatileParamGroup5SNametd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2004 + Unknown Stack Size
<LI>Call Chain = TruncateVolatileParamGroup(SName, unsigned short, double) &rArr; InternalStorage_TruncateFile(const char*, const char*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
</UL>

<P><STRONG><a name="[41c]"></a>UnLockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z26UnLockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[3ab]"></a>VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 988 bytes, Stack size 448 bytes, parameters.o(.text._Z26VolatileParamGroupRegister5SNamettj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2148 + Unknown Stack Size
<LI>Call Chain = VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroup::VolatileParamGroup__sub_object()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
</UL>

<P><STRONG><a name="[31c]"></a>getInitializationCompleted()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z26getInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[3cb]"></a>init_drv_OpticalFlow_LC302()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_OpticalFlow_LC302() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3cc]"></a>init_drv_OpticalFlow_LC306()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_OpticalFlow_LC306() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[40a]"></a>setInitializationCompleted()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, basic.o(.text._Z26setInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[43c]"></a>InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)</STRONG> (Thumb, 280 bytes, Stack size 328 bytes, internalstorage.o(.text._Z27InternalStorage_GetFileSizePKcS0_Pjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = InternalStorage_GetFileSize(const char*, const char*, unsigned*, double) &rArr; lfs_stat &rArr; lfs_rawstat &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[4b8]"></a>Position_Control_set_XYLock(double, double)</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, ctrl_position.o(.text._Z27Position_Control_set_XYLockdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Position_Control_set_XYLock(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14NavCmd93_DELAYdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[3ce]"></a>init_drv_OpticalFlow_GL9306()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_OpticalFlow_GL9306() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3cd]"></a>init_drv_OpticalFlow_JL32xx()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_drv_OpticalFlow_JL32xx() &rArr; PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool(*)(Port, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4b9]"></a>is_Altitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z27is_Altitude_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
</UL>

<P><STRONG><a name="[387]"></a>is_Attitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z27is_Attitude_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_Attitude_Control_Enabled(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[4ba]"></a>is_Position_Control_Enabled(bool*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z27is_Position_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[4bb]"></a>Attitude_Control_set_YawLock(double)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z28Attitude_Control_set_YawLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Attitude_Control_set_YawLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[4b5]"></a>InternalStorage_TruncateFile(const char*, const char*, unsigned, double)</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, internalstorage.o(.text._Z28InternalStorage_TruncateFilePKcS0_jd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740 + Unknown Stack Size
<LI>Call Chain = InternalStorage_TruncateFile(const char*, const char*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
</UL>

<P><STRONG><a name="[4bd]"></a>PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, sensors.o(.text._Z28PositionSensorChangeDataTypeh24Position_Sensor_DataTyped))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[316]"></a>PositionSensorSetInavailable(unsigned char, const double*, double)</STRONG> (Thumb, 696 bytes, Stack size 696 bytes, sensors.o(.text._Z28PositionSensorSetInavailablehPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = PositionSensorSetInavailable(unsigned char, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[4be]"></a>PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)</STRONG> (Thumb, 1728 bytes, Stack size 1080 bytes, sensors.o(.text._Z28PositionSensorUpdatePositionh7vector3IdEbdddPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
</UL>

<P><STRONG><a name="[4bf]"></a>SDLog_Msg_AttitudeQuaternion(double)</STRONG> (Thumb, 304 bytes, Stack size 216 bytes, sdstorage.o(.text._Z28SDLog_Msg_AttitudeQuaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = SDLog_Msg_AttitudeQuaternion(double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qz() const
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qy() const
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qx() const
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12UnLock_SDLogv
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Lock_SDLogd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[563]"></a>get_current_use_IMUGyroscope()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z28get_current_use_IMUGyroscopev))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[429]"></a>set_IMU_Gyroscope_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ms_main.o(.text._Z28set_IMU_Gyroscope_UpdateFreqhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_IMU_Gyroscope_UpdateFreq(unsigned char, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[3a1]"></a>Attitude_Control_set_Throttle(double, double)</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._Z29Attitude_Control_set_Throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Attitude_Control_set_Throttle(double, double) &rArr; is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[363]"></a>get_MainBatteryVoltage_filted()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z29get_MainBatteryVoltage_filtedv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[511]"></a>T1 sq&lang;double&rang;(T1)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mavlinksendfuncs.o(.text._Z2sqIdET_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T1 sq&lang;double&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[512]"></a>T1 sq&lang;float&rang;(T1)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, msafe.o(.text._Z2sqIfET_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = T1 sq&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[4c4]"></a>Attitude_Control_get_TargetYaw(double*, double)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z30Attitude_Control_get_TargetYawPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Attitude_Control_get_TargetYaw(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
</UL>

<P><STRONG><a name="[4c5]"></a>Attitude_Control_set_Target_Yaw(double, double)</STRONG> (Thumb, 496 bytes, Stack size 176 bytes, ctrl_attitude.o(.text._Z31Attitude_Control_set_Target_Yawdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod(double, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[3ac]"></a>GetVolatileParamGroupParamCount(SName, unsigned short*, double)</STRONG> (Thumb, 432 bytes, Stack size 232 bytes, parameters.o(.text._Z31GetVolatileParamGroupParamCount5SNamePtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = GetVolatileParamGroupParamCount(SName, unsigned short*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
</UL>

<P><STRONG><a name="[4c7]"></a>Position_Control_Takeoff_Height(double, double)</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z31Position_Control_Takeoff_Heightdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Position_Control_Takeoff_Height(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4c9]"></a>Position_Control_get_ZAutoSpeed(double*, double*, double)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z31Position_Control_get_ZAutoSpeedPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Position_Control_get_ZAutoSpeed(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[485]"></a>Position_Control_set_ZAutoSpeed(double, double, double)</STRONG> (Thumb, 446 bytes, Stack size 136 bytes, ctrl_position.o(.text._Z31Position_Control_set_ZAutoSpeedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Position_Control_set_ZAutoSpeed(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[4ca]"></a>Attitude_Control_get_YawTrackErr(double*, double)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z32Attitude_Control_get_YawTrackErrPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Attitude_Control_get_YawTrackErr(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4cb]"></a>Position_Control_get_XYAutoSpeed(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z32Position_Control_get_XYAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Position_Control_get_XYAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[4cc]"></a>Position_Control_set_XYAutoSpeed(double, double)</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, ctrl_position.o(.text._Z32Position_Control_set_XYAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Position_Control_set_XYAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[561]"></a>get_current_use_IMUAccelerometer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z32get_current_use_IMUAccelerometerv))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[426]"></a>set_IMU_Accelerometer_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ms_main.o(.text._Z32set_IMU_Accelerometer_UpdateFreqhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_IMU_Accelerometer_UpdateFreq(unsigned char, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[4cd]"></a>Position_Control_get_XYZAutoSpeed(double*, double)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z33Position_Control_get_XYZAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Position_Control_get_XYZAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[486]"></a>Position_Control_reset_ZAutoSpeed(double)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z33Position_Control_reset_ZAutoSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Position_Control_reset_ZAutoSpeed(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[4ce]"></a>Position_Control_set_XYZAutoSpeed(double, double)</STRONG> (Thumb, 818 bytes, Stack size 136 bytes, ctrl_position.o(.text._Z33Position_Control_set_XYZAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Position_Control_set_XYZAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd
</UL>

<P><STRONG><a name="[49a]"></a>Position_Control_reset_XYAutoSpeed(double)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z34Position_Control_reset_XYAutoSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Position_Control_reset_XYAutoSpeed(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
</UL>

<P><STRONG><a name="[4cf]"></a>Attitude_Control_get_TargetTrackYaw(double*, double)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z35Attitude_Control_get_TargetTrackYawPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Attitude_Control_get_TargetTrackYaw(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
</UL>

<P><STRONG><a name="[4d0]"></a>Attitude_Control_set_Target_YawRate(double, double)</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._Z35Attitude_Control_set_Target_YawRatedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Attitude_Control_set_Target_YawRate(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[49b]"></a>Position_Control_reset_XYZAutoSpeed(double)</STRONG> (Thumb, 752 bytes, Stack size 96 bytes, ctrl_position.o(.text._Z35Position_Control_reset_XYZAutoSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Position_Control_reset_XYZAutoSpeed(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
</UL>

<P><STRONG><a name="[4d1]"></a>Position_Control_set_TargetPositionZ(double, double, double)</STRONG> (Thumb, 794 bytes, Stack size 160 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetPositionZddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
</UL>

<P><STRONG><a name="[4d2]"></a>Position_Control_set_TargetVelocityZ(double, double)</STRONG> (Thumb, 318 bytes, Stack size 112 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetVelocityZdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Position_Control_set_TargetVelocityZ(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[39e]"></a>Attitude_Control_get_Target_RollPitch(double*, double*, double)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_get_Target_RollPitchPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Attitude_Control_get_Target_RollPitch(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[394]"></a>Attitude_Control_set_Target_RollPitch(double, double, double)</STRONG> (Thumb, 596 bytes, Stack size 184 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_set_Target_RollPitchddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Attitude_Control_set_Target_RollPitch(double, double, double) &rArr; is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[4d3]"></a>PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)</STRONG> (Thumb, 2792 bytes, Stack size 1472 bytes, sensors.o(.text._Z37PositionSensorUpdatePositionGlobalVelh7vector3IdES0_bdddPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19map_projection_initP14Map_Projectiondd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[4d6]"></a>Position_Control_Takeoff_HeightGlobal(double, double)</STRONG> (Thumb, 102 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z37Position_Control_Takeoff_HeightGlobaldd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Position_Control_Takeoff_HeightGlobal(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4d7]"></a>Position_Control_set_TargetPositionXY(double, double, double, double)</STRONG> (Thumb, 896 bytes, Stack size 288 bytes, ctrl_position.o(.text._Z37Position_Control_set_TargetPositionXYdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Position_Control_set_TargetPositionXY(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4d9]"></a>Position_Control_set_TargetPositionXYZ(double, double, double, double, double)</STRONG> (Thumb, 1594 bytes, Stack size 416 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionXYZddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4da]"></a>Position_Control_set_TargetPositionZRA(double, double, double)</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionZRAddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Position_Control_set_TargetPositionZRA(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4db]"></a>Attitude_Control_set_Target_YawRelative(double, double)</STRONG> (Thumb, 332 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._Z39Attitude_Control_set_Target_YawRelativedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = Attitude_Control_set_Target_YawRelative(double, double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4c8]"></a>Position_Control_Takeoff_HeightRelative(double, double)</STRONG> (Thumb, 302 bytes, Stack size 80 bytes, ctrl_position.o(.text._Z39Position_Control_Takeoff_HeightRelativedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4dc]"></a>Position_Control_get_LineFlightDistance(double*, double)</STRONG> (Thumb, 298 bytes, Stack size 192 bytes, ctrl_position.o(.text._Z39Position_Control_get_LineFlightDistancePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Position_Control_get_LineFlightDistance(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4c6]"></a>Mod(double, double)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mavlinksendfuncs.o(.text._Z3Moddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mod(double, double) &rArr; is_zero(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
</UL>

<P><STRONG><a name="[4dd]"></a>Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)</STRONG> (Thumb, 342 bytes, Stack size 200 bytes, ctrl_position.o(.text._Z41Position_Control_get_LineFlightABDistanceP7vector3IdEPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4de]"></a>Position_Control_set_TargetPositionZGlobal(double, double, double)</STRONG> (Thumb, 170 bytes, Stack size 168 bytes, ctrl_position.o(.text._Z42Position_Control_set_TargetPositionZGlobalddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Position_Control_set_TargetPositionZGlobal(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4df]"></a>Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)</STRONG> (Thumb, 284 bytes, Stack size 296 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetPositionXY_LatLondddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = Position_Control_set_TargetPositionXY_LatLon(double, double, double, double) &rArr; Position_Control_set_TargetPositionXY(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e1]"></a>Position_Control_set_TargetPositionZRelative(double, double, double)</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetPositionZRelativeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Position_Control_set_TargetPositionZRelative(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4e2]"></a>Position_Control_set_TargetPositionXYRelative(double, double, double, double)</STRONG> (Thumb, 920 bytes, Stack size 304 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYRelativedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Position_Control_set_TargetPositionXYRelative(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e3]"></a>Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)</STRONG> (Thumb, 376 bytes, Stack size 384 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYZ_LatLonddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf3::PosSensorHealthInf3__sub_object()
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e4]"></a>Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)</STRONG> (Thumb, 1626 bytes, Stack size 432 bytes, ctrl_position.o(.text._Z46Position_Control_set_TargetPositionXYZRelativeddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e5]"></a>Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)</STRONG> (Thumb, 382 bytes, Stack size 352 bytes, ctrl_position.o(.text._Z47Position_Control_set_TargetPositionXYZRA_LatLonddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e6]"></a>Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)</STRONG> (Thumb, 144 bytes, Stack size 120 bytes, ctrl_position.o(.text._Z56Position_Control_set_TargetPositionXYRelativeBodyheadingdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double) &rArr; Position_Control_set_TargetPositionXYRelative(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e7]"></a>Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)</STRONG> (Thumb, 152 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z57Position_Control_set_TargetPositionXYZRelativeBodyheadingddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[4e8]"></a>Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)</STRONG> (Thumb, 912 bytes, Stack size 336 bytes, ctrl_position.o(.text._Z59Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimitddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_vector(double&, double&, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[220]"></a>delay(double)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timebase.o(.text._Z5delayd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = delay(double) &rArr; TIME::get_pass_time() const &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
</UL>

<P><STRONG><a name="[ae]"></a>MS_Main(void*)</STRONG> (Thumb, 592 bytes, Stack size 600 bytes, ms_main.o(.text._Z7MS_MainPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = MS_Main(void*) &rArr; MS_Position(unsigned char, IMU_Sensor) &rArr; PositionSensorSetInavailable(unsigned char, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[38f]"></a>is_zero(double)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mavlinksendfuncs.o(.text._Z7is_zerod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_zero(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod(double, double)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_Rotation_vec()
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
</UL>

<P><STRONG><a name="[326]"></a>LockCtrl(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ctrl_main.o(.text._Z8LockCtrld))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle(double*, double)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYAutoSpeed(double)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_ZAutoSpeed(double)
</UL>

<P><STRONG><a name="[466]"></a>ParseHex(char, _HexData*)</STRONG> (Thumb, 1196 bytes, Stack size 16 bytes, drv_bootloader.o(.text._Z8ParseHexcP8_HexData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParseHex(char, _HexData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[3bc]"></a>init_GUI()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gui.o(.text._Z8init_GUIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_GUI() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3d7]"></a>LCD_Clear(unsigned short, double)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, drv_oled.o(.text._Z9LCD_Cleartd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LCD_Clear(unsigned short, double) &rArr; _ZL15LCD_Address_Settttt &rArr; _ZL11LCD_WR_DATAtd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Oled(double)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_Oled()
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LCD_Address_Settttt
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjb
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
</UL>

<P><STRONG><a name="[418]"></a>Lock_Oled(double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_oled.o(.text._Z9Lock_Oledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>

<P><STRONG><a name="[312]"></a>ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 464 bytes, Stack size 248 bytes, parameters.o(.text._Z9ReadParam5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[4ec]"></a>ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 752 bytes, Stack size 360 bytes, parameters.o(.text._Z9ReadParamjP5SNameP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
</UL>

<P><STRONG><a name="[37c]"></a>T1 constrain&lang;double&rang;(T1, T1)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_sensors.o(.text._Z9constrainIdET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T1 constrain&lang;double&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[28f]"></a>T1 constrain&lang;double&rang;(T1, T1, T1)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, drv_sensors.o(.text._Z9constrainIdET_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1 constrain&lang;double&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10set_TC_Outd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[28c]"></a>T1 constrain&lang;float&rang;(T1, T1)</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, drv_sensors.o(.text._Z9constrainIfET_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T1 constrain&lang;float&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[291]"></a>T1 constrain&lang;float&rang;(T1, T1, T1)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, receiver.o(.text._Z9constrainIfET_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1 constrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[379]"></a>safe_sqrt(double)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gui.o(.text._Z9safe_sqrtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_vector(double&, double&, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_Rotation_vec()
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31throttle_nonlinear_compensationPd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
</UL>

<P><STRONG><a name="[32c]"></a>tan_sig_0(double)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z9tan_sig_0d))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_3(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_0(double, double, double)
</UL>

<P><STRONG><a name="[32e]"></a>tan_sig_1(double)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z9tan_sig_1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tan_sig_1(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_3(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
</UL>

<P><STRONG><a name="[330]"></a>tan_sig_2(double, double)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z9tan_sig_2dd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tan_sig_2(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_3(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
</UL>

<P><STRONG><a name="[332]"></a>tan_sig_3(double, double, double)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z9tan_sig_3ddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tan_sig_3(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_3(double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[337]"></a>IMU_Sensor::IMU_Sensor__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui.o(.text._ZN10IMU_SensorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IMU_Sensor::IMU_Sensor__sub_object() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[334]"></a>IMU_Sensor::operator =(const IMU_Sensor&)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, sensors.o(.text._ZN10IMU_SensoraSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IMU_Sensor::operator =(const IMU_Sensor&) &rArr; TIME::operator =(const TIME&)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
</UL>

<P><STRONG><a name="[43f]"></a>ParamGroup::ParamGroup__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameters.o(.text._ZN10ParamGroupC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParamGroup::ParamGroup__sub_object() &rArr; SName::SName__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroup::VolatileParamGroup__sub_object()
</UL>

<P><STRONG><a name="[374]"></a>Quaternion::get_Rotation_vec()</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._ZN10Quaternion16get_Rotation_vecEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Quaternion::get_Rotation_vec() &rArr; __hardfp_acos &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[30e]"></a>Quaternion::rotate_delta_angle(vector3&lang;double&rang;)</STRONG> (Thumb, 536 bytes, Stack size 80 bytes, ms_attitude.o(.text._ZN10Quaternion18rotate_delta_angleE7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Quaternion::rotate_delta_angle(vector3&lang;double&rang;) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[51f]"></a>Quaternion::Enu2Ned()</STRONG> (Thumb, 176 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZN10Quaternion7Enu2NedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Quaternion::Enu2Ned() &rArr; Quaternion::operator *(const Quaternion&) const &rArr; Quaternion::Quaternion__sub_object(double, double, double, double) &rArr; Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *(const Quaternion&) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[36a]"></a>Quaternion::conjugate()</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, sensors.o(.text._ZN10Quaternion9conjugateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::conjugate()
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[5fd]"></a>Quaternion::normalize()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sensors.o(.text._ZN10Quaternion9normalizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
</UL>

<P><STRONG><a name="[369]"></a>Quaternion::Quaternion__sub_object(double, double, double, double)</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, sensors.o(.text._ZN10QuaternionC2Edddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Quaternion::Quaternion__sub_object(double, double, double, double) &rArr; Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *(const Quaternion&) const
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
</UL>

<P><STRONG><a name="[364]"></a>Quaternion::Quaternion__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, sdstorage.o(.text._ZN10QuaternionC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::Quaternion__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[13f]"></a>M10_RCCalib::main_func(void*, unsigned)</STRONG> (Thumb, 3976 bytes, Stack size 928 bytes, m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2980 + Unknown Stack Size
<LI>Call Chain = M10_RCCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator !=(const SName&) const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
</UL>
<P><STRONG><a name="[2fb]"></a>M10_RCCalib::M10_RCCalib()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M10_RCCalib::M10_RCCalib() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7dc]"></a>M10_RCCalib::M10_RCCalib__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev), UNUSED)

<P><STRONG><a name="[141]"></a>M30_AttCtrl::main_func(void*, unsigned)</STRONG> (Thumb, 704 bytes, Stack size 248 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = M30_AttCtrl::main_func(void*, unsigned) &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
</UL>
<P><STRONG><a name="[2ff]"></a>M30_AttCtrl::M30_AttCtrl()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M30_AttCtrl::M30_AttCtrl() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7dd]"></a>M30_AttCtrl::M30_AttCtrl__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev), UNUSED)

<P><STRONG><a name="[143]"></a>M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrl15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*) &rArr; get_RcButtonZone(double, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
</UL>
<P><STRONG><a name="[142]"></a>M32_PosCtrl::main_func(void*, unsigned)</STRONG> (Thumb, 12532 bytes, Stack size 3984 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 7044 + Unknown Stack Size
<LI>Call Chain = M32_PosCtrl::main_func(void*, unsigned) &rArr; process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode_disarm()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode_arm()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 sq&lang;double&rang;(T1)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_CamTakePhoto()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_InflightCmd(unsigned short, double*)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CrashedState()
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_vector(double&, double&, double)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 remove_deadband&lang;double&rang;(T1, T1)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_NavCmdInf(NavCmdInf*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelDown()
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelXY()
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelUp()
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxAccXY()
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_NavCmd(unsigned short, double, unsigned char, double*)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
</UL>
<P><STRONG><a name="[300]"></a>M32_PosCtrl::M32_PosCtrl()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M32_PosCtrl::M32_PosCtrl() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7de]"></a>M32_PosCtrl::M32_PosCtrl__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev), UNUSED)

<P><STRONG><a name="[144]"></a>M12_AccCalib::main_func(void*, unsigned)</STRONG> (Thumb, 4384 bytes, Stack size 2376 bytes, m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4428 + Unknown Stack Size
<LI>Call Chain = M12_AccCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::set_vector(int, int, int)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator +(const vector3&lang;int&rang;&) const
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::operator =(const vector3&lang;float&rang;&)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::vector3__sub_object(float, float, float)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8get_F_dFPdS_S_S_
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
</UL>
<P><STRONG><a name="[2fd]"></a>M12_AccCalib::M12_AccCalib()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M12_AccCalib::M12_AccCalib() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7df]"></a>M12_AccCalib::M12_AccCalib__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev), UNUSED)

<P><STRONG><a name="[145]"></a>M13_MagCalib::main_func(void*, unsigned)</STRONG> (Thumb, 3520 bytes, Stack size 2040 bytes, m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4092 + Unknown Stack Size
<LI>Call Chain = M13_MagCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8get_F_dFhPdS_S_PK12MagCalibInfo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
</UL>
<P><STRONG><a name="[2fe]"></a>M13_MagCalib::M13_MagCalib()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M13_MagCalib::M13_MagCalib() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7e0]"></a>M13_MagCalib::M13_MagCalib__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev), UNUSED)

<P><STRONG><a name="[41d]"></a>ReceiverSync::ReceiverSync__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, receiver.o(.text._ZN12ReceiverSyncC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReceiverSync::ReceiverSync__sub_object() &rArr; Receiver::Receiver__sub_object() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[146]"></a>M11_TempCalib::main_func(void*, unsigned)</STRONG> (Thumb, 1656 bytes, Stack size 1136 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 3188 + Unknown Stack Size
<LI>Call Chain = M11_TempCalib::main_func(void*, unsigned) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::zero()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::get_square() const
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
</UL>
<P><STRONG><a name="[2fc]"></a>M11_TempCalib::M11_TempCalib()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M11_TempCalib::M11_TempCalib() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7e1]"></a>M11_TempCalib::M11_TempCalib__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev), UNUSED)

<P><STRONG><a name="[60e]"></a>Quaternion_Ef::calculate_effeciency_variables()</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN13Quaternion_Ef30calculate_effeciency_variablesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion_Ef::calculate_effeciency_variables()
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::conjugate()
</UL>

<P><STRONG><a name="[36d]"></a>Quaternion_Ef::conjugate()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN13Quaternion_Ef9conjugateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Quaternion_Ef::conjugate() &rArr; Quaternion_Ef::calculate_effeciency_variables()
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::calculate_effeciency_variables()
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[36c]"></a>Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, ctrl_attitude.o(.text._ZN13Quaternion_EfC2ERK10Quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&) &rArr; Quaternion::Quaternion__sub_object(double, double, double, double) &rArr; Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qz() const
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qy() const
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qx() const
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qw() const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::calculate_effeciency_variables()
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[353]"></a>ESO_AngularRate::run(double)</STRONG> (Thumb, 708 bytes, Stack size 104 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESO_AngularRate::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[487]"></a>ESO_AngularRate::init(double, double, double, double, double)</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRate4initEddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ESO_AngularRate::init(double, double, double, double, double) &rArr; Filter_Butter2_LP::set_cutoff_frequency(double, double) &rArr; BUT_IIR_calc_freq(double*, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::set_cutoff_frequency(double, double)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::set_cutoff_frequency(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[357]"></a>ESO_AngularRate::update_u(double)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRate8update_uEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESO_AngularRate::update_u(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_2()
</UL>

<P><STRONG><a name="[611]"></a>ESO_AngularRate::ESO_AngularRate__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRateC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESO_AngularRate::ESO_AngularRate__sub_object() &rArr; Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::Filter_Butter2_LP__sub_object()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::Filter_Butter2_BS__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[44e]"></a>Filter_LP_IIR_1::set_cutoff_frequency(double, double)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._ZN15Filter_LP_IIR_120set_cutoff_frequencyEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_LP_IIR_1::set_cutoff_frequency(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>

<P><STRONG><a name="[5ba]"></a>Filter_LP_IIR_1::run(double)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15Filter_LP_IIR_13runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_LP_IIR_1::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[5bb]"></a>Filter_LP_IIR_1::reset(double)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15Filter_LP_IIR_15resetEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_LP_IIR_1::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[615]"></a>Filter_LP_IIR_1::set_value(double)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15Filter_LP_IIR_19set_valueEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_LP_IIR_1::set_value(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::Filter_LP_IIR_1__sub_object()
</UL>

<P><STRONG><a name="[614]"></a>Filter_LP_IIR_1::Filter_LP_IIR_1__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15Filter_LP_IIR_1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_LP_IIR_1::Filter_LP_IIR_1__sub_object() &rArr; Filter_LP_IIR_1::set_value(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::set_value(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[480]"></a>Position_Sensor::Position_Sensor__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gui.o(.text._ZN15Position_SensorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Position_Sensor::Position_Sensor__sub_object() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[435]"></a>Position_Sensor::operator =(const Position_Sensor&)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, sensors.o(.text._ZN15Position_SensoraSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Position_Sensor::operator =(const Position_Sensor&) &rArr; TIME::operator =(const TIME&)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
</UL>

<P><STRONG><a name="[610]"></a>Filter_Butter2_BS::set_cutoff_frequency(double, double, double)</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_BS20set_cutoff_frequencyEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Filter_Butter2_BS::set_cutoff_frequency(double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
</UL>

<P><STRONG><a name="[616]"></a>Filter_Butter2_BS::reset(double)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_BS5resetEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_Butter2_BS::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::Filter_Butter2_BS__sub_object()
</UL>

<P><STRONG><a name="[613]"></a>Filter_Butter2_BS::Filter_Butter2_BS__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_BSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter2_BS::Filter_Butter2_BS__sub_object() &rArr; Filter_Butter2_BS::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::ESO_AngularRate__sub_object()
</UL>

<P><STRONG><a name="[60f]"></a>Filter_Butter2_LP::set_cutoff_frequency(double, double)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_LP20set_cutoff_frequencyEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Filter_Butter2_LP::set_cutoff_frequency(double, double) &rArr; BUT_IIR_calc_freq(double*, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq(double*, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::init(double, double, double)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(double, double, double, double, double)
</UL>

<P><STRONG><a name="[617]"></a>Filter_Butter2_LP::reset(double)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_LP5resetEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_Butter2_LP::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::Filter_Butter2_LP__sub_object()
</UL>

<P><STRONG><a name="[612]"></a>Filter_Butter2_LP::Filter_Butter2_LP__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN17Filter_Butter2_LPC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::ESO_h__sub_object()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::ESO_AngularRate__sub_object()
</UL>

<P><STRONG><a name="[4ab]"></a>Filter_Butter4_LP::get_result()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_main.o(.text._ZN17Filter_Butter4_LP10get_resultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Filter_Butter4_LP::get_result()
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
</UL>

<P><STRONG><a name="[44d]"></a>Filter_Butter4_LP::set_cutoff_frequency(double, double)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ctrl_main.o(.text._ZN17Filter_Butter4_LP20set_cutoff_frequencyEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Filter_Butter4_LP::set_cutoff_frequency(double, double) &rArr; BUT_IIR_calc_freq(double*, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq(double*, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[562]"></a>Filter_Butter4_LP::run(double)</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, ctrl_main.o(.text._ZN17Filter_Butter4_LP3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Filter_Butter4_LP::run(double) &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[39f]"></a>Filter_Butter4_LP::reset(double)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ctrl_main.o(.text._ZN17Filter_Butter4_LP5resetEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_Butter4_LP::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::run(double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[618]"></a>Filter_Butter4_LP::Filter_Butter4_LP__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ctrl_main.o(.text._ZN17Filter_Butter4_LPC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::reset(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[4f3]"></a>GPS_State_Machine::GPS_State_Machine__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, drv_gps.o(.text._ZN17GPS_State_MachineC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPS_State_Machine::GPS_State_Machine__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[4b6]"></a>VolatileParamGroup::VolatileParamGroup__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameters.o(.text._ZN18VolatileParamGroupC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VolatileParamGroup::VolatileParamGroup__sub_object() &rArr; ParamGroup::ParamGroup__sub_object() &rArr; SName::SName__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroup::ParamGroup__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[491]"></a>PosSensorHealthInf1::PosSensorHealthInf1__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui.o(.text._ZN19PosSensorHealthInf1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PosSensorHealthInf1::PosSensorHealthInf1__sub_object() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
</UL>

<P><STRONG><a name="[494]"></a>PosSensorHealthInf2::PosSensorHealthInf2__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gui.o(.text._ZN19PosSensorHealthInf2C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = PosSensorHealthInf2::PosSensorHealthInf2__sub_object() &rArr; vector2&lang;TIME&rang;::vector2__sub_object() &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;TIME&rang;::vector2__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[492]"></a>PosSensorHealthInf3::PosSensorHealthInf3__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, navcmdprocess.o(.text._ZN19PosSensorHealthInf3C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PosSensorHealthInf3::PosSensorHealthInf3__sub_object() &rArr; vector3&lang;TIME&rang;::vector3__sub_object() &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;TIME&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[327]"></a>TIME::set_invalid()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gui.o(.text._ZN4TIME11set_invalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIME::set_invalid()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
</UL>

<P><STRONG><a name="[3e1]"></a>TIME::get_pass_time_st()</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, sensors.o(.text._ZN4TIME16get_pass_time_stEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIME::get_pass_time_st() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[225]"></a>TIME::get_System_Run_Time()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timebase.o(.text._ZN4TIME19get_System_Run_TimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[206]"></a>TIME::now()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timebase.o(.text._ZN4TIME3nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIdleTask
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
</UL>

<P><STRONG><a name="[4fa]"></a>TIME::is_valid()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, drv_gps.o(.text._ZN4TIME8is_validEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIME::is_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[4f7]"></a>TIME::TIME__sub_object(bool)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gui.o(.text._ZN4TIMEC2Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;TIME&rang;::vector2__sub_object()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;TIME&rang;::vector3__sub_object()
</UL>

<P><STRONG><a name="[4f1]"></a>TIME::TIME__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timebase.o(.text._ZN4TIMEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIME::TIME__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;TIME&rang;::vector2__sub_object()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;TIME&rang;::vector3__sub_object()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[207]"></a>TIME::operator =(const TIME&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdstorage.o(.text._ZN4TIMEaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIME::operator =(const TIME&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;TIME&rang;::vector2__sub_object()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIdleTask
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::operator =(const Position_Sensor&)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::operator =(const Receiver&)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;TIME&rang;::vector3__sub_object()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
</UL>

<P><STRONG><a name="[209]"></a>TIME::operator -=(const TIME&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cpu_load.o(.text._ZN4TIMEmIERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIME::operator -=(const TIME&)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
</UL>

<P><STRONG><a name="[20a]"></a>TIME::operator +=(const TIME&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cpu_load.o(.text._ZN4TIMEpLERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIME::operator +=(const TIME&)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
</UL>

<P><STRONG><a name="[5b8]"></a>ESO_h::get_hover_throttle()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN5ESO_h18get_hover_throttleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_h::get_hover_throttle()
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[355]"></a>ESO_h::run(double)</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN5ESO_h3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESO_h::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[488]"></a>ESO_h::init(double, double, double)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._ZN5ESO_h4initEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ESO_h::init(double, double, double) &rArr; Filter_Butter2_LP::set_cutoff_frequency(double, double) &rArr; BUT_IIR_calc_freq(double*, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::set_cutoff_frequency(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[422]"></a>ESO_h::get_T()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN5ESO_h5get_TEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_h::get_T()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
</UL>

<P><STRONG><a name="[3e2]"></a>ESO_h::get_b()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN5ESO_h5get_bEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_h::get_b()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
</UL>

<P><STRONG><a name="[358]"></a>ESO_h::update_u(double)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN5ESO_h8update_uEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESO_h::update_u(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_2()
</UL>

<P><STRONG><a name="[44a]"></a>ESO_h::get_force()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN5ESO_h9get_forceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_h::get_force()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
</UL>

<P><STRONG><a name="[61b]"></a>ESO_h::ESO_h__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN5ESO_hC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESO_h::ESO_h__sub_object() &rArr; Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP::Filter_Butter2_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[31e]"></a>SName::get_CharStr(char*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, parameters.o(.text._ZN5SName11get_CharStrEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SName::get_CharStr(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
</UL>

<P><STRONG><a name="[293]"></a>SName::SName__sub_object(const char*)</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN5SNameC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Current()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[54c]"></a>SName::SName__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, parameters.o(.text._ZN5SNameC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SName::SName__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroup::ParamGroup__sub_object()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator +(const SName&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[3e0]"></a>SName::operator +(const SName&)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, sensors.o(.text._ZN5SNameplERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SName::operator +(const SName&) &rArr; SName::SName__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[380]"></a>TD4_SL::get_tracking_mode()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN6TD4_SL17get_tracking_modeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_SL::get_tracking_mode()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[37d]"></a>TD4_SL::reset()</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN6TD4_SL5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_SL::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::TD4_SL__sub_object()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::TD4_SL__sub_object(double, double, double, double)
</UL>

<P><STRONG><a name="[37f]"></a>TD4_SL::track3(double, double)</STRONG> (Thumb, 426 bytes, Stack size 184 bytes, ctrl_attitude.o(.text._ZN6TD4_SL6track3Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TD4_SL::track3(double, double) &rArr; smooth_kp_2(double, double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[37b]"></a>TD4_SL::track4(double, double)</STRONG> (Thumb, 630 bytes, Stack size 280 bytes, ctrl_attitude.o(.text._ZN6TD4_SL6track4Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = TD4_SL::track4(double, double) &rArr; smooth_kp_3(double, double, double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_3(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[44f]"></a>TD4_SL::TD4_SL__sub_object(double, double, double, double)</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ctrl_position.o(.text._ZN6TD4_SLC2Edddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TD4_SL::TD4_SL__sub_object(double, double, double, double) &rArr; TD4_SL::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
</UL>

<P><STRONG><a name="[61c]"></a>TD4_SL::TD4_SL__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN6TD4_SLC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TD4_SL::TD4_SL__sub_object() &rArr; TD4_SL::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[619]"></a>vector2&lang;TIME&rang;::vector2__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, gui.o(.text._ZN7vector2I4TIMEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = vector2&lang;TIME&rang;::vector2__sub_object() &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
</UL>

<P><STRONG><a name="[61f]"></a>vector2&lang;double&rang;::zero()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZN7vector2IdE4zeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector2&lang;double&rang;::zero()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::reset()
</UL>

<P><STRONG><a name="[39c]"></a>vector2&lang;double&rang;::constrain(double)</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, ctrl_position.o(.text._ZN7vector2IdE9constrainEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vector2&lang;double&rang;::constrain(double) &rArr; vector2&lang;double&rang;::operator *=(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::get_square() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator *=(double)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[372]"></a>vector2&lang;double&rang;::vector2__sub_object(double, double)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gui.o(.text._ZN7vector2IdEC2Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator +(const vector2&lang;double&rang;&) const
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -() const
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator *(double) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator /(double) const
</UL>

<P><STRONG><a name="[38d]"></a>vector2&lang;double&rang;::vector2__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gui.o(.text._ZN7vector2IdEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::TD3_2DSL__sub_object()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[33b]"></a>vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._ZN7vector2IdEaSERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[399]"></a>vector2&lang;double&rang;::operator -=(const vector2&lang;double&rang;&)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ctrl_position.o(.text._ZN7vector2IdEmIERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vector2&lang;double&rang;::operator -=(const vector2&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[61d]"></a>vector2&lang;double&rang;::operator *=(double)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ctrl_position.o(.text._ZN7vector2IdEmLEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vector2&lang;double&rang;::operator *=(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::constrain(double)
</UL>

<P><STRONG><a name="[39b]"></a>vector2&lang;double&rang;::operator +=(const vector2&lang;double&rang;&)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._ZN7vector2IdEpLERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vector2&lang;double&rang;::operator +=(const vector2&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[61a]"></a>vector3&lang;TIME&rang;::vector3__sub_object()</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, navcmdprocess.o(.text._ZN7vector3I4TIMEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = vector3&lang;TIME&rang;::vector3__sub_object() &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf3::PosSensorHealthInf3__sub_object()
</UL>

<P><STRONG><a name="[370]"></a>vector3&lang;double&rang;::set_vector(double, double, double)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sensors.o(.text._ZN7vector3IdE10set_vectorEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vector3&lang;double&rang;::set_vector(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[39a]"></a>vector3&lang;double&rang;::zero()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sensors.o(.text._ZN7vector3IdE4zeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;double&rang;::zero()
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[366]"></a>vector3&lang;double&rang;::vector3__sub_object(double, double, double)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sensors.o(.text._ZN7vector3IdEC2Eddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_axis_z() const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_Rotation_vec()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator -() const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator /(double) const
</UL>

<P><STRONG><a name="[352]"></a>vector3&lang;double&rang;::vector3__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sdstorage.o(.text._ZN7vector3IdEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf3::PosSensorHealthInf3__sub_object()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_ZAutoSpeed(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[377]"></a>vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sensors.o(.text._ZN7vector3IdEaSERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::operator =(const Position_Sensor&)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[4ee]"></a>vector3&lang;double&rang;::operator [](int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, debug.o(.text._ZN7vector3IdEixEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector3&lang;double&rang;::operator [](int)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
</UL>

<P><STRONG><a name="[554]"></a>vector3&lang;float&rang;::set_vector(float, float, float)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mavlinksendfuncs.o(.text._ZN7vector3IfE10set_vectorEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector3&lang;float&rang;::set_vector(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
</UL>

<P><STRONG><a name="[608]"></a>vector3&lang;float&rang;::vector3__sub_object(float, float, float)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m12_acccalib.o(.text._ZN7vector3IfEC2Efff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector3&lang;float&rang;::vector3__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[553]"></a>vector3&lang;float&rang;::vector3__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text._ZN7vector3IfEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;float&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
</UL>

<P><STRONG><a name="[60a]"></a>vector3&lang;float&rang;::operator =(const vector3&lang;float&rang;&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m12_acccalib.o(.text._ZN7vector3IfEaSERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector3&lang;float&rang;::operator =(const vector3&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[47f]"></a>vector3&lang;int&rang;::set_vector(int, int, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sensors.o(.text._ZN7vector3IiE10set_vectorEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector3&lang;int&rang;::set_vector(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[470]"></a>vector3&lang;int&rang;::zero()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, sensors.o(.text._ZN7vector3IiE4zeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;int&rang;::zero()
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
</UL>

<P><STRONG><a name="[47e]"></a>vector3&lang;int&rang;::vector3__sub_object(int, int, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sensors.o(.text._ZN7vector3IiEC2Eiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector3&lang;int&rang;::vector3__sub_object(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::operator +(const vector3&lang;int&rang;&) const
</UL>

<P><STRONG><a name="[518]"></a>vector3&lang;int&rang;::vector3__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gui.o(.text._ZN7vector3IiEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;int&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[43b]"></a>vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensors.o(.text._ZN7vector3IiEaSERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector3&lang;int&rang;::operator =(const vector3&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::operator =(const IMU_Sensor&)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[362]"></a>Receiver::Receiver__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui.o(.text._ZN8ReceiverC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Receiver::Receiver__sub_object() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverSync::ReceiverSync__sub_object()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[32a]"></a>Receiver::operator =(const Receiver&)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, receiver.o(.text._ZN8ReceiveraSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Receiver::operator =(const Receiver&) &rArr; TIME::operator =(const TIME&)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
</UL>

<P><STRONG><a name="[61e]"></a>TD3_2DSL::reset()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN8TD3_2DSL5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TD3_2DSL::reset() &rArr; vector2&lang;double&rang;::zero()
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::zero()
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::TD3_2DSL__sub_object()
</UL>

<P><STRONG><a name="[373]"></a>TD3_2DSL::track3(vector2&lang;double&rang;, double)</STRONG> (Thumb, 1682 bytes, Stack size 1120 bytes, ctrl_attitude.o(.text._ZN8TD3_2DSL6track3E7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = TD3_2DSL::track3(vector2&lang;double&rang;, double) &rArr; smooth_kp_2(double, double, double, double, double) &rArr; tan_sig_0(double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::get_square() const
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator +(const vector2&lang;double&rang;&) const
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -() const
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator *(double) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator /(double) const
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator +=(const vector2&lang;double&rang;&)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator =(const vector2&lang;double&rang;&)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::zero()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_1(double, double, double, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_0(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[621]"></a>TD3_2DSL::TD3_2DSL__sub_object()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN8TD3_2DSLC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TD3_2DSL::TD3_2DSL__sub_object() &rArr; TD3_2DSL::reset() &rArr; vector2&lang;double&rang;::zero()
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[560]"></a>TD4_Lite::reset()</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, drv_sensors.o(.text._ZN8TD4_Lite5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_Lite::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::TD4_Lite__sub_object()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[28d]"></a>TD4_Lite::get_x2()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, drv_sensors.o(.text._ZN8TD4_Lite6get_x2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_Lite::get_x2()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[28b]"></a>TD4_Lite::track4(double, double, double, double, double, double)</STRONG> (Thumb, 478 bytes, Stack size 216 bytes, drv_sensors.o(.text._ZN8TD4_Lite6track4Edddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TD4_Lite::track4(double, double, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[289]"></a>TD4_Lite::TD4_Lite__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_sensors.o(.text._ZN8TD4_LiteC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TD4_Lite::TD4_Lite__sub_object() &rArr; TD4_Lite::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[147]"></a>M35_Auto1::main_func(void*, unsigned)</STRONG> (Thumb, 4892 bytes, Stack size 1472 bytes, m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2732<LI>Call Chain = M35_Auto1::main_func(void*, unsigned) &rArr; Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxYawSpeed()
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxLean()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CrashedState()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 remove_deadband&lang;double&rang;(T1, T1)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_NavCmdInf(NavCmdInf*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelDown()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelXY()
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxVelUp()
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxAccXY()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata._ZTV9M35_Auto1)
</UL>
<P><STRONG><a name="[301]"></a>M35_Auto1::M35_Auto1()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M35_Auto1::M35_Auto1() &rArr; Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Base::Mode_Base__sub_object(SName, unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[7e2]"></a>M35_Auto1::M35_Auto1__sub_object()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev), UNUSED)

<P><STRONG><a name="[140]"></a>Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
<LI> m10_rccalib.o(.rodata._ZTV9Mode_Base)
<LI> m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
<LI> m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
<LI> m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
<LI> m35_auto1.o(.rodata._ZTV9M35_Auto1)
<LI> m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
</UL>
<P><STRONG><a name="[5fe]"></a>Mode_Base::Mode_Base__sub_object(SName, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, m10_rccalib.o(.text._ZN9Mode_BaseC2E5SNameh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mode_Base::Mode_Base__sub_object(SName, unsigned char) &rArr; ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
</UL>

<P><STRONG><a name="[a8]"></a>RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object() &rArr; operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
</UL>
<P><STRONG><a name="[a7]"></a>RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object() &rArr; operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
<LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
</UL>
<P><STRONG><a name="[498]"></a>Quaternion::get_RP_quat() const</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, sensors.o(.text._ZNK10Quaternion11get_RP_quatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Quaternion::get_RP_quat() const &rArr; Quaternion::operator *(const Quaternion&) const &rArr; Quaternion::Quaternion__sub_object(double, double, double, double) &rArr; Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *(const Quaternion&) const
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::conjugate()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[5b9]"></a>Quaternion::rotate_axis_z() const</STRONG> (Thumb, 242 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._ZNK10Quaternion13rotate_axis_zEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Quaternion::rotate_axis_z() const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[3a3]"></a>Quaternion::get_lean_angle_cosin() const</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, drv_ultrasonic.o(.text._ZNK10Quaternion20get_lean_angle_cosinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::get_lean_angle_cosin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13UltrasonicTCBPvj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[367]"></a>Quaternion::getYaw() const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdstorage.o(.text._ZNK10Quaternion6getYawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Quaternion::getYaw() const &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[4c0]"></a>Quaternion::get_qw() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sdstorage.o(.text._ZNK10Quaternion6get_qwEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::get_qw() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
</UL>

<P><STRONG><a name="[4c1]"></a>Quaternion::get_qx() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sdstorage.o(.text._ZNK10Quaternion6get_qxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::get_qx() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
</UL>

<P><STRONG><a name="[4c2]"></a>Quaternion::get_qy() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sdstorage.o(.text._ZNK10Quaternion6get_qyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::get_qy() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
</UL>

<P><STRONG><a name="[4c3]"></a>Quaternion::get_qz() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sdstorage.o(.text._ZNK10Quaternion6get_qzEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Quaternion::get_qz() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Ef::Quaternion_Ef__sub_object(const Quaternion&)
</UL>

<P><STRONG><a name="[497]"></a>Quaternion::rotate(vector3&lang;double&rang;) const</STRONG> (Thumb, 394 bytes, Stack size 232 bytes, sensors.o(.text._ZNK10Quaternion6rotateE7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Quaternion::rotate(vector3&lang;double&rang;) const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[502]"></a>Quaternion::getRoll() const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdstorage.o(.text._ZNK10Quaternion7getRollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Quaternion::getRoll() const &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
</UL>

<P><STRONG><a name="[503]"></a>Quaternion::getPitch() const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdstorage.o(.text._ZNK10Quaternion8getPitchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Quaternion::getPitch() const &rArr; __hardfp_asin &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
</UL>

<P><STRONG><a name="[36b]"></a>Quaternion::operator *(const Quaternion&) const</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, sensors.o(.text._ZNK10QuaternionmlERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Quaternion::operator *(const Quaternion&) const &rArr; Quaternion::Quaternion__sub_object(double, double, double, double) &rArr; Quaternion::normalize() &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat() const
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[36e]"></a>Quaternion_Ef::get_rotation_matrix(double(*)[3]) const</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._ZNK13Quaternion_Ef19get_rotation_matrixEPA3_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Quaternion_Ef::get_rotation_matrix(double(*)[3]) const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[383]"></a>ESO_AngularRate::get_EsMainPower() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZNK15ESO_AngularRate15get_EsMainPowerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate::get_EsMainPower() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[36f]"></a>ESO_AngularRate::get_EsAngularRate() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZNK15ESO_AngularRate17get_EsAngularRateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate::get_EsAngularRate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[382]"></a>ESO_AngularRate::get_EsDisturbance() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZNK15ESO_AngularRate17get_EsDisturbanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate::get_EsDisturbance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[371]"></a>ESO_AngularRate::get_EsAngularAcceleration() const</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ctrl_attitude.o(.text._ZNK15ESO_AngularRate25get_EsAngularAccelerationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate::get_EsAngularAcceleration() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[329]"></a>TIME::get_pass_time() const</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, timebase.o(.text._ZNK4TIME13get_pass_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIME::get_pass_time() const &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[760]"></a>TIME::get_pass_time_fromStartUp() const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cpu_load.o(.text._ZNK4TIME25get_pass_time_fromStartUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[62f]"></a>SName::operator &lang;(const SName&) const</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, parameters.o(.text._ZNK5SNameltERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>

<P><STRONG><a name="[43e]"></a>SName::operator !=(const SName&) const</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, parameters.o(.text._ZNK5SNameneERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SName::operator !=(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[38e]"></a>vector2&lang;double&rang;::get_square() const</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gui.o(.text._ZNK7vector2IdE10get_squareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector2&lang;double&rang;::get_square() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::constrain(double)
</UL>

<P><STRONG><a name="[392]"></a>vector2&lang;double&rang;::operator /(double) const</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ctrl_attitude.o(.text._ZNK7vector2IdEdvEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vector2&lang;double&rang;::operator /(double) const &rArr; vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[391]"></a>vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gui.o(.text._ZNK7vector2IdEmiERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const &rArr; vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[395]"></a>vector2&lang;double&rang;::operator *(const vector2&lang;double&rang;&) const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ctrl_position.o(.text._ZNK7vector2IdEmlERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector2&lang;double&rang;::operator *(const vector2&lang;double&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[390]"></a>vector2&lang;double&rang;::operator *(double) const</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ctrl_attitude.o(.text._ZNK7vector2IdEmlEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vector2&lang;double&rang;::operator *(double) const &rArr; vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[620]"></a>vector2&lang;double&rang;::operator -() const</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._ZNK7vector2IdEngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vector2&lang;double&rang;::operator -() const &rArr; vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[393]"></a>vector2&lang;double&rang;::operator +(const vector2&lang;double&rang;&) const</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._ZNK7vector2IdEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vector2&lang;double&rang;::operator +(const vector2&lang;double&rang;&) const &rArr; vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[378]"></a>vector3&lang;double&rang;::get_square() const</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, m11_tempcalib.o(.text._ZNK7vector3IdE10get_squareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vector3&lang;double&rang;::get_square() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_reset_XYZAutoSpeed(double)
</UL>

<P><STRONG><a name="[398]"></a>vector3&lang;double&rang;::operator /(double) const</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, ctrl_position.o(.text._ZNK7vector3IdEdvEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vector3&lang;double&rang;::operator /(double) const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[381]"></a>vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, sensors.o(.text._ZNK7vector3IdEmiERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vector3&lang;double&rang;::operator -(const vector3&lang;double&rang;&) const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[396]"></a>vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ctrl_position.o(.text._ZNK7vector3IdEmlERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vector3&lang;double&rang;::operator *(const vector3&lang;double&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[375]"></a>vector3&lang;double&rang;::operator *(double) const</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, sensors.o(.text._ZNK7vector3IdEmlEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vector3&lang;double&rang;::operator *(double) const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[397]"></a>vector3&lang;double&rang;::operator -() const</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, ctrl_position.o(.text._ZNK7vector3IdEngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vector3&lang;double&rang;::operator -() const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[376]"></a>vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._ZNK7vector3IdEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vector3&lang;double&rang;::operator +(const vector3&lang;double&rang;&) const &rArr; vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightDistance(double*, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[609]"></a>vector3&lang;float&rang;::operator *(float) const</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, m12_acccalib.o(.text._ZNK7vector3IfEmlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vector3&lang;float&rang;::operator *(float) const &rArr; vector3&lang;float&rang;::vector3__sub_object(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::vector3__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[60b]"></a>vector3&lang;int&rang;::operator +(const vector3&lang;int&rang;&) const</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m12_acccalib.o(.text._ZNK7vector3IiEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vector3&lang;int&rang;::operator +(const vector3&lang;int&rang;&) const &rArr; vector3&lang;int&rang;::vector3__sub_object(int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[62e]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__root_ptr() const</STRONG> (Thumb, 36 bytes, Stack size 28 bytes, receiver.o(.text._ZNKSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE10__root_ptrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>

<P><STRONG><a name="[635]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__root_ptr() const</STRONG> (Thumb, 36 bytes, Stack size 28 bytes, parameters.o(.text._ZNKSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE10__root_ptrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>

<P><STRONG><a name="[63b]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__root_ptr() const</STRONG> (Thumb, 36 bytes, Stack size 28 bytes, parameters.o(.text._ZNKSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE10__root_ptrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>

<P><STRONG><a name="[642]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__root_ptr() const</STRONG> (Thumb, 36 bytes, Stack size 28 bytes, commulink.o(.text._ZNKSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE10__root_ptrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__find_equal&lang;unsigned short&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>

<P><STRONG><a name="[624]"></a>T1 std::__1::__tree_next&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, commulink.o(.text._ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T1 std::__1::__tree_next&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>

<P><STRONG><a name="[623]"></a>void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)</STRONG> (Thumb, 1036 bytes, Stack size 160 bytes, commulink.o(.text._ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_left_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 std::__1::__tree_next&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::erase(std::__1::__tree_const_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;)
</UL>

<P><STRONG><a name="[627]"></a>std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__117_DeallocateCaller27__do_deallocate_handle_sizeEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_call(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::erase(std::__1::__tree_const_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...)
</UL>

<P><STRONG><a name="[628]"></a>std::__1::_DeallocateCaller::__do_call(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__117_DeallocateCaller9__do_callEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>

<P><STRONG><a name="[625]"></a>void std::__1::__tree_left_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void std::__1::__tree_left_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>

<P><STRONG><a name="[626]"></a>void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>

<P><STRONG><a name="[629]"></a>void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)</STRONG> (Thumb, 412 bytes, Stack size 104 bytes, parameters.o(.text._ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_left_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
</UL>

<P><STRONG><a name="[f6]"></a>std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, receiver.o(.text._ZNSt3__13mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::~__tree__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[f8]"></a>std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__13mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::~__tree__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text.__cxx_global_var_init.1)
</UL>
<P><STRONG><a name="[f5]"></a>std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__13mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::~__tree__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[62d]"></a>std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)</STRONG> (Thumb, 320 bytes, Stack size 168 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&) &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[630]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>

<P><STRONG><a name="[631]"></a>std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)</STRONG> (Thumb, 578 bytes, Stack size 408 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE16__construct_nodeIJNS_4pairIS2_S3_EEEEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS9_ISI_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[632]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*) &rArr; void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[41f]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 380 bytes, Stack size 272 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[3df]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)</STRONG> (Thumb, 286 bytes, Stack size 216 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE4findIS2_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>

<P><STRONG><a name="[633]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::~__tree__sub_object()
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[64e]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)</STRONG> (Thumb, 118 bytes, Stack size 100 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEEC2ERKS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[62a]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::~__tree__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, receiver.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, ReceiverSync, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ReceiverSync&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[634]"></a>std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)</STRONG> (Thumb, 320 bytes, Stack size 168 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&) &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__root_ptr() const
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[636]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>

<P><STRONG><a name="[637]"></a>std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...)</STRONG> (Thumb, 580 bytes, Stack size 408 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE16__construct_nodeIJNS_4pairIS2_S3_EEEEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS9_ISI_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[638]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*) &rArr; void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[441]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 378 bytes, Stack size 272 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>

<P><STRONG><a name="[31d]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)</STRONG> (Thumb, 286 bytes, Stack size 216 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE4findIS2_EENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
</UL>

<P><STRONG><a name="[639]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)</STRONG> (Thumb, 154 bytes, Stack size 120 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::~__tree__sub_object()
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[650]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)</STRONG> (Thumb, 118 bytes, Stack size 100 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEEC2ERKS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[62b]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::~__tree__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, Param, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, Param&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[63a]"></a>std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)</STRONG> (Thumb, 320 bytes, Stack size 168 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISH_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&) &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__root_ptr() const
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[63c]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEERKT_SI_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISG_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)
</UL>

<P><STRONG><a name="[63d]"></a>std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...)</STRONG> (Thumb, 572 bytes, Stack size 408 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJNS_4pairIS2_P18VolatileParamGroupEEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISL_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[63e]"></a>std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...)</STRONG> (Thumb, 572 bytes, Stack size 408 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJNS_4pairIS2_S4_EEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISJ_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[63f]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*) &rArr; void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[4b7]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 380 bytes, Stack size 272 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_P18VolatileParamGroupEEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[440]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 380 bytes, Stack size 272 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S4_EEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, &lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__find_equal&lang;SName&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
</UL>

<P><STRONG><a name="[3de]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&)</STRONG> (Thumb, 286 bytes, Stack size 216 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE4findIS2_EENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator &lang;(const SName&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[640]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::~__tree__sub_object()
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[64d]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)</STRONG> (Thumb, 118 bytes, Stack size 100 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEEC2ERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[62c]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::~__tree__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, parameters.o(.text._ZNSt3__16__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::map&lang;SName, ParamGroup*, std::__1::less&lang;SName&rang;, std::__1::allocator&lang;std::__1::pair&lang;const SName, ParamGroup*&rang;&rang;&rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[641]"></a>std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__find_equal&lang;unsigned short&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)</STRONG> (Thumb, 320 bytes, Stack size 168 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE12__find_equalItEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISF_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__find_equal&lang;unsigned short&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&) &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[645]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__lower_bound&lang;unsigned short&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE13__lower_boundItEENS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEEiEERKT_SG_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISE_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__lower_bound&lang;unsigned short&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::find&lang;unsigned short&rang;(const T1&)
</UL>

<P><STRONG><a name="[643]"></a>std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...)</STRONG> (Thumb, 554 bytes, Stack size 408 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE16__construct_nodeIJNS_4pairItS2_EEEEENS_10unique_ptrINS_11__tree_nodeIS3_PvEENS_22__tree_node_destructorINS8_ISH_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[644]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*) &rArr; void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1) &rArr; void std::__1::__tree_right_rotate&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_balance_after_insert&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)
</UL>

<P><STRONG><a name="[2e6]"></a>std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...)</STRONG> (Thumb, 380 bytes, Stack size 272 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsItJNS_4pairItS2_EEEEENSC_INS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__insert_node_at(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*, std::__1::__tree_node_base&lang;void*&rang;*&, std::__1::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_node_base&lang;void*&rang;*& std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__find_equal&lang;unsigned short&rang;(std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
</UL>

<P><STRONG><a name="[2e5]"></a>std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::find&lang;unsigned short&rang;(const T1&)</STRONG> (Thumb, 290 bytes, Stack size 216 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE4findItEENS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::find&lang;unsigned short&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__lower_bound&lang;unsigned short&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__lower_bound&lang;unsigned short&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
</UL>

<P><STRONG><a name="[2e7]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::erase(std::__1::__tree_const_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;)</STRONG> (Thumb, 356 bytes, Stack size 232 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__tree_const_iteratorIS3_PNS_11__tree_nodeIS3_PvEEiEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::erase(std::__1::__tree_const_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__1::__tree_remove&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
</UL>

<P><STRONG><a name="[646]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::~__tree__sub_object()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[64f]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;&)</STRONG> (Thumb, 118 bytes, Stack size 100 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEEC2ERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[647]"></a>std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::~__tree__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, commulink.o(.text._ZNSt3__16__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor
</UL>

<P><STRONG><a name="[51d]"></a>std::isnormal(double)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, navcmdprocess.o(.text._ZSt8isnormald))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::isnormal(double) &rArr; __ARM_isnormal
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnormal
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[3db]"></a>operator delete[] (void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, basic.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = operator delete[] (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()
</UL>

<P><STRONG><a name="[309]"></a>operator delete (void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, basic.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_call(void*)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13TFMini_ServerPv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21AnoOpticalFlow_ServerPv
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[2ae]"></a>operator new[] (unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, basic.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = operator new[] (unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[2fa]"></a>operator new(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, basic.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = operator new(unsigned) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, VolatileParamGroup*&rang;&rang;&rang;(T1&&...)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, Param&rang;&rang;&rang;(T1&&...)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;SName, ReceiverSync&rang;&rang;&rang;(T1&&...)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17TFMini_DriverInit4Portj
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14GPS_DriverInit4Portj
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC302_DriverInit4Portj
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14RTK_DriverInit4Portj
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_JL32xx_DriverInit4Portj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC306_DriverInit4Portj
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_GL9306_DriverInit4Portj
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25AnoOpticalFlow_DriverInit4Portj
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[490]"></a>__ARM_isinf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensors.o(.text.__ARM_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
</UL>

<P><STRONG><a name="[48f]"></a>__ARM_isnan</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensors.o(.text.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
</UL>

<P><STRONG><a name="[648]"></a>__ARM_isnormal</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, navcmdprocess.o(.text.__ARM_isnormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnormal
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnormal(double)
</UL>

<P><STRONG><a name="[288]"></a>__cxa_guard_acquire</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[28a]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[148]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV9Mode_Base)
</UL>
<P><STRONG><a name="[1f1]"></a>_sys_command_string</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text._sys_command_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_command_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[1ae]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1d7]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[64b]"></a>abort_message</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[410]"></a>cdc_write</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, usb_composite.o(.text.cdc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[14d]"></a>cdcd_control_complete</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_control_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdcd_control_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14c]"></a>cdcd_control_request</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cdcd_control_request &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[149]"></a>cdcd_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cdcd_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14b]"></a>cdcd_open</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, usb_composite.o(.text.cdcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cdcd_open &rArr; _prep_out_transaction &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14a]"></a>cdcd_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_composite.o(.text.cdcd_reset))
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14e]"></a>cdcd_xfer_cb</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_composite.o(.text.cdcd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cdcd_xfer_cb &rArr; cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[75a]"></a>dcd_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_composite.o(.text.dcd_connect))
<BR><BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[655]"></a>dcd_edpt_open</STRONG> (Thumb, 552 bytes, Stack size 20 bytes, usb_composite.o(.text.dcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[723]"></a>dcd_edpt_stall</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, usb_composite.o(.text.dcd_edpt_stall))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
</UL>

<P><STRONG><a name="[654]"></a>dcd_edpt_xfer</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, usb_composite.o(.text.dcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_control_request
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[66b]"></a>dcd_event_handler</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, usb_composite.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
</UL>

<P><STRONG><a name="[71d]"></a>disk_initialize</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[71e]"></a>disk_ioctl</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[69c]"></a>disk_read</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[71c]"></a>disk_status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, diskio.o(.text.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[674]"></a>disk_write</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[5f8]"></a>f_chmod</STRONG> (Thumb, 276 bytes, Stack size 136 bytes, ff.o(.text.f_chmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = f_chmod &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[468]"></a>f_close</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[45f]"></a>f_closedir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_closedir &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[45e]"></a>f_findfirst</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ff.o(.text.f_findfirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = f_findfirst &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[68a]"></a>f_findnext</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(.text.f_findnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_findnext &rArr; f_readdir &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[5f9]"></a>f_mkdir</STRONG> (Thumb, 546 bytes, Stack size 208 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[456]"></a>f_mount</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_mount &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[460]"></a>f_open</STRONG> (Thumb, 1260 bytes, Stack size 208 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[45d]"></a>f_opendir</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[464]"></a>f_read</STRONG> (Thumb, 864 bytes, Stack size 136 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[68b]"></a>f_readdir</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_readdir &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>

<P><STRONG><a name="[45c]"></a>f_stat</STRONG> (Thumb, 164 bytes, Stack size 120 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[462]"></a>f_sync</STRONG> (Thumb, 542 bytes, Stack size 144 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[461]"></a>f_unlink</STRONG> (Thumb, 418 bytes, Stack size 264 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[5fa]"></a>f_write</STRONG> (Thumb, 1002 bytes, Stack size 136 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
</UL>

<P><STRONG><a name="[694]"></a>ff_cre_syncobj</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ffsystem.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ff_cre_syncobj &rArr; osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[693]"></a>ff_del_syncobj</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ffsystem.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ff_del_syncobj &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[673]"></a>ff_memalloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ffsystem.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[675]"></a>ff_memfree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ffsystem.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ff_memfree &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[6aa]"></a>ff_oem2uni</STRONG> (Thumb, 196 bytes, Stack size 28 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[6a0]"></a>ff_rel_grant</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ffsystem.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[6a2]"></a>ff_req_grant</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ffsystem.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[667]"></a>ff_uni2oem</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[65d]"></a>ff_wtoupper</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[551]"></a>getCPULoad</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_load.o(.text.getCPULoad))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
</UL>

<P><STRONG><a name="[219]"></a>getFlashPageSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashPageSize))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[474]"></a>getFlashSectorCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorCount))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[218]"></a>getFlashSectorSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorSize))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[68d]"></a>get_fattime</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fatfs.o(.text.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_fattime &rArr; Get_RTC_Time &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[6e3]"></a>lfs_crc</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, lfs_util.o(.text.lfs_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[4a5]"></a>lfs_file_close</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lfs.o(.text.lfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = lfs_file_close &rArr; lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
</UL>

<P><STRONG><a name="[4a1]"></a>lfs_file_open</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lfs.o(.text.lfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604 + Unknown Stack Size
<LI>Call Chain = lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
</UL>

<P><STRONG><a name="[4a4]"></a>lfs_file_read</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lfs.o(.text.lfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = lfs_file_read &rArr; lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
</UL>

<P><STRONG><a name="[4a3]"></a>lfs_file_seek</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lfs.o(.text.lfs_file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = lfs_file_seek &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
</UL>

<P><STRONG><a name="[4a2]"></a>lfs_file_size</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lfs.o(.text.lfs_file_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = lfs_file_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
</UL>

<P><STRONG><a name="[4bc]"></a>lfs_file_truncate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lfs.o(.text.lfs_file_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = lfs_file_truncate &rArr; lfs_file_rawtruncate &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
</UL>

<P><STRONG><a name="[4a6]"></a>lfs_file_write</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lfs.o(.text.lfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = lfs_file_write &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_isopen
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
</UL>

<P><STRONG><a name="[476]"></a>lfs_format</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lfs.o(.text.lfs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356 + Unknown Stack Size
<LI>Call Chain = lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[479]"></a>lfs_mkdir</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lfs.o(.text.lfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[475]"></a>lfs_mount</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lfs.o(.text.lfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = lfs_mount &rArr; lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[478]"></a>lfs_stat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lfs.o(.text.lfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = lfs_stat &rArr; lfs_rawstat &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawstat
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[1a9]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; _ZL18SystemClock_Configv &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[55c]"></a>mavlink_init_chan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mavlink.o(.text.mavlink_init_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mavlink_init_chan &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17CommuPortRegisterh
</UL>

<P><STRONG><a name="[400]"></a>mavlink_lock_chan</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, mavlink.o(.text.mavlink_lock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mavlink_lock_chan &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[407]"></a>mavlink_unlock_chan</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlink.o(.text.mavlink_unlock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mavlink_unlock_chan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[153]"></a>mscd_control_complete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_composite.o(.text.mscd_control_complete))
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[152]"></a>mscd_control_request</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usb_composite.o(.text.mscd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mscd_control_request &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14f]"></a>mscd_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_composite.o(.text.mscd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mscd_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[151]"></a>mscd_open</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, usb_composite.o(.text.mscd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mscd_open &rArr; dcd_edpt_open
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[150]"></a>mscd_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_composite.o(.text.mscd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mscd_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[154]"></a>mscd_xfer_cb</STRONG> (Thumb, 1180 bytes, Stack size 56 bytes, usb_composite.o(.text.mscd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mscd_xfer_cb &rArr; proc_builtin_scsi &rArr; tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[27f]"></a>osKernelRunning</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmsis_os.o(.text.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osKernelRunning &rArr; xTaskGetSchedulerState
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[282]"></a>osKernelSysTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cmsis_os.o(.text.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[280]"></a>osMessageCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cmsis_os.o(.text.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[281]"></a>osMessageGet</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, cmsis_os.o(.text.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1fe]"></a>osMessagePut</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, cmsis_os.o(.text.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>

<P><STRONG><a name="[69e]"></a>osMutexCreate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[69f]"></a>osMutexDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[6a1]"></a>osMutexRelease</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, cmsis_os.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[6a3]"></a>osMutexWait</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cmsis_os.o(.text.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[335]"></a>os_delay</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(.text.os_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtLed_ServerPv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18OpticalFlow_ServerPv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[722]"></a>proc_builtin_scsi</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, usb_composite.o(.text.proc_builtin_scsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = proc_builtin_scsi &rArr; tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_test_unit_ready_cb
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_start_stop_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[64a]"></a>pvPortMalloc</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[774]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[742]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[656]"></a>tud_cdc_rx_cb</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, drv_usb.o(.text.tud_cdc_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tud_cdc_rx_cb &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[759]"></a>tud_init</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, usb_composite.o(.text.tud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tud_init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_connect
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
</UL>

<P><STRONG><a name="[72d]"></a>tud_msc_is_writable_cb</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, drv_usb.o(.text.tud_msc_is_writable_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tud_msc_is_writable_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
</UL>

<P><STRONG><a name="[72e]"></a>tud_msc_start_stop_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_composite.o(.text.tud_msc_start_stop_cb))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[72c]"></a>tud_msc_test_unit_ready_cb</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usb_composite.o(.text.tud_msc_test_unit_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tud_msc_test_unit_ready_cb &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD_Init_Complete
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Complete
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[75b]"></a>tud_suspend_cb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_usb.o(.text.tud_suspend_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tud_suspend_cb &rArr; usbd_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
</UL>

<P><STRONG><a name="[548]"></a>tud_task</STRONG> (Thumb, 4048 bytes, Stack size 80 bytes, usb_composite.o(.text.tud_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tud_task &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspend_cb
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15usb_device_taskPv
</UL>

<P><STRONG><a name="[547]"></a>tusb_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_composite.o(.text.tusb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tusb_init &rArr; tud_init &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15usb_device_taskPv
</UL>

<P><STRONG><a name="[260]"></a>usb_handler</STRONG> (Thumb, 2106 bytes, Stack size 72 bytes, usb_composite.o(.text.usb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = usb_handler &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[75d]"></a>usbd_control_xfer_cb</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, usb_composite.o(.text.usbd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_control_xfer_cb &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
</UL>

<P><STRONG><a name="[652]"></a>usbd_edpt_xfer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_composite.o(.text.usbd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_edpt_xfer &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>

<P><STRONG><a name="[75c]"></a>usbd_reset</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usb_composite.o(.text.usbd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspend_cb
</UL>

<P><STRONG><a name="[730]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[76d]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[769]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, static_mem.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[77b]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, static_mem.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[75e]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[75f]"></a>vApplicationTickHook</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cpu_load.o(.text.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[9e]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 5]<UL><LI> gui.o(.text.DMA2D_IRQHandler)
<LI> drv_flash.o(.text.QUADSPI_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_EV_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_ER_IRQHandler)
<LI> drv_oled.o(.text.SPI4_IRQHandler)
</UL>
<P><STRONG><a name="[736]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[741]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[732]"></a>vListInsert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[731]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[41e]"></a>vPortEnterCritical</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[420]"></a>vPortExitCritical</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
</UL>

<P><STRONG><a name="[649]"></a>vPortFree</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_free
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[76e]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[773]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[737]"></a>vQueueAddToRegistry</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[72a]"></a>vQueueDelete</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[761]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, queue.o(.text.vQueueUnregisterQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[74d]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[251]"></a>vTaskDelay</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13ExtMag_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
</UL>

<P><STRONG><a name="[4ff]"></a>vTaskDelayUntil</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[40e]"></a>vTaskDelete</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[771]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[754]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[764]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[762]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[765]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[766]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[767]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskRemoveFromUnorderedEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[768]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[71b]"></a>vTaskStartScheduler</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74b]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[261]"></a>vTaskSwitchContext</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vTaskSwitchContext &rArr; ExitIdleTask &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[213]"></a>xEventGroupClearBits</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8FlashCMDhd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23FlashCMDRead_QuadOutputPhthjhd
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12FlashCMDReadPhthjhd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>

<P><STRONG><a name="[3e4]"></a>xEventGroupCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[3f0]"></a>xEventGroupSetBits</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[214]"></a>xEventGroupWaitBits</STRONG> (Thumb, 486 bytes, Stack size 72 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9ImageFillPv9ImgFormattjtt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21ImageFormatConversionPv9ImgFormattS_ttS0_tsb
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12ImageOverlayPv9ImgFormattS_S_ttS0_tS0_tsbs
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart1(double)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart5(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned, double, double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart3(double)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart7(double)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart8(double)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8FlashCMDhd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23FlashCMDRead_QuadOutputPhthjhd
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12FlashCMDReadPhthjhd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjb
</UL>

<P><STRONG><a name="[76b]"></a>xPortStartScheduler</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; ExitIdleTask &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2ac]"></a>xQueueCreateMutex</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
</UL>

<P><STRONG><a name="[729]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[2f4]"></a>xQueueGenericCreate</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[727]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[50b]"></a>xQueueGenericReset</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
</UL>

<P><STRONG><a name="[21e]"></a>xQueueGenericSend</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14UnLock_Txt1Logv
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12UnLock_SDLogv
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15UnLock_Missionsv
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularAcc_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[66c]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>

<P><STRONG><a name="[72b]"></a>xQueueGiveFromISR</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[29d]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_USBD_VCOM()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart1()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart5()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned, double, double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart3()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart7()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(const unsigned char*, unsigned short, double, double)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart8()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ExtIIC()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_Oled()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
</UL>

<P><STRONG><a name="[3dd]"></a>xQueueReceive</STRONG> (Thumb, 522 bytes, Stack size 72 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LPDaemonTaskPv
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
</UL>

<P><STRONG><a name="[728]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[21d]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(const char*, const char*, unsigned, double)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(const char*, const char*, unsigned*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Lock_Txt1Logd
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Lock_SDLogd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersIterator()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Lock_Missionsd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularAcc_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[25f]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_USBD_VCOM(double)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart1(double)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart5(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned, double, double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart3(double)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart7(double)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart8(double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_ExtIIC(double)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Oled(double)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>

<P><STRONG><a name="[653]"></a>xStreamBufferBytesAvailable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stream_buffer.o(.text.xStreamBufferBytesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xStreamBufferBytesAvailable &rArr; prvBytesInBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
</UL>

<P><STRONG><a name="[349]"></a>xStreamBufferGenericCreate</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, stream_buffer.o(.text.xStreamBufferGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[64c]"></a>xStreamBufferGenericCreateStatic</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, stream_buffer.o(.text.xStreamBufferGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = xStreamBufferGenericCreateStatic &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2df]"></a>xStreamBufferReceive</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, stream_buffer.o(.text.xStreamBufferReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(const unsigned char*, unsigned short, double, double)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
</UL>

<P><STRONG><a name="[359]"></a>xStreamBufferReset</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stream_buffer.o(.text.xStreamBufferReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = xStreamBufferReset &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
</UL>

<P><STRONG><a name="[2e2]"></a>xStreamBufferSend</STRONG> (Thumb, 414 bytes, Stack size 80 bytes, stream_buffer.o(.text.xStreamBufferSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(const unsigned char*, unsigned short, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(const unsigned char*, unsigned short, double, double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(const unsigned char*, unsigned short, double, double)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
</UL>

<P><STRONG><a name="[296]"></a>xStreamBufferSendFromISR</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, stream_buffer.o(.text.xStreamBufferSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xStreamBufferSendFromISR &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>

<P><STRONG><a name="[779]"></a>xStreamBufferSpacesAvailable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stream_buffer.o(.text.xStreamBufferSpacesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xStreamBufferSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[772]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[2f5]"></a>xTaskCreate</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_InternalMag()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtSPL06()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtLed()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17TFMini_DriverInit4Portj
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14GPS_DriverInit4Portj
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC302_DriverInit4Portj
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14RTK_DriverInit4Portj
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_JL32xx_DriverInit4Portj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28OpticalFlow_LC306_DriverInit4Portj
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29OpticalFlow_GL9306_DriverInit4Portj
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25AnoOpticalFlow_DriverInit4Portj
</UL>

<P><STRONG><a name="[34c]"></a>xTaskCreateStatic</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[48d]"></a>xTaskGenericNotify</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
</UL>

<P><STRONG><a name="[77a]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, tasks.o(.text.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[350]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode_disarm()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode_arm()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
</UL>

<P><STRONG><a name="[724]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[46d]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SDS_TaskPv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18InternalMag_ServerPv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18ControlSystem_TaskPv
</UL>

<P><STRONG><a name="[726]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[287]"></a>xTaskIncrementTick</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[778]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(.text.xTaskNotifyStateClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskNotifyStateClear &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>

<P><STRONG><a name="[336]"></a>xTaskNotifyWait</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, tasks.o(.text.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[73c]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[775]"></a>xTaskPriorityInherit</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityInherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[753]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[74c]"></a>xTaskResumeAll</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[46c]"></a>xTimerCreate</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
</UL>

<P><STRONG><a name="[76a]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[46e]"></a>xTimerGenericCommand</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23UltrasonicTimerCallbackPv
</UL>

<P><STRONG><a name="[202]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[77c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[77e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[77f]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1de]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1df]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[780]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1e1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[78a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[5fc]"></a>__hardfp_acos</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_Rotation_vec()
</UL>

<P><STRONG><a name="[30c]"></a>__hardfp_asin</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getPitch() const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[787]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[30b]"></a>__hardfp_atan2</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getRoll() const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[51a]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[434]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq(double*, double, double, double)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::set_cutoff_frequency(double, double, double)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>

<P><STRONG><a name="[4ed]"></a>__hardfp_exp</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan_sig_0(double)
</UL>

<P><STRONG><a name="[513]"></a>__hardfp_nan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nan.o(i.__hardfp_nan))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[438]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[30a]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::constrain(double)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[4d8]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
</UL>

<P><STRONG><a name="[305]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq(double*, double, double, double)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_BS::set_cutoff_frequency(double, double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[78d]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[78f]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[783]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[78e]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[793]"></a>__kernel_tan</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_tan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[791]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[781]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[788]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[782]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[790]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[785]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[78c]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[78b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1d1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[789]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[786]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[784]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[19e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[99]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[794]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[30d]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18MS_AttitudeHeadingdPP9PosAccInf
</UL>

<P><STRONG><a name="[7e3]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[797]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
</UL>

<P><STRONG><a name="[197]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[7e4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[7e5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[403]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[796]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[179]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[17d]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[795]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[792]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[798]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a9]"></a>_ZL12LPDaemonTaskPv</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, basic.o(.text._ZL12LPDaemonTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _ZL12LPDaemonTaskPv &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text._Z10init_Basicv)
</UL>
<P><STRONG><a name="[2ef]"></a>_ZL16SCB_EnableDCachev</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, basic.o(.text._ZL16SCB_EnableDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL16SCB_EnableDCachev
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2ee]"></a>_ZL16SCB_EnableICachev</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, basic.o(.text._ZL16SCB_EnableICachev))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[3b2]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, timebase.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[3af]"></a>_ZL18SystemClock_Configv</STRONG> (Thumb, 1020 bytes, Stack size 360 bytes, timebase.o(.text._ZL18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = _ZL18SystemClock_Configv &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[3b1]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timebase.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[155]"></a>_GLOBAL__sub_I_SDStorage.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_SDStorage.cpp &rArr; __cxx_global_var_init.3 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.init_array)
</UL>
<P><STRONG><a name="[450]"></a>_ZL10Lock_SDLogd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sdstorage.o(.text._ZL10Lock_SDLogd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
</UL>

<P><STRONG><a name="[2e1]"></a>_ZL12Lock_Txt1Logd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sdstorage.o(.text._ZL12Lock_Txt1Logd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _ZL12Lock_Txt1Logd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
</UL>

<P><STRONG><a name="[451]"></a>_ZL12UnLock_SDLogv</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdstorage.o(.text._ZL12UnLock_SDLogv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL12UnLock_SDLogv &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
</UL>

<P><STRONG><a name="[2e3]"></a>_ZL14UnLock_Txt1Logv</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdstorage.o(.text._ZL14UnLock_Txt1Logv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL14UnLock_Txt1Logv &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
</UL>

<P><STRONG><a name="[b8]"></a>_ZL8SDS_TaskPv</STRONG> (Thumb, 1620 bytes, Stack size 1216 bytes, sdstorage.o(.text._ZL8SDS_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = _ZL8SDS_TaskPv &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD_Init_Complete
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Complete
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_SD_Init_Complete
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.text._Z14init_SDStoragev)
</UL>
<P><STRONG><a name="[2b9]"></a>__cxx_global_var_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdstorage.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init &rArr; xStreamBufferGenericCreateStatic &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[2ba]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdstorage.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.1 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[2bb]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdstorage.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.2 &rArr; xStreamBufferGenericCreateStatic &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[2bc]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdstorage.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.3 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[156]"></a>_GLOBAL__sub_I_Parameters.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, parameters.o(.text._GLOBAL__sub_I_Parameters.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_Parameters.cpp &rArr; __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.init_array)
</UL>
<P><STRONG><a name="[2b2]"></a>__cxx_global_var_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, parameters.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __cxx_global_var_init &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
</UL>

<P><STRONG><a name="[2b3]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, parameters.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __cxx_global_var_init.1 &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
</UL>

<P><STRONG><a name="[2b4]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, parameters.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
</UL>

<P><STRONG><a name="[2b5]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, parameters.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.3
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
</UL>

<P><STRONG><a name="[157]"></a>_GLOBAL__sub_I_GUI.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui.o(.text._GLOBAL__sub_I_GUI.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_GUI.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.init_array)
</UL>
<P><STRONG><a name="[ec]"></a>_ZL10GUI_ServerPv</STRONG> (Thumb, 2192 bytes, Stack size 1464 bytes, gui.o(.text._ZL10GUI_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2656 + Unknown Stack Size
<LI>Call Chain = _ZL10GUI_ServerPv &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getPitch() const
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getRoll() const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::operator -(const vector2&lang;double&rang;&) const
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::get_square() const
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_Z(PosSensorHealthInf1*, double)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9ImageFillPv9ImgFormattjtt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21ImageFormatConversionPv9ImgFormattS_ttS0_tsb
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13DrawFont32x16PKcttt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13DrawFont24x12PKcttt
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12ImageOverlayPv9ImgFormattS_S_ttS0_tS0_tsbs
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12DrawFont16x8PKcttt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.text._Z8init_GUIv)
</UL>
<P><STRONG><a name="[501]"></a>_ZL12DrawFont16x8PKcttt</STRONG> (Thumb, 288 bytes, Stack size 28 bytes, gui.o(.text._ZL12DrawFont16x8PKcttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL12DrawFont16x8PKcttt
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[4fe]"></a>_ZL12ImageOverlayPv9ImgFormattS_S_ttS0_tS0_tsbs</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, gui.o(.text._ZL12ImageOverlayPv9ImgFormattS_S_ttS0_tS0_tsbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _ZL12ImageOverlayPv9ImgFormattS_S_ttS0_tS0_tsbs &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[4fd]"></a>_ZL13DrawFont24x12PKcttt</STRONG> (Thumb, 294 bytes, Stack size 28 bytes, gui.o(.text._ZL13DrawFont24x12PKcttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL13DrawFont24x12PKcttt
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[4fc]"></a>_ZL13DrawFont32x16PKcttt</STRONG> (Thumb, 290 bytes, Stack size 28 bytes, gui.o(.text._ZL13DrawFont32x16PKcttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL13DrawFont32x16PKcttt
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[4ea]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gui.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
</UL>

<P><STRONG><a name="[4e9]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gui.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GUI()
</UL>

<P><STRONG><a name="[4fb]"></a>_ZL21ImageFormatConversionPv9ImgFormattS_ttS0_tsb</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, gui.o(.text._ZL21ImageFormatConversionPv9ImgFormattS_ttS0_tsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _ZL21ImageFormatConversionPv9ImgFormattS_ttS0_tsb &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[500]"></a>_ZL9ImageFillPv9ImgFormattjtt</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, gui.o(.text._ZL9ImageFillPv9ImgFormattjtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _ZL9ImageFillPv9ImgFormattjtt &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GUI_ServerPv
</UL>

<P><STRONG><a name="[2ab]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_GUI.cpp
</UL>

<P><STRONG><a name="[158]"></a>_GLOBAL__sub_I_Missions.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, missions.o(.text._GLOBAL__sub_I_Missions.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_Missions.cpp &rArr; __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> missions.o(.init_array)
</UL>
<P><STRONG><a name="[2ea]"></a>_ZL13Lock_Missionsd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, missions.o(.text._ZL13Lock_Missionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _ZL13Lock_Missionsd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
</UL>

<P><STRONG><a name="[2ec]"></a>_ZL15UnLock_Missionsv</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, missions.o(.text._ZL15UnLock_Missionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL15UnLock_Missionsv &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
</UL>

<P><STRONG><a name="[2b0]"></a>__cxx_global_var_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, missions.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Missions.cpp
</UL>

<P><STRONG><a name="[230]"></a>NVIC_EncodePriority</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[22c]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[22e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[22f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[231]"></a>__NVIC_SetPriority</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[233]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[236]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RCCEx_PLL2_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[237]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RCCEx_PLL3_Config &rArr; HAL_GetTick &rArr; TIME::get_System_Run_Time() &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[222]"></a>FLASH_MassErase</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32h7xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[269]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[264]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[26e]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[266]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[273]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[26b]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[279]"></a>SD_FindSCR</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, stm32h7xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[254]"></a>SD_InitCard</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, stm32h7xx_hal_sd.o(.text.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[23f]"></a>SD_PowerOFF</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(.text.SD_PowerOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_PowerOFF &rArr; SDMMC_PowerState_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[253]"></a>SD_PowerON</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(.text.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_PowerON &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[245]"></a>SD_Read_IT</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_Read_IT &rArr; SDMMC_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>SD_SendSDStatus</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, stm32h7xx_hal_sd.o(.text.SD_SendSDStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
</UL>

<P><STRONG><a name="[241]"></a>SD_SendStatus</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(.text.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[23c]"></a>SD_WideBus_Disable</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(.text.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[23b]"></a>SD_WideBus_Enable</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(.text.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[24a]"></a>SD_Write_IT</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_Write_IT &rArr; SDMMC_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[76c]"></a>prvTestWaitCondition</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, event_groups.o(.text.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[73a]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[73b]"></a>prvCopyDataToQueue</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[776]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[73d]"></a>prvInitialiseMutex</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[73e]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[745]"></a>prvIsQueueEmpty</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[746]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[752]"></a>prvUnlockQueue</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[777]"></a>prvBytesInBuffer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stream_buffer.o(.text.prvBytesInBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
</UL>

<P><STRONG><a name="[73f]"></a>prvInitialiseNewStreamBuffer</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, stream_buffer.o(.text.prvInitialiseNewStreamBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>

<P><STRONG><a name="[74e]"></a>prvReadBytesFromBuffer</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, stream_buffer.o(.text.prvReadBytesFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
</UL>

<P><STRONG><a name="[74f]"></a>prvReadMessageFromBuffer</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stream_buffer.o(.text.prvReadMessageFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvReadMessageFromBuffer &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>

<P><STRONG><a name="[755]"></a>prvWriteBytesToBuffer</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, stream_buffer.o(.text.prvWriteBytesToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
</UL>

<P><STRONG><a name="[756]"></a>prvWriteMessageToBuffer</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, stream_buffer.o(.text.prvWriteMessageToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvWriteMessageToBuffer &rArr; prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[72f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[733]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[738]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[739]"></a>prvDeleteTCB</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[102]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[740]"></a>prvInitialiseNewTask</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[734]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[763]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[735]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[751]"></a>prvGetNextExpireTime</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[743]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, timers.o(.text.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[744]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[747]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[748]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 388 bytes, Stack size 80 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[74a]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[749]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[750]"></a>prvSwitchTimerLists</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[103]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[757]"></a>prvHeapInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[758]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[770]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[101]"></a>prvTaskExitError</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[76f]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[725]"></a>inHandlerMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cmsis_os.o(.text.inHandlerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[159]"></a>_GLOBAL__sub_I_cpu_load.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_load.o(.text._GLOBAL__sub_I_cpu_load.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _GLOBAL__sub_I_cpu_load.cpp &rArr; __cxx_global_var_init.1 &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu_load.o(.init_array)
</UL>
<P><STRONG><a name="[2c0]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpu_load.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpu_load.cpp
</UL>

<P><STRONG><a name="[2c1]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpu_load.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.1 &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_cpu_load.cpp
</UL>

<P><STRONG><a name="[15a]"></a>_GLOBAL__sub_I_Sensors.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensors.o(.text._GLOBAL__sub_I_Sensors.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_Sensors.cpp &rArr; __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.init_array)
</UL>
<P><STRONG><a name="[4d4]"></a>_ZL19map_projection_initP14Map_Projectiondd</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, sensors.o(.text._ZL19map_projection_initP14Map_Projectiondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ZL19map_projection_initP14Map_Projectiondd &rArr; degree2rad(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[4d5]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, sensors.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
</UL>

<P><STRONG><a name="[2bd]"></a>__cxx_global_var_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensors.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Sensors.cpp
</UL>

<P><STRONG><a name="[2be]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensors.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.1 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Sensors.cpp
</UL>

<P><STRONG><a name="[2bf]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensors.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Sensors.cpp
</UL>

<P><STRONG><a name="[15b]"></a>_GLOBAL__sub_I_Receiver.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, receiver.o(.text._GLOBAL__sub_I_Receiver.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_Receiver.cpp &rArr; __cxx_global_var_init.1 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.init_array)
</UL>
<P><STRONG><a name="[2b6]"></a>__cxx_global_var_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, receiver.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __cxx_global_var_init &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ReceiverSync&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
</UL>

<P><STRONG><a name="[2b7]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, receiver.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.1 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
</UL>

<P><STRONG><a name="[2b8]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, receiver.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.2
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
</UL>

<P><STRONG><a name="[15c]"></a>_GLOBAL__sub_I_drv_Sensors.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_sensors.o(.text._GLOBAL__sub_I_drv_Sensors.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_drv_Sensors.cpp &rArr; __cxx_global_var_init &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.init_array)
</UL>
<P><STRONG><a name="[28e]"></a>_ZL10set_TC_Outd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_sensors.o(.text._ZL10set_TC_Outd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ZL10set_TC_Outd &rArr; T1 constrain&lang;double&rang;(T1, T1, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[42a]"></a>_ZL11AK8975_initv</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, drv_sensors.o(.text._ZL11AK8975_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2676 + Unknown Stack Size
<LI>Call Chain = _ZL11AK8975_initv &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20SPI1_TransmitReceivePKhPht
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SPI1_TransmitPKht
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[9a]"></a>_ZL13BMI088GyroTCBPvj</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, drv_sensors.o(.text._ZL13BMI088GyroTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = _ZL13BMI088GyroTCBPvj &rArr; IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::set_vector(int, int, int)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[425]"></a>_ZL13SPI1_TransmitPKht</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_sensors.o(.text._ZL13SPI1_TransmitPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ZL13SPI1_TransmitPKht &rArr; _ZL19SPI1_Transmit_StartPKht &rArr; _ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19SPI1_Transmit_StartPKht
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
</UL>

<P><STRONG><a name="[9b]"></a>_ZL14BMI088AccelTCBPvj</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, drv_sensors.o(.text._ZL14BMI088AccelTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = _ZL14BMI088AccelTCBPvj &rArr; IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::set_vector(int, int, int)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[42e]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_sensors.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[519]"></a>_ZL17__NVIC_DisableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, drv_sensors.o(.text._ZL17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL17__NVIC_DisableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9AK8975TCBPvj
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8SPL06TCBPvj
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14BMI088AccelTCBPvj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13BMI088GyroTCBPvj
</UL>

<P><STRONG><a name="[423]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_sensors.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[203]"></a>_ZL19SPI1_Transmit_StartPKht</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, drv_sensors.o(.text._ZL19SPI1_Transmit_StartPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ZL19SPI1_Transmit_StartPKht &rArr; _ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SPI1_TransmitPKht
</UL>

<P><STRONG><a name="[424]"></a>_ZL20SPI1_TransmitReceivePKhPht</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, drv_sensors.o(.text._ZL20SPI1_TransmitReceivePKhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _ZL20SPI1_TransmitReceivePKhPht &rArr; _ZL26SPI1_TransmitReceive_StartPKhPht &rArr; _ZL28SCB_InvalidateDCache_by_AddrPji
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11AK8975_initv
</UL>

<P><STRONG><a name="[42b]"></a>_ZL22spl06_pressure_ratesethh</STRONG> (Thumb, 776 bytes, Stack size 64 bytes, drv_sensors.o(.text._ZL22spl06_pressure_ratesethh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _ZL22spl06_pressure_ratesethh &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20SPI1_TransmitReceivePKhPht
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SPI1_TransmitPKht
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[576]"></a>_ZL23SCB_CleanDCache_by_AddrPji</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, drv_sensors.o(.text._ZL23SCB_CleanDCache_by_AddrPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19SPI1_Transmit_StartPKht
</UL>

<P><STRONG><a name="[42c]"></a>_ZL25spl06_temperature_ratesethh</STRONG> (Thumb, 768 bytes, Stack size 64 bytes, drv_sensors.o(.text._ZL25spl06_temperature_ratesethh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _ZL25spl06_temperature_ratesethh &rArr; os_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20SPI1_TransmitReceivePKhPht
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SPI1_TransmitPKht
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[204]"></a>_ZL26SPI1_TransmitReceive_StartPKhPht</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, drv_sensors.o(.text._ZL26SPI1_TransmitReceive_StartPKhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ZL26SPI1_TransmitReceive_StartPKhPht &rArr; _ZL28SCB_InvalidateDCache_by_AddrPji
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28SCB_InvalidateDCache_by_AddrPji
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20SPI1_TransmitReceivePKhPht
</UL>

<P><STRONG><a name="[5cc]"></a>_ZL28SCB_InvalidateDCache_by_AddrPji</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, drv_sensors.o(.text._ZL28SCB_InvalidateDCache_by_AddrPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL28SCB_InvalidateDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26SPI1_TransmitReceive_StartPKhPht
</UL>

<P><STRONG><a name="[9d]"></a>_ZL8SPL06TCBPvj</STRONG> (Thumb, 712 bytes, Stack size 176 bytes, drv_sensors.o(.text._ZL8SPL06TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = _ZL8SPL06TCBPvj &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_y()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_x()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[9c]"></a>_ZL9AK8975TCBPvj</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, drv_sensors.o(.text._ZL9AK8975TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _ZL9AK8975TCBPvj &rArr; IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::set_vector(int, int, int)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17__NVIC_DisableIRQ9IRQn_Type
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[2d9]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_sensors.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Sensors.cpp
</UL>

<P><STRONG><a name="[b6]"></a>_ZL15usb_device_taskPv</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_usb.o(.text._ZL15usb_device_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _ZL15usb_device_taskPv &rArr; tud_task &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[15d]"></a>_GLOBAL__sub_I_drv_Uart1.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_drv_Uart1.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.init_array)
</UL>
<P><STRONG><a name="[3ed]"></a>_ZL11setBaudRatej</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, drv_uart1.o(.text._ZL11setBaudRatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned, double, double)
</UL>

<P><STRONG><a name="[3ef]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_uart1.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
</UL>

<P><STRONG><a name="[3ee]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_uart1.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
</UL>

<P><STRONG><a name="[a4]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart1.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text.USART1_IRQHandler)
</UL>
<P><STRONG><a name="[320]"></a>_ZL9StartSendPKht</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, drv_uart1.o(.text._ZL9StartSendPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL9StartSendPKht &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[2da]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart1.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart1.cpp
</UL>

<P><STRONG><a name="[15e]"></a>_GLOBAL__sub_I_drv_Uart3.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_drv_Uart3.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.init_array)
</UL>
<P><STRONG><a name="[3f1]"></a>_ZL11setBaudRatej</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, drv_uart3.o(.text._ZL11setBaudRatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned, double, double)
</UL>

<P><STRONG><a name="[3f3]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_uart3.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
</UL>

<P><STRONG><a name="[3f2]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_uart3.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
</UL>

<P><STRONG><a name="[a6]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart3.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text.USART3_IRQHandler)
</UL>
<P><STRONG><a name="[321]"></a>_ZL9StartSendPKht</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, drv_uart3.o(.text._ZL9StartSendPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL9StartSendPKht &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[2db]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart3.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart3.cpp
</UL>

<P><STRONG><a name="[15f]"></a>_GLOBAL__sub_I_drv_Uart5.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_drv_Uart5.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.init_array)
</UL>
<P><STRONG><a name="[3f4]"></a>_ZL11setBaudRatej</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, drv_uart5.o(.text._ZL11setBaudRatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned, double, double)
</UL>

<P><STRONG><a name="[3f6]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_uart5.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
</UL>

<P><STRONG><a name="[3f5]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_uart5.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
</UL>

<P><STRONG><a name="[a1]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart5.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text.UART5_IRQHandler)
</UL>
<P><STRONG><a name="[322]"></a>_ZL9StartSendPKht</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_uart5.o(.text._ZL9StartSendPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL9StartSendPKht &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[2dc]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart5.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart5.cpp
</UL>

<P><STRONG><a name="[160]"></a>_GLOBAL__sub_I_drv_Uart7.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_drv_Uart7.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.init_array)
</UL>
<P><STRONG><a name="[3f7]"></a>_ZL11setBaudRatej</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, drv_uart7.o(.text._ZL11setBaudRatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned, double, double)
</UL>

<P><STRONG><a name="[3f9]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_uart7.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
</UL>

<P><STRONG><a name="[3f8]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_uart7.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
</UL>

<P><STRONG><a name="[a2]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart7.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text.UART7_IRQHandler)
</UL>
<P><STRONG><a name="[323]"></a>_ZL9StartSendPKht</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_uart7.o(.text._ZL9StartSendPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL9StartSendPKht &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(const unsigned char*, unsigned short, double, double)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
</UL>

<P><STRONG><a name="[2dd]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart7.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart7.cpp
</UL>

<P><STRONG><a name="[161]"></a>_GLOBAL__sub_I_drv_Uart8.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GLOBAL__sub_I_drv_Uart8.cpp &rArr; __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.init_array)
</UL>
<P><STRONG><a name="[3fa]"></a>_ZL11setBaudRatej</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, drv_uart8.o(.text._ZL11setBaudRatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL11setBaudRatej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned, double, double)
</UL>

<P><STRONG><a name="[3fc]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_uart8.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
</UL>

<P><STRONG><a name="[3fb]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_uart8.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
</UL>

<P><STRONG><a name="[a3]"></a>_ZL5TxTCBPvj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart8.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ZL5TxTCBPvj &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9StartSendPKht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text.UART8_IRQHandler)
</UL>
<P><STRONG><a name="[324]"></a>_ZL9StartSendPKht</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_uart8.o(.text._ZL9StartSendPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL9StartSendPKht &rArr; xEventGroupClearBits &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL5TxTCBPvj
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(const unsigned char*, unsigned short, double, double)
</UL>

<P><STRONG><a name="[2de]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart8.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart8.cpp
</UL>

<P><STRONG><a name="[3ec]"></a>_ZL17MX_SDMMC1_SD_Initv</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_sdmmc.o(.text._ZL17MX_SDMMC1_SD_Initv))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[212]"></a>_ZL11clear_flagsv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_flash.o(.text._ZL11clear_flagsv))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8FlashCMDhd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23FlashCMDRead_QuadOutputPhthjhd
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12FlashCMDReadPhthjhd
</UL>

<P><STRONG><a name="[3e8]"></a>_ZL12FlashCMDReadPhthjhd</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, drv_flash.o(.text._ZL12FlashCMDReadPhthjhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ZL12FlashCMDReadPhthjhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[3e6]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_flash.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[3e5]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_flash.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[217]"></a>_ZL23FlashCMDRead_QuadOutputPhthjhd</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, drv_flash.o(.text._ZL23FlashCMDRead_QuadOutputPhthjhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ZL23FlashCMDRead_QuadOutputPhthjhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPages
</UL>

<P><STRONG><a name="[3e7]"></a>_ZL28SCB_InvalidateDCache_by_AddrPji</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, drv_flash.o(.text._ZL28SCB_InvalidateDCache_by_AddrPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL28SCB_InvalidateDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[3e9]"></a>_ZL8FlashCMDhd</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, drv_flash.o(.text._ZL8FlashCMDhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ZL8FlashCMDhd &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11clear_flagsv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
</UL>

<P><STRONG><a name="[298]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_rcsbus.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
</UL>

<P><STRONG><a name="[297]"></a>_ZL17__NVIC_DisableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, drv_rcsbus.o(.text._ZL17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL17__NVIC_DisableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[414]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_rcsbus.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
</UL>

<P><STRONG><a name="[290]"></a>_ZL11count_shorttt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_rcppm.o(.text._ZL11count_shorttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL11count_shorttt
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_rcppm.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
</UL>

<P><STRONG><a name="[292]"></a>_ZL17__NVIC_DisableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, drv_rcppm.o(.text._ZL17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL17__NVIC_DisableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[3ea]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_rcppm.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
</UL>

<P><STRONG><a name="[162]"></a>_GLOBAL__sub_I_drv_ExtIIC.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_drv_ExtIIC.cpp &rArr; __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extiic.o(.init_array)
</UL>
<P><STRONG><a name="[412]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_extiic.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
</UL>

<P><STRONG><a name="[411]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_extiic.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
</UL>

<P><STRONG><a name="[2d3]"></a>__cxx_global_var_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_extiic.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
</UL>

<P><STRONG><a name="[2d4]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_extiic.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init.1 &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
</UL>

<P><STRONG><a name="[163]"></a>_GLOBAL__sub_I_drv_ExtMag.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_ExtMag.cpp &rArr; __cxx_global_var_init &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.init_array)
</UL>
<P><STRONG><a name="[dd]"></a>_ZL13ExtMag_ServerPv</STRONG> (Thumb, 1344 bytes, Stack size 120 bytes, drv_extmag.o(.text._ZL13ExtMag_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2708 + Unknown Stack Size
<LI>Call Chain = _ZL13ExtMag_ServerPv &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.text._Z15init_drv_ExtMagv)
</UL>
<P><STRONG><a name="[2d5]"></a>__cxx_global_var_init</STRONG> (Thumb, 1150 bytes, Stack size 80 bytes, drv_extmag.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtMag.cpp
</UL>

<P><STRONG><a name="[164]"></a>_GLOBAL__sub_I_drv_Oled.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_oled.o(.text._GLOBAL__sub_I_drv_Oled.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_drv_Oled.cpp &rArr; __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_oled.o(.init_array)
</UL>
<P><STRONG><a name="[3d5]"></a>_ZL10LCD_WR_REGhd</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, drv_oled.o(.text._ZL10LCD_WR_REGhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _ZL10LCD_WR_REGhd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LCD_Address_Settttt
</UL>

<P><STRONG><a name="[50d]"></a>_ZL11LCD_WR_DATAtd</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, drv_oled.o(.text._ZL11LCD_WR_DATAtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _ZL11LCD_WR_DATAtd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LCD_Address_Settttt
</UL>

<P><STRONG><a name="[3d6]"></a>_ZL12LCD_WR_DATA8hd</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, drv_oled.o(.text._ZL12LCD_WR_DATA8hd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _ZL12LCD_WR_DATA8hd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
</UL>

<P><STRONG><a name="[4eb]"></a>_ZL12LCD_Writ_BusPvjb</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, drv_oled.o(.text._ZL12LCD_Writ_BusPvjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _ZL12LCD_Writ_BusPvjb &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>

<P><STRONG><a name="[41a]"></a>_ZL12LCD_Writ_BusPvjd</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, drv_oled.o(.text._ZL12LCD_Writ_BusPvjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Oled(double)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_Oled()
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23SCB_CleanDCache_by_AddrPji
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_WR_DATA8hd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11LCD_WR_DATAtd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LCD_WR_REGhd
</UL>

<P><STRONG><a name="[419]"></a>_ZL15LCD_Address_Settttt</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, drv_oled.o(.text._ZL15LCD_Address_Settttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _ZL15LCD_Address_Settttt &rArr; _ZL11LCD_WR_DATAtd &rArr; _ZL12LCD_Writ_BusPvjd &rArr; Lock_Oled(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11LCD_WR_DATAtd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LCD_WR_REGhd
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WritePicture(unsigned short, unsigned short, unsigned short, unsigned short, void*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear(unsigned short, double)
</UL>

<P><STRONG><a name="[3d4]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_oled.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
</UL>

<P><STRONG><a name="[3d3]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_oled.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Oled()
</UL>

<P><STRONG><a name="[50e]"></a>_ZL23SCB_CleanDCache_by_AddrPji</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, drv_oled.o(.text._ZL23SCB_CleanDCache_by_AddrPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL23SCB_CleanDCache_by_AddrPji
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12LCD_Writ_BusPvjd
</UL>

<P><STRONG><a name="[2d7]"></a>__cxx_global_var_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_oled.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Oled.cpp
</UL>

<P><STRONG><a name="[2d8]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_oled.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init.1 &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Oled.cpp
</UL>

<P><STRONG><a name="[a0]"></a>_ZL13UltrasonicTCBPvj</STRONG> (Thumb, 264 bytes, Stack size 128 bytes, drv_ultrasonic.o(.text._ZL13UltrasonicTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = _ZL13UltrasonicTCBPvj &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ultrasonic.o(.text.TIM8_BRK_TIM12_IRQHandler)
</UL>
<P><STRONG><a name="[46b]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, drv_ultrasonic.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
</UL>

<P><STRONG><a name="[46a]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_ultrasonic.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ultrasonic()
</UL>

<P><STRONG><a name="[e1]"></a>_ZL23UltrasonicTimerCallbackPv</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, drv_ultrasonic.o(.text._ZL23UltrasonicTimerCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _ZL23UltrasonicTimerCallbackPv &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ultrasonic.o(.text._Z19init_drv_ultrasonicv)
</UL>
<P><STRONG><a name="[ef]"></a>_ZL13TFMini_ServerPv</STRONG> (Thumb, 480 bytes, Stack size 176 bytes, drv_tfmini.o(.text._ZL13TFMini_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = _ZL13TFMini_ServerPv &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj)
</UL>
<P><STRONG><a name="[de]"></a>_ZL17TFMini_DriverInit4Portj</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044 + Unknown Stack Size
<LI>Call Chain = _ZL17TFMini_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfmini.o(.text._Z15init_drv_TFMiniv)
</UL>
<P><STRONG><a name="[165]"></a>_GLOBAL__sub_I_drv_ADC.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GLOBAL__sub_I_drv_ADC.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.init_array)
</UL>
<P><STRONG><a name="[2d0]"></a>__cxx_global_var_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_adc.o(.text.__cxx_global_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ADC.cpp
</UL>

<P><STRONG><a name="[2d1]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_adc.o(.text.__cxx_global_var_init.1))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ADC.cpp
</UL>

<P><STRONG><a name="[2d2]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_adc.o(.text.__cxx_global_var_init.2))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ADC.cpp
</UL>

<P><STRONG><a name="[df]"></a>_ZL15ExtSPL06_ServerPv</STRONG> (Thumb, 1504 bytes, Stack size 224 bytes, drv_extspl06.o(.text._ZL15ExtSPL06_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = _ZL15ExtSPL06_ServerPv &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_y()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_x()
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25spl06_temperature_ratesethh
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22spl06_pressure_ratesethh
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extspl06.o(.text._Z17init_drv_ExtSPL06v)
</UL>
<P><STRONG><a name="[53f]"></a>_ZL22spl06_pressure_ratesethh</STRONG> (Thumb, 744 bytes, Stack size 64 bytes, drv_extspl06.o(.text._ZL22spl06_pressure_ratesethh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _ZL22spl06_pressure_ratesethh &rArr; ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double) &rArr; Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[540]"></a>_ZL25spl06_temperature_ratesethh</STRONG> (Thumb, 752 bytes, Stack size 64 bytes, drv_extspl06.o(.text._ZL25spl06_temperature_ratesethh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _ZL25spl06_temperature_ratesethh &rArr; ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double) &rArr; Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15ExtSPL06_ServerPv
</UL>

<P><STRONG><a name="[dc]"></a>_ZL13ExtLed_ServerPv</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, drv_extled.o(.text._ZL13ExtLed_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _ZL13ExtLed_ServerPv &rArr; ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double) &rArr; Lock_ExtIIC(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extled.o(.text._Z15init_drv_ExtLedv)
</UL>
<P><STRONG><a name="[166]"></a>_GLOBAL__sub_I_drv_InternalMag.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_internalmag.o(.text._GLOBAL__sub_I_drv_InternalMag.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_drv_InternalMag.cpp &rArr; __cxx_global_var_init &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.init_array)
</UL>
<P><STRONG><a name="[e6]"></a>_ZL18InternalMag_ServerPv</STRONG> (Thumb, 1464 bytes, Stack size 144 bytes, drv_internalmag.o(.text._ZL18InternalMag_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2732 + Unknown Stack Size
<LI>Call Chain = _ZL18InternalMag_ServerPv &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned, const MAV_PARAM_TYPE*, const SName*, const unsigned long long*) &rArr; InternalStorage_ReadFile(const char*, const char*, void*, unsigned*, unsigned, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;int&rang;::vector3__sub_object()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, double)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, vector3&lang;int&rang;, bool, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, const unsigned char*, unsigned short, const unsigned char*, unsigned short, double)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, const unsigned char*, unsigned short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.text._Z20init_drv_InternalMagv)
</UL>
<P><STRONG><a name="[2d6]"></a>__cxx_global_var_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, drv_internalmag.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; SName::SName__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_InternalMag.cpp
</UL>

<P><STRONG><a name="[ed]"></a>_ZL10GPS_ServerPv</STRONG> (Thumb, 3168 bytes, Stack size 840 bytes, drv_gps.o(.text._ZL10GPS_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152 + Unknown Stack Size
<LI>Call Chain = _ZL10GPS_ServerPv &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_State_Machine::GPS_State_Machine__sub_object()
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19ResetRxStateMachineP17GPS_State_Machine
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13GPS_ParseByteP17GPS_State_MachinePhh
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text._ZL14GPS_DriverInit4Portj)
</UL>
<P><STRONG><a name="[4f5]"></a>_ZL13GPS_ParseByteP17GPS_State_MachinePhh</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, drv_gps.o(.text._ZL13GPS_ParseByteP17GPS_State_MachinePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13GPS_ParseByteP17GPS_State_MachinePhh &rArr; _ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[af]"></a>_ZL14GPS_DriverInit4Portj</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, drv_gps.o(.text._ZL14GPS_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _ZL14GPS_DriverInit4Portj &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text._Z12init_drv_GPSv)
</UL>
<P><STRONG><a name="[4f4]"></a>_ZL19ResetRxStateMachineP17GPS_State_Machine</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, drv_gps.o(.text._ZL19ResetRxStateMachineP17GPS_State_Machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13GPS_ParseByteP17GPS_State_MachinePhh
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10GPS_ServerPv
</UL>

<P><STRONG><a name="[ee]"></a>_ZL10RTK_ServerPv</STRONG> (Thumb, 3168 bytes, Stack size 840 bytes, drv_rtk.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152 + Unknown Stack Size
<LI>Call Chain = _ZL10RTK_ServerPv &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::set_invalid()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, Position_Sensor_DataType, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_State_Machine::GPS_State_Machine__sub_object()
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19ResetRxStateMachineP17GPS_State_Machine
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13GPS_ParseByteP17GPS_State_MachinePhh
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[507]"></a>_ZL13GPS_ParseByteP17GPS_State_MachinePhh</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, drv_rtk.o(.text._ZL13GPS_ParseByteP17GPS_State_MachinePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13GPS_ParseByteP17GPS_State_MachinePhh &rArr; _ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[b0]"></a>_ZL14RTK_DriverInit4Portj</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, drv_rtk.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _ZL14RTK_DriverInit4Portj &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk.o(.text._Z12init_drv_RTKv)
</UL>
<P><STRONG><a name="[506]"></a>_ZL19ResetRxStateMachineP17GPS_State_Machine</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, drv_rtk.o(.text._ZL19ResetRxStateMachineP17GPS_State_Machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19ResetRxStateMachineP17GPS_State_Machine
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13GPS_ParseByteP17GPS_State_MachinePhh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10RTK_ServerPv
</UL>

<P><STRONG><a name="[f1]"></a>_ZL18OpticalFlow_ServerPv</STRONG> (Thumb, 964 bytes, Stack size 344 bytes, drv_opticalflow_lc302.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = _ZL18OpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj)
</UL>
<P><STRONG><a name="[e8]"></a>_ZL28OpticalFlow_LC302_DriverInit4Portj</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = _ZL28OpticalFlow_LC302_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v)
</UL>
<P><STRONG><a name="[f2]"></a>_ZL18OpticalFlow_ServerPv</STRONG> (Thumb, 1324 bytes, Stack size 456 bytes, drv_opticalflow_lc306.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2704<LI>Call Chain = _ZL18OpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj)
</UL>
<P><STRONG><a name="[e9]"></a>_ZL28OpticalFlow_LC306_DriverInit4Portj</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = _ZL28OpticalFlow_LC306_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v)
</UL>
<P><STRONG><a name="[f4]"></a>_ZL18OpticalFlow_ServerPv</STRONG> (Thumb, 924 bytes, Stack size 352 bytes, drv_opticalflow_jl32xx.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = _ZL18OpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj)
</UL>
<P><STRONG><a name="[eb]"></a>_ZL29OpticalFlow_JL32xx_DriverInit4Portj</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = _ZL29OpticalFlow_JL32xx_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv)
</UL>
<P><STRONG><a name="[f3]"></a>_ZL18OpticalFlow_ServerPv</STRONG> (Thumb, 1000 bytes, Stack size 672 bytes, drv_opticalflow_gl9306.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = _ZL18OpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 constrain&lang;double&rang;(T1, T1)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::is_valid()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj)
</UL>
<P><STRONG><a name="[ea]"></a>_ZL29OpticalFlow_GL9306_DriverInit4Portj</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = _ZL29OpticalFlow_GL9306_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v)
</UL>
<P><STRONG><a name="[f0]"></a>_ZL21AnoOpticalFlow_ServerPv</STRONG> (Thumb, 1044 bytes, Stack size 296 bytes, drv_anoopticalflow.o(.text._ZL21AnoOpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544<LI>Call Chain = _ZL21AnoOpticalFlow_ServerPv &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, const double*, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_anoopticalflow.o(.text._ZL25AnoOpticalFlow_DriverInit4Portj)
</UL>
<P><STRONG><a name="[e7]"></a>_ZL25AnoOpticalFlow_DriverInit4Portj</STRONG> (Thumb, 360 bytes, Stack size 144 bytes, drv_anoopticalflow.o(.text._ZL25AnoOpticalFlow_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = _ZL25AnoOpticalFlow_DriverInit4Portj &rArr; PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_anoopticalflow.o(.text._Z23init_drv_AnoOpticalFlowv)
</UL>
<P><STRONG><a name="[6ad]"></a>lfs_aligndown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfs.o(.text.lfs_aligndown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>

<P><STRONG><a name="[6ac]"></a>lfs_alignup</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lfs.o(.text.lfs_alignup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_alignup &rArr; lfs_aligndown
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[6ae]"></a>lfs_alloc</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, lfs.o(.text.lfs_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[6b2]"></a>lfs_alloc_ack</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lfs.o(.text.lfs_alloc_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
</UL>

<P><STRONG><a name="[6b1]"></a>lfs_alloc_drop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lfs.o(.text.lfs_alloc_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_alloc_drop &rArr; lfs_alloc_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[f9]"></a>lfs_alloc_lookahead</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lfs.o(.text.lfs_alloc_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_alloc_lookahead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_alloc)
</UL>
<P><STRONG><a name="[6b3]"></a>lfs_bd_cmp</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, lfs.o(.text.lfs_bd_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[6b5]"></a>lfs_bd_erase</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lfs.o(.text.lfs_bd_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = lfs_bd_erase &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[6b6]"></a>lfs_bd_flush</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, lfs.o(.text.lfs_bd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[6b9]"></a>lfs_bd_prog</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, lfs.o(.text.lfs_bd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[6b4]"></a>lfs_bd_read</STRONG> (Thumb, 690 bytes, Stack size 72 bytes, lfs.o(.text.lfs_bd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>

<P><STRONG><a name="[6bb]"></a>lfs_bd_sync</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lfs.o(.text.lfs_bd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = lfs_bd_sync &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[6b7]"></a>lfs_cache_drop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lfs.o(.text.lfs_cache_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_cache_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[6b8]"></a>lfs_cache_zero</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lfs.o(.text.lfs_cache_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = lfs_cache_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[6be]"></a>lfs_ctz</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lfs.o(.text.lfs_ctz))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[6bc]"></a>lfs_ctz_extend</STRONG> (Thumb, 574 bytes, Stack size 96 bytes, lfs.o(.text.lfs_ctz_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
</UL>

<P><STRONG><a name="[6c1]"></a>lfs_ctz_find</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, lfs.o(.text.lfs_ctz_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = lfs_ctz_find &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_npw2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>

<P><STRONG><a name="[6c3]"></a>lfs_ctz_fromle32</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lfs.o(.text.lfs_ctz_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_ctz_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
</UL>

<P><STRONG><a name="[6bd]"></a>lfs_ctz_index</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lfs.o(.text.lfs_ctz_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lfs_ctz_index &rArr; lfs_popc
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_popc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[6c5]"></a>lfs_ctz_tole32</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lfs.o(.text.lfs_ctz_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_ctz_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>

<P><STRONG><a name="[6c6]"></a>lfs_ctz_traverse</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, lfs.o(.text.lfs_ctz_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = lfs_ctz_traverse &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>

<P><STRONG><a name="[6c7]"></a>lfs_deinit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lfs.o(.text.lfs_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lfs_deinit &rArr; lfs_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
</UL>

<P><STRONG><a name="[6c9]"></a>lfs_dir_alloc</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, lfs.o(.text.lfs_dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = lfs_dir_alloc &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
</UL>

<P><STRONG><a name="[6ca]"></a>lfs_dir_commit</STRONG> (Thumb, 1872 bytes, Stack size 264 bytes, lfs.o(.text.lfs_dir_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
</UL>

<P><STRONG><a name="[fa]"></a>lfs_dir_commit_commit</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lfs.o(.text.lfs_dir_commit_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commit_commit &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(.text.lfs_dir_commit)
<LI> lfs.o(.text.lfs_dir_compact)
</UL>
<P><STRONG><a name="[fb]"></a>lfs_dir_commit_size</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lfs.o(.text.lfs_dir_commit_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lfs_dir_commit_size &rArr; lfs_tag_dsize &rArr; lfs_tag_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_dir_compact)
</UL>
<P><STRONG><a name="[6da]"></a>lfs_dir_commitattr</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, lfs.o(.text.lfs_dir_commitattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_commit
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6db]"></a>lfs_dir_commitcrc</STRONG> (Thumb, 664 bytes, Stack size 120 bytes, lfs.o(.text.lfs_dir_commitcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commitcrc &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6e1]"></a>lfs_dir_commitprog</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, lfs.o(.text.lfs_dir_commitprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[6dc]"></a>lfs_dir_compact</STRONG> (Thumb, 1422 bytes, Stack size 224 bytes, lfs.o(.text.lfs_dir_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_swap
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6d3]"></a>lfs_dir_drop</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lfs.o(.text.lfs_dir_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + Unknown Stack Size
<LI>Call Chain = lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6de]"></a>lfs_dir_fetch</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lfs.o(.text.lfs_dir_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6ea]"></a>lfs_dir_fetchmatch</STRONG> (Thumb, 1720 bytes, Stack size 208 bytes, lfs.o(.text.lfs_dir_fetchmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isvalid
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_scmp
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_swap
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>

<P><STRONG><a name="[6ef]"></a>lfs_dir_find</STRONG> (Thumb, 590 bytes, Stack size 120 bytes, lfs.o(.text.lfs_dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawstat
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[fc]"></a>lfs_dir_find_match</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, lfs.o(.text.lfs_dir_find_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lfs_dir_find_match &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(.text.lfs_rawmount)
<LI> lfs.o(.text.lfs_dir_find)
</UL>
<P><STRONG><a name="[6f2]"></a>lfs_dir_get</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, lfs.o(.text.lfs_dir_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[6d8]"></a>lfs_dir_getgstate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lfs.o(.text.lfs_dir_getgstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_fromle32
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6f6]"></a>lfs_dir_getinfo</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, lfs.o(.text.lfs_dir_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = lfs_dir_getinfo &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawstat
</UL>

<P><STRONG><a name="[6f7]"></a>lfs_dir_getread</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, lfs.o(.text.lfs_dir_getread))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lfs_dir_getread &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>

<P><STRONG><a name="[6f4]"></a>lfs_dir_getslice</STRONG> (Thumb, 504 bytes, Stack size 104 bytes, lfs.o(.text.lfs_dir_getslice))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>

<P><STRONG><a name="[6e5]"></a>lfs_dir_split</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, lfs.o(.text.lfs_dir_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[6d5]"></a>lfs_dir_traverse</STRONG> (Thumb, 746 bytes, Stack size 176 bytes, lfs.o(.text.lfs_dir_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_traverse &rArr;  lfs_dir_traverse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[fd]"></a>lfs_dir_traverse_filter</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, lfs.o(.text.lfs_dir_traverse_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lfs_dir_traverse_filter &rArr; lfs_tag_splice &rArr; lfs_tag_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_dir_traverse)
</UL>
<P><STRONG><a name="[6cd]"></a>lfs_file_flush</STRONG> (Thumb, 444 bytes, Stack size 136 bytes, lfs.o(.text.lfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6cc]"></a>lfs_file_outline</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lfs.o(.text.lfs_file_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = lfs_file_outline &rArr; lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6fa]"></a>lfs_file_rawclose</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lfs.o(.text.lfs_file_rawclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_remove
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_free
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[6fe]"></a>lfs_file_rawopen</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lfs.o(.text.lfs_file_rawopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
</UL>

<P><STRONG><a name="[701]"></a>lfs_file_rawopencfg</STRONG> (Thumb, 964 bytes, Stack size 112 bytes, lfs.o(.text.lfs_file_rawopencfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1540 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_append
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
</UL>

<P><STRONG><a name="[6fb]"></a>lfs_file_rawread</STRONG> (Thumb, 526 bytes, Stack size 96 bytes, lfs.o(.text.lfs_file_rawread))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[705]"></a>lfs_file_rawseek</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lfs.o(.text.lfs_file_rawseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
</UL>

<P><STRONG><a name="[706]"></a>lfs_file_rawsize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lfs.o(.text.lfs_file_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_file_rawsize &rArr; lfs_max
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
</UL>

<P><STRONG><a name="[6ff]"></a>lfs_file_rawsync</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, lfs.o(.text.lfs_file_rawsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawsync &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[707]"></a>lfs_file_rawtruncate</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, lfs.o(.text.lfs_file_rawtruncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawtruncate &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
</UL>

<P><STRONG><a name="[6fc]"></a>lfs_file_rawwrite</STRONG> (Thumb, 840 bytes, Stack size 112 bytes, lfs.o(.text.lfs_file_rawwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawtruncate
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[6fd]"></a>lfs_file_relocate</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, lfs.o(.text.lfs_file_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[6c8]"></a>lfs_free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs.o(.text.lfs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lfs_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
</UL>

<P><STRONG><a name="[6e2]"></a>lfs_frombe32</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lfs.o(.text.lfs_frombe32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_frombe32
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[6c0]"></a>lfs_fromle32</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lfs.o(.text.lfs_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_fromle32
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_fromle32
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[709]"></a>lfs_fs_demove</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, lfs.o(.text.lfs_fs_demove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276 + Unknown Stack Size
<LI>Call Chain = lfs_fs_demove &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmove
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
</UL>

<P><STRONG><a name="[70c]"></a>lfs_fs_deorphan</STRONG> (Thumb, 418 bytes, Stack size 160 bytes, lfs.o(.text.lfs_fs_deorphan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_sync
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_getorphans
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
</UL>

<P><STRONG><a name="[702]"></a>lfs_fs_forceconsistency</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lfs.o(.text.lfs_fs_forceconsistency))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428 + Unknown Stack Size
<LI>Call Chain = lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[70e]"></a>lfs_fs_parent</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, lfs.o(.text.lfs_fs_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = lfs_fs_parent &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[fe]"></a>lfs_fs_parent_match</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, lfs.o(.text.lfs_fs_parent_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = lfs_fs_parent_match &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_fs_parent)
</UL>
<P><STRONG><a name="[6d2]"></a>lfs_fs_pred</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lfs.o(.text.lfs_fs_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = lfs_fs_pred &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[70b]"></a>lfs_fs_prepmove</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, lfs.o(.text.lfs_fs_prepmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lfs_fs_prepmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>

<P><STRONG><a name="[711]"></a>lfs_fs_preporphans</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lfs.o(.text.lfs_fs_preporphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = lfs_fs_preporphans &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[6e6]"></a>lfs_fs_rawsize</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lfs.o(.text.lfs_fs_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = lfs_fs_rawsize &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[6b0]"></a>lfs_fs_rawtraverse</STRONG> (Thumb, 706 bytes, Stack size 152 bytes, lfs.o(.text.lfs_fs_rawtraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[6e9]"></a>lfs_fs_relocate</STRONG> (Thumb, 646 bytes, Stack size 152 bytes, lfs.o(.text.lfs_fs_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_fs_relocate &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[ff]"></a>lfs_fs_size_count</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lfs.o(.text.lfs_fs_size_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_fs_size_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_fs_rawsize)
</UL>
<P><STRONG><a name="[6f5]"></a>lfs_gstate_fromle32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lfs.o(.text.lfs_gstate_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_gstate_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
</UL>

<P><STRONG><a name="[710]"></a>lfs_gstate_getorphans</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lfs.o(.text.lfs_gstate_getorphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_gstate_getorphans &rArr; lfs_tag_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[70a]"></a>lfs_gstate_hasmove</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lfs.o(.text.lfs_gstate_hasmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_gstate_hasmove &rArr; lfs_tag_type1
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>

<P><STRONG><a name="[6ee]"></a>lfs_gstate_hasmovehere</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lfs.o(.text.lfs_gstate_hasmovehere))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_gstate_hasmovehere &rArr; lfs_pair_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[70d]"></a>lfs_gstate_hasorphans</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lfs.o(.text.lfs_gstate_hasorphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_gstate_hasorphans &rArr; lfs_tag_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[6d7]"></a>lfs_gstate_iszero</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lfs.o(.text.lfs_gstate_iszero))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_gstate_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6d9]"></a>lfs_gstate_tole32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lfs.o(.text.lfs_gstate_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_gstate_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6d6]"></a>lfs_gstate_xor</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lfs.o(.text.lfs_gstate_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_gstate_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[712]"></a>lfs_init</STRONG> (Thumb, 1018 bytes, Stack size 72 bytes, lfs.o(.text.lfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lfs_init &rArr; lfs_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_npw2
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_malloc
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>

<P><STRONG><a name="[704]"></a>lfs_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs.o(.text.lfs_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lfs_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[6ba]"></a>lfs_max</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lfs.o(.text.lfs_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_max
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[6af]"></a>lfs_min</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lfs.o(.text.lfs_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_min
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[703]"></a>lfs_mlist_append</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lfs.o(.text.lfs_mlist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_mlist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[6f9]"></a>lfs_mlist_isopen</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lfs.o(.text.lfs_mlist_isopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_mlist_isopen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
</UL>

<P><STRONG><a name="[700]"></a>lfs_mlist_remove</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lfs.o(.text.lfs_mlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_mlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[6c2]"></a>lfs_npw2</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lfs.o(.text.lfs_npw2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_npw2
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
</UL>

<P><STRONG><a name="[6cb]"></a>lfs_pair_cmp</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, lfs.o(.text.lfs_pair_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lfs_pair_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6d1]"></a>lfs_pair_fromle32</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lfs.o(.text.lfs_pair_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_pair_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6e7]"></a>lfs_pair_isnull</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lfs.o(.text.lfs_pair_isnull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_pair_isnull
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[6e8]"></a>lfs_pair_swap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lfs.o(.text.lfs_pair_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_pair_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[70f]"></a>lfs_pair_sync</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lfs.o(.text.lfs_pair_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_pair_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[6d4]"></a>lfs_pair_tole32</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lfs.o(.text.lfs_pair_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_pair_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmkdir
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6c4]"></a>lfs_popc</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lfs.o(.text.lfs_popc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_popc
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
</UL>

<P><STRONG><a name="[708]"></a>lfs_rawformat</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, lfs.o(.text.lfs_rawformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332 + Unknown Stack Size
<LI>Call Chain = lfs_rawformat &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_tole32
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
</UL>

<P><STRONG><a name="[713]"></a>lfs_rawmkdir</STRONG> (Thumb, 572 bytes, Stack size 208 bytes, lfs.o(.text.lfs_rawmkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
</UL>

<P><STRONG><a name="[714]"></a>lfs_rawmount</STRONG> (Thumb, 610 bytes, Stack size 120 bytes, lfs.o(.text.lfs_rawmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isvalid
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_fromle32
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
</UL>

<P><STRONG><a name="[718]"></a>lfs_rawstat</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, lfs.o(.text.lfs_rawstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = lfs_rawstat &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
</UL>

<P><STRONG><a name="[717]"></a>lfs_rawunmount</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs.o(.text.lfs_rawunmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lfs_rawunmount &rArr; lfs_deinit &rArr; lfs_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>

<P><STRONG><a name="[6eb]"></a>lfs_scmp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lfs.o(.text.lfs_scmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_scmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[716]"></a>lfs_superblock_fromle32</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lfs.o(.text.lfs_superblock_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_superblock_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>

<P><STRONG><a name="[715]"></a>lfs_superblock_tole32</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lfs.o(.text.lfs_superblock_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lfs_superblock_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>

<P><STRONG><a name="[6d0]"></a>lfs_tag_chunk</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6df]"></a>lfs_tag_dsize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(.text.lfs_tag_dsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_tag_dsize &rArr; lfs_tag_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_size
</UL>

<P><STRONG><a name="[6dd]"></a>lfs_tag_id</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_id
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawstat
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6f8]"></a>lfs_tag_isdelete</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_isdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_isdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>

<P><STRONG><a name="[6ec]"></a>lfs_tag_isvalid</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_isvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_isvalid
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[6e4]"></a>lfs_tag_size</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_getorphans
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[6ed]"></a>lfs_tag_splice</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lfs.o(.text.lfs_tag_splice))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_tag_splice &rArr; lfs_tag_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[6cf]"></a>lfs_tag_type1</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_type1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_type1
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6ce]"></a>lfs_tag_type3</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lfs.o(.text.lfs_tag_type3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lfs_tag_type3
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getinfo
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[6e0]"></a>lfs_tobe32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs.o(.text.lfs_tobe32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_tobe32 &rArr; lfs_frombe32
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[6bf]"></a>lfs_tole32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs.o(.text.lfs_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_tole32
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[657]"></a>change_bitmap</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ff.o(.text.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[659]"></a>check_fs</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[665]"></a>chk_chr</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ff.o(.text.chk_chr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[695]"></a>chk_lock</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, ff.o(.text.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[692]"></a>clear_lock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ff.o(.text.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[672]"></a>clst2sect</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ff.o(.text.clst2sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[65c]"></a>cmp_lfn</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(.text.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[65e]"></a>create_chain</STRONG> (Thumb, 756 bytes, Stack size 48 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[663]"></a>create_name</STRONG> (Thumb, 1106 bytes, Stack size 64 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_name &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[668]"></a>create_xdir</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ff.o(.text.create_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = create_xdir &rArr; xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6a5]"></a>dbc_1st</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ff.o(.text.dbc_1st))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[6a9]"></a>dbc_2nd</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ff.o(.text.dbc_2nd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_2nd
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[689]"></a>dec_lock</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, ff.o(.text.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[66d]"></a>dir_alloc</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[670]"></a>dir_clear</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[676]"></a>dir_find</STRONG> (Thumb, 666 bytes, Stack size 64 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[66f]"></a>dir_next</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[677]"></a>dir_read</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[67b]"></a>dir_register</STRONG> (Thumb, 812 bytes, Stack size 160 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[683]"></a>dir_remove</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[66e]"></a>dir_sdi</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[696]"></a>enq_lock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ff.o(.text.enq_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enq_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[67c]"></a>fill_first_frag</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ff.o(.text.fill_first_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fill_first_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[661]"></a>fill_last_frag</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ff.o(.text.fill_last_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[660]"></a>find_bitmap</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, ff.o(.text.find_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = find_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[6a4]"></a>find_volume</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[686]"></a>follow_path</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[681]"></a>gen_numname</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, ff.o(.text.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6a6]"></a>get_achar</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(.text.get_achar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_achar &rArr; tchar2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[65f]"></a>get_fat</STRONG> (Thumb, 630 bytes, Stack size 64 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[69d]"></a>get_fileinfo</STRONG> (Thumb, 794 bytes, Stack size 40 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_fileinfo &rArr; get_xfileinfo &rArr; put_utf
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xfileinfo
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[691]"></a>get_ldnumber</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[6a7]"></a>get_xfileinfo</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, ff.o(.text.get_xfileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = get_xfileinfo &rArr; put_utf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[699]"></a>inc_lock</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, ff.o(.text.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[697]"></a>init_alloc_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(.text.init_alloc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_alloc_info &rArr; ld_qword
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[698]"></a>ld_clust</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ld_clust &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[69a]"></a>ld_dword</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text.ld_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6ab]"></a>ld_qword</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(.text.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xfileinfo
</UL>

<P><STRONG><a name="[65a]"></a>ld_word</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff.o(.text.ld_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xfileinfo
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[67d]"></a>load_obj_xdir</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text.load_obj_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[679]"></a>load_xdir</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, ff.o(.text.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = load_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[71a]"></a>lock_fs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ff.o(.text.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[65b]"></a>mem_cmp</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, ff.o(.text.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[680]"></a>mem_cpy</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, ff.o(.text.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[666]"></a>mem_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(.text.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[684]"></a>mount_volume</STRONG> (Thumb, 1814 bytes, Stack size 128 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[658]"></a>move_window</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>

<P><STRONG><a name="[68c]"></a>pattern_matching</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, ff.o(.text.pattern_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = pattern_matching &rArr;  pattern_matching (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[67a]"></a>pick_lfn</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ff.o(.text.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pick_lfn &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[662]"></a>put_fat</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[682]"></a>put_lfn</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, ff.o(.text.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = put_lfn &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6a8]"></a>put_utf</STRONG> (Thumb, 384 bytes, Stack size 20 bytes, ff.o(.text.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = put_utf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xfileinfo
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[690]"></a>remove_chain</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[68f]"></a>st_clust</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st_clust &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[68e]"></a>st_dword</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text.st_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[67e]"></a>st_qword</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ff.o(.text.st_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[669]"></a>st_word</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ff.o(.text.st_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[67f]"></a>store_xdir</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ff.o(.text.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = store_xdir &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[678]"></a>sum_sfn</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[687]"></a>sync_fs</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
</UL>

<P><STRONG><a name="[671]"></a>sync_window</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[664]"></a>tchar2uni</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, ff.o(.text.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tchar2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[685]"></a>unlock_fs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[688]"></a>validate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[719]"></a>xdir_sum</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ff.o(.text.xdir_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xdir_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>

<P><STRONG><a name="[66a]"></a>xname_sum</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ff.o(.text.xname_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[284]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sd_diskio.o(.text.SCB_CleanDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[283]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sd_diskio.o(.text.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[277]"></a>SD_CheckStatus</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sd_diskio.o(.text.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SD_CheckStatus &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[21b]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, flash_diskio.o(.text.SCB_CleanDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
</UL>

<P><STRONG><a name="[21a]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, flash_diskio.o(.text.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[aa]"></a>_ZL10Debug_taskPv</STRONG> (Thumb, 928 bytes, Stack size 1416 bytes, debug.o(.text._ZL10Debug_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2380<LI>Call Chain = _ZL10Debug_taskPv &rArr; _ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(const char*, double*, unsigned char, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator [](int)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.text._Z10init_Debugv)
</UL>
<P><STRONG><a name="[522]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, debug.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[524]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, debug.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[556]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, debug.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
</UL>

<P><STRONG><a name="[5cd]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, debug.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5aa]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, debug.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[578]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, debug.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[577]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, debug.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a1]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, debug.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[579]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, debug.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[57a]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, debug.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5d9]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, debug.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[4f0]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, debug.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
</UL>

<P><STRONG><a name="[5d8]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, debug.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff
</UL>

<P><STRONG><a name="[5da]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, debug.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[4ef]"></a>_ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, debug.o(.text._ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = _ZL32mavlink_msg_debug_vect_pack_chanhhhP17__mavlink_messagePKcyfff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10Debug_taskPv
</UL>

<P><STRONG><a name="[523]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, debug.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[167]"></a>_GLOBAL__sub_I_Commulink.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, commulink.o(.text._GLOBAL__sub_I_Commulink.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _GLOBAL__sub_I_Commulink.cpp &rArr; __cxx_global_var_init &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.init_array)
</UL>
<P><STRONG><a name="[504]"></a>_ZL10LEDRefreshf</STRONG> (Thumb, 2784 bytes, Stack size 144 bytes, commulink.o(.text._ZL10LEDRefreshf))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _ZL10LEDRefreshf &rArr; set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerFreq(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[525]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, commulink.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[527]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, commulink.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_update_checksumP17__mavlink_messageh
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[b7]"></a>_ZL16Commulink_ServerPv</STRONG> (Thumb, 4056 bytes, Stack size 2408 bytes, commulink.o(.text._ZL16Commulink_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3752 + Unknown Stack Size
<LI>Call Chain = _ZL16Commulink_ServerPv &rArr; _ZL17CommuPortRegisterh &rArr; SetMsgRate(unsigned char, unsigned short, float, double) &rArr; std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterIteratorMoveNext()
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentParameter(SName*, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_msg_heartbeat_pack_chanhhhP17__mavlink_messagehhhjh
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17CommuPortRegisterh
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10LEDRefreshf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._Z14init_Commulinkv)
</UL>
<P><STRONG><a name="[570]"></a>_ZL16_mav_parse_errorP16__mavlink_status</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, commulink.o(.text._ZL16_mav_parse_errorP16__mavlink_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16_mav_parse_errorP16__mavlink_status
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[557]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, commulink.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
</UL>

<P><STRONG><a name="[549]"></a>_ZL17CommuPortRegisterh</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, commulink.o(.text._ZL17CommuPortRegisterh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = _ZL17CommuPortRegisterh &rArr; SetMsgRate(unsigned char, unsigned short, float, double) &rArr; std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_set_proto_versionhj
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[5ce]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, commulink.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[56c]"></a>_ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, commulink.o(.text._ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = _ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status &rArr; _ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_ &rArr; _ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_bufferh
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[550]"></a>_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, commulink.o(.text._ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = _ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status &rArr; _ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status &rArr; _ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_ &rArr; _ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_bufferh
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22mavlink_start_checksumP17__mavlink_message
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16_mav_parse_errorP16__mavlink_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[5ab]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, commulink.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[57c]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, commulink.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[57b]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, commulink.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a2]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, commulink.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5c8]"></a>_ZL21mavlink_get_msg_entryj</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, commulink.o(.text._ZL21mavlink_get_msg_entryj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL21mavlink_get_msg_entryj
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
</UL>

<P><STRONG><a name="[57d]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, commulink.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[571]"></a>_ZL22mavlink_start_checksumP17__mavlink_message</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, commulink.o(.text._ZL22mavlink_start_checksumP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ZL22mavlink_start_checksumP17__mavlink_message &rArr; _ZL8crc_initPt
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[57e]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, commulink.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5bd]"></a>_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message</STRONG> (Thumb, 578 bytes, Stack size 184 bytes, commulink.o(.text._ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = _ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
</UL>

<P><STRONG><a name="[5bf]"></a>_ZL23mavlink_update_checksumP17__mavlink_messageh</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, commulink.o(.text._ZL23mavlink_update_checksumP17__mavlink_messageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL23mavlink_update_checksumP17__mavlink_messageh &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_
</UL>

<P><STRONG><a name="[56f]"></a>_ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_</STRONG> (Thumb, 1358 bytes, Stack size 56 bytes, commulink.o(.text._ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = _ZL25mavlink_frame_char_bufferP17__mavlink_messageP16__mavlink_statushS0_S2_ &rArr; _ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_update_checksumP17__mavlink_messageh
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_signature_checkP17__mavlink_signingP25__mavlink_signing_streamsPK17__mavlink_message
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22mavlink_start_checksumP17__mavlink_message
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_get_msg_entryj
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16_mav_parse_errorP16__mavlink_status
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[55d]"></a>_ZL25mavlink_set_proto_versionhj</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, commulink.o(.text._ZL25mavlink_set_proto_versionhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL25mavlink_set_proto_versionhj &rArr; _ZL26mavlink_get_channel_statush
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17CommuPortRegisterh
</UL>

<P><STRONG><a name="[56d]"></a>_ZL26mavlink_get_channel_bufferh</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text._ZL26mavlink_get_channel_bufferh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_bufferh
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[56e]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_set_proto_versionhj
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_parse_charhhP17__mavlink_messageP16__mavlink_status
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18mavlink_frame_charhhP17__mavlink_messageP16__mavlink_status
</UL>

<P><STRONG><a name="[54b]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, commulink.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[5db]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, commulink.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_msg_heartbeat_pack_chanhhhP17__mavlink_messagehhhjh
</UL>

<P><STRONG><a name="[5dc]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, commulink.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[54a]"></a>_ZL31mavlink_msg_heartbeat_pack_chanhhhP17__mavlink_messagehhhjh</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, commulink.o(.text._ZL31mavlink_msg_heartbeat_pack_chanhhhP17__mavlink_messagehhhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = _ZL31mavlink_msg_heartbeat_pack_chanhhhP17__mavlink_messagehhhjh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[54d]"></a>_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, commulink.o(.text._ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = _ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[54f]"></a>_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, commulink.o(.text._ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = _ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[54e]"></a>_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, commulink.o(.text._ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = _ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Commulink_ServerPv
</UL>

<P><STRONG><a name="[526]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, commulink.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22mavlink_start_checksumP17__mavlink_message
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[f7]"></a>__cxx_global_array_dtor</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, commulink.o(.text.__cxx_global_array_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = __cxx_global_array_dtor &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::~__tree__sub_object() &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::~__tree__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[2a1]"></a>__cxx_global_var_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, commulink.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __cxx_global_var_init &rArr; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__tree__sub_object(const std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;&)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Commulink.cpp
</UL>

<P><STRONG><a name="[528]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[52a]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[558]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
</UL>

<P><STRONG><a name="[5cf]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5ac]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinkcmdprocess.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[580]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[57f]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinkcmdprocess.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[106]"></a>_ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message &rArr; Set_RTC_Time &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[5a3]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[581]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinkcmdprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[104]"></a>_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message</STRONG> (Thumb, 240 bytes, Stack size 400 bytes, mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = _ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message &rArr; _ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WGA_Correct()
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_get_WGA(unsigned*)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[105]"></a>_ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2132 + Unknown Stack Size
<LI>Call Chain = _ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[582]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinkcmdprocess.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5de]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5b6]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, mavlinkcmdprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[5dd]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinkcmdprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
</UL>

<P><STRONG><a name="[5df]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinkcmdprocess.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[108]"></a>_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message</STRONG> (Thumb, 460 bytes, Stack size 728 bytes, mavlinkcmdprocess.o(.text._ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748<LI>Call Chain = _ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message &rArr; _ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[107]"></a>_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message</STRONG> (Thumb, 256 bytes, Stack size 376 bytes, mavlinkcmdprocess.o(.text._ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 3292 + Unknown Stack Size
<LI>Call Chain = _ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[5f3]"></a>_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, mavlinkcmdprocess.o(.text._ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = _ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message
</UL>

<P><STRONG><a name="[109]"></a>_ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[5f2]"></a>_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy</STRONG> (Thumb, 244 bytes, Stack size 184 bytes, mavlinkcmdprocess.o(.text._ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = _ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message
</UL>

<P><STRONG><a name="[5b5]"></a>_ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, mavlinkcmdprocess.o(.text._ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = _ZL38mavlink_msg_command_ack_pack_chan_fullhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message
</UL>

<P><STRONG><a name="[5f6]"></a>_ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, mavlinkcmdprocess.o(.text._ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = _ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_ &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message
</UL>

<P><STRONG><a name="[10a]"></a>_ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message</STRONG> (Thumb, 184 bytes, Stack size 376 bytes, mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = _ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message &rArr; _ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_ &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_protocol_version_pack_chanhhhP17__mavlink_messagetttPKhS2_
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[5f7]"></a>_ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_</STRONG> (Thumb, 326 bytes, Stack size 240 bytes, mavlinkcmdprocess.o(.text._ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = _ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_ &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message
</UL>

<P><STRONG><a name="[10b]"></a>_ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message</STRONG> (Thumb, 440 bytes, Stack size 448 bytes, mavlinkcmdprocess.o(.text._ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1524<LI>Call Chain = _ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message &rArr; _ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_ &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL39mavlink_msg_autopilot_version_pack_chanhhhP17__mavlink_messageyjjjjPKhS2_S2_ttyS2_
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[529]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[12c]"></a>_ZL13Msg74_VFR_HUDhP17__mavlink_message</STRONG> (Thumb, 352 bytes, Stack size 168 bytes, mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = _ZL13Msg74_VFR_HUDhP17__mavlink_message &rArr; _ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(float)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[52b]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinksendfuncs.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[124]"></a>_ZL14Msg30_ATTITUDEhP17__mavlink_message</STRONG> (Thumb, 288 bytes, Stack size 144 bytes, mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = _ZL14Msg30_ATTITUDEhP17__mavlink_message &rArr; _ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getPitch() const
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getRoll() const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[52d]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinksendfuncs.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[12e]"></a>_ZL15Msg124_GPS2_RAWhP17__mavlink_message</STRONG> (Thumb, 496 bytes, Stack size 656 bytes, mavlinksendfuncs.o(.text._ZL15Msg124_GPS2_RAWhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660<LI>Call Chain = _ZL15Msg124_GPS2_RAWhP17__mavlink_message &rArr; _ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[120]"></a>_ZL16Msg01_SYS_STATUShP17__mavlink_message</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = _ZL16Msg01_SYS_STATUShP17__mavlink_message &rArr; _ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPULoad
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[122]"></a>_ZL16Msg26_SCALED_IMUhP17__mavlink_message</STRONG> (Thumb, 612 bytes, Stack size 264 bytes, mavlinksendfuncs.o(.text._ZL16Msg26_SCALED_IMUhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = _ZL16Msg26_SCALED_IMUhP17__mavlink_message &rArr; _ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::vector3__sub_object()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::set_vector(float, float, float)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[559]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlinksendfuncs.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
</UL>

<P><STRONG><a name="[121]"></a>_ZL17Msg24_GPS_RAW_INThP17__mavlink_message</STRONG> (Thumb, 848 bytes, Stack size 432 bytes, mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476<LI>Call Chain = _ZL17Msg24_GPS_RAW_INThP17__mavlink_message &rArr; _ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[12b]"></a>_ZL17Msg65_RC_CHANNELShP17__mavlink_message</STRONG> (Thumb, 1344 bytes, Stack size 424 bytes, mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = _ZL17Msg65_RC_CHANNELShP17__mavlink_message &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5f1]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinksendfuncs.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[12d]"></a>_ZL18Msg116_SCALED_IMU2hP17__mavlink_message</STRONG> (Thumb, 612 bytes, Stack size 256 bytes, mavlinksendfuncs.o(.text._ZL18Msg116_SCALED_IMU2hP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = _ZL18Msg116_SCALED_IMU2hP17__mavlink_message &rArr; _ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::vector3__sub_object()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::set_vector(float, float, float)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[12f]"></a>_ZL18Msg129_SCALED_IMU3hP17__mavlink_message</STRONG> (Thumb, 612 bytes, Stack size 256 bytes, mavlinksendfuncs.o(.text._ZL18Msg129_SCALED_IMU3hP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = _ZL18Msg129_SCALED_IMU3hP17__mavlink_message &rArr; _ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::vector3__sub_object()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;float&rang;::set_vector(float, float, float)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[130]"></a>_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message</STRONG> (Thumb, 1896 bytes, Stack size 1208 bytes, mavlinksendfuncs.o(.text._ZL19Msg234_HIGH_LATENCYhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 3388 + Unknown Stack Size
<LI>Call Chain = _ZL19Msg234_HIGH_LATENCYhP17__mavlink_message &rArr; ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getPitch() const
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getRoll() const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mav_mode(unsigned short*, unsigned short*, unsigned short*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 sq&lang;double&rang;(T1)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5ad]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinksendfuncs.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[584]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[583]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinksendfuncs.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[131]"></a>_ZL20Msg242_HOME_POSITIONhP17__mavlink_message</STRONG> (Thumb, 396 bytes, Stack size 416 bytes, mavlinksendfuncs.o(.text._ZL20Msg242_HOME_POSITIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1436<LI>Call Chain = _ZL20Msg242_HOME_POSITIONhP17__mavlink_message &rArr; _ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[123]"></a>_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, mavlinksendfuncs.o(.text._ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = _ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message &rArr; _ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[129]"></a>_ZL21Msg42_MISSION_CURRENThP17__mavlink_message</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, mavlinksendfuncs.o(.text._ZL21Msg42_MISSION_CURRENThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = _ZL21Msg42_MISSION_CURRENThP17__mavlink_message &rArr; _ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5a4]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinksendfuncs.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[585]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[573]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, mavlinksendfuncs.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
</UL>

<P><STRONG><a name="[586]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinksendfuncs.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[126]"></a>_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = _ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message &rArr; _ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[128]"></a>_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message</STRONG> (Thumb, 780 bytes, Stack size 304 bytes, mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = _ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5c4]"></a>_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, mavlinksendfuncs.o(.text._ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
</UL>

<P><STRONG><a name="[125]"></a>_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message</STRONG> (Thumb, 272 bytes, Stack size 152 bytes, mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = _ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message &rArr; _ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qz() const
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qy() const
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qx() const
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_qw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[127]"></a>_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message</STRONG> (Thumb, 528 bytes, Stack size 448 bytes, mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = _ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message &rArr; _ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf1::PosSensorHealthInf1__sub_object()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5e1]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[12a]"></a>_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message</STRONG> (Thumb, 896 bytes, Stack size 608 bytes, mavlinksendfuncs.o(.text._ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2788 + Unknown Stack Size
<LI>Call Chain = _ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message &rArr; ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod(double, double)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 sq&lang;double&rang;(T1)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[5e0]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinksendfuncs.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff
</UL>

<P><STRONG><a name="[51c]"></a>_ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff</STRONG> (Thumb, 168 bytes, Stack size 96 bytes, mavlinksendfuncs.o(.text._ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = _ZL29mavlink_msg_vfr_hud_pack_chanhhhP17__mavlink_messageffstff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13Msg74_VFR_HUDhP17__mavlink_message
</UL>

<P><STRONG><a name="[53e]"></a>_ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, mavlinksendfuncs.o(.text._ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = _ZL30mavlink_msg_attitude_pack_chanhhhP17__mavlink_messagejffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg30_ATTITUDEhP17__mavlink_message
</UL>

<P><STRONG><a name="[543]"></a>_ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj</STRONG> (Thumb, 324 bytes, Stack size 168 bytes, mavlinksendfuncs.o(.text._ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = _ZL30mavlink_msg_gps2_raw_pack_chanhhhP17__mavlink_messageyhiiitttthhj &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg124_GPS2_RAWhP17__mavlink_message
</UL>

<P><STRONG><a name="[5e2]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinksendfuncs.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[555]"></a>_ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss</STRONG> (Thumb, 274 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = _ZL32mavlink_msg_scaled_imu_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg26_SCALED_IMUhP17__mavlink_message
</UL>

<P><STRONG><a name="[552]"></a>_ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt</STRONG> (Thumb, 304 bytes, Stack size 152 bytes, mavlinksendfuncs.o(.text._ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = _ZL32mavlink_msg_sys_status_pack_chanhhhP17__mavlink_messagejjjttsatttttt &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16Msg01_SYS_STATUShP17__mavlink_message
</UL>

<P><STRONG><a name="[55e]"></a>_ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj</STRONG> (Thumb, 364 bytes, Stack size 208 bytes, mavlinksendfuncs.o(.text._ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = _ZL33mavlink_msg_gps_raw_int_pack_chanhhhP17__mavlink_messageyhiiitttthijjjj &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg24_GPS_RAW_INThP17__mavlink_message
</UL>

<P><STRONG><a name="[55f]"></a>_ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth</STRONG> (Thumb, 476 bytes, Stack size 216 bytes, mavlinksendfuncs.o(.text._ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = _ZL33mavlink_msg_rc_channels_pack_chanhhhP17__mavlink_messagejhtttttttttttttttttth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17Msg65_RC_CHANNELShP17__mavlink_message
</UL>

<P><STRONG><a name="[565]"></a>_ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss</STRONG> (Thumb, 274 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = _ZL33mavlink_msg_scaled_imu2_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg116_SCALED_IMU2hP17__mavlink_message
</UL>

<P><STRONG><a name="[566]"></a>_ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss</STRONG> (Thumb, 274 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = _ZL33mavlink_msg_scaled_imu3_pack_chanhhhP17__mavlink_messagejsssssssss &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg129_SCALED_IMU3hP17__mavlink_message
</UL>

<P><STRONG><a name="[574]"></a>_ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht</STRONG> (Thumb, 518 bytes, Stack size 216 bytes, mavlinksendfuncs.o(.text._ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = _ZL34mavlink_msg_high_latency_pack_chanhhhP17__mavlink_messagehjhsstasiisshhhahhhaahht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg234_HIGH_LATENCYhP17__mavlink_message
</UL>

<P><STRONG><a name="[59c]"></a>_ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy</STRONG> (Thumb, 244 bytes, Stack size 184 bytes, mavlinksendfuncs.o(.text._ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = _ZL35mavlink_msg_home_position_pack_chanhhhP17__mavlink_messageiiifffPKffffy &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20Msg242_HOME_POSITIONhP17__mavlink_message
</UL>

<P><STRONG><a name="[5a0]"></a>_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, mavlinksendfuncs.o(.text._ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = _ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg42_MISSION_CURRENThP17__mavlink_message
</UL>

<P><STRONG><a name="[59d]"></a>_ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, mavlinksendfuncs.o(.text._ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = _ZL37mavlink_msg_scaled_pressure_pack_chanhhhP17__mavlink_messagejffs &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message
</UL>

<P><STRONG><a name="[5c1]"></a>_ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, mavlinksendfuncs.o(.text._ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = _ZL40mavlink_msg_local_position_ned_pack_chanhhhP17__mavlink_messagejffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message
</UL>

<P><STRONG><a name="[5c2]"></a>_ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh</STRONG> (Thumb, 288 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = _ZL40mavlink_msg_rc_channels_scaled_pack_chanhhhP17__mavlink_messagejhssssssssh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message
</UL>

<P><STRONG><a name="[5c5]"></a>_ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff</STRONG> (Thumb, 176 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _ZL41mavlink_msg_attitude_quaternion_pack_chanhhhP17__mavlink_messagejfffffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message
</UL>

<P><STRONG><a name="[5c6]"></a>_ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst</STRONG> (Thumb, 234 bytes, Stack size 144 bytes, mavlinksendfuncs.o(.text._ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = _ZL41mavlink_msg_global_position_int_pack_chanhhhP17__mavlink_messagejiiiissst &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message
</UL>

<P><STRONG><a name="[5d7]"></a>_ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _ZL43mavlink_msg_nav_controller_output_pack_chanhhhP17__mavlink_messageffsstfff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message
</UL>

<P><STRONG><a name="[52c]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[168]"></a>_GLOBAL__sub_I_MavlinkRCProcess.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _GLOBAL__sub_I_MavlinkRCProcess.cpp &rArr; __cxx_global_var_init &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.init_array)
</UL>
<P><STRONG><a name="[52e]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[10c]"></a>_ZL14Msg0_HEARTBEAThPK17__mavlink_message</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ZL14Msg0_HEARTBEAThPK17__mavlink_message &rArr; _ZL25mavlink_set_proto_versionhj &rArr; _ZL26mavlink_get_channel_statush
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_set_proto_versionhj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[10d]"></a>_ZL14Msg11_SET_MODEhPK17__mavlink_message</STRONG> (Thumb, 288 bytes, Stack size 240 bytes, mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _ZL14Msg11_SET_MODEhPK17__mavlink_message &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[530]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinkrcprocess.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[110]"></a>_ZL15Msg23_PARAM_SEThPK17__mavlink_message</STRONG> (Thumb, 424 bytes, Stack size 432 bytes, mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2460 + Unknown Stack Size
<LI>Call Chain = _ZL15Msg23_PARAM_SEThPK17__mavlink_message &rArr; UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[55a]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
</UL>

<P><STRONG><a name="[5d0]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinkrcprocess.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[111]"></a>_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message</STRONG> (Thumb, 832 bytes, Stack size 976 bytes, mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 3268 + Unknown Stack Size
<LI>Call Chain = _ZL18Msg39_MISSION_ITEMhPK17__mavlink_message &rArr; addMission(MissionInf, bool, double) &rArr; WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[11a]"></a>_ZL18Msg76_COMMAND_LONGhPK17__mavlink_message</STRONG> (Thumb, 760 bytes, Stack size 408 bytes, mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ZL18Msg76_COMMAND_LONGhPK17__mavlink_message &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[115]"></a>_ZL19Msg44_MISSION_COUNThPK17__mavlink_message</STRONG> (Thumb, 352 bytes, Stack size 408 bytes, mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2604 + Unknown Stack Size
<LI>Call Chain = _ZL19Msg44_MISSION_COUNThPK17__mavlink_message &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[5ae]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinkrcprocess.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[588]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[587]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinkrcprocess.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[11d]"></a>_ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message</STRONG> (Thumb, 404 bytes, Stack size 144 bytes, mavlinkrcprocess.o(.text._ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = _ZL20Msg138_ATT_POS_MOCAPhPK17__mavlink_message &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[11e]"></a>_ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mavlinkrcprocess.o(.text._ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message &rArr; inject_RtkPorts(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inject_RtkPorts(const unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[112]"></a>_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message</STRONG> (Thumb, 544 bytes, Stack size 568 bytes, mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2740 + Unknown Stack Size
<LI>Call Chain = _ZL21Msg40_MISSION_REQUESThPK17__mavlink_message &rArr; ReadMission(unsigned short, MissionInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[5a5]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[589]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinkrcprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[119]"></a>_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message</STRONG> (Thumb, 968 bytes, Stack size 992 bytes, mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 3284 + Unknown Stack Size
<LI>Call Chain = _ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message &rArr; addMission(MissionInf, bool, double) &rArr; WriteVolatileParamGroup(SName, const void*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[116]"></a>_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message</STRONG> (Thumb, 208 bytes, Stack size 368 bytes, mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2564 + Unknown Stack Size
<LI>Call Chain = _ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, const unsigned long long*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(const char*, const char*, const void*, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[58a]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinkrcprocess.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[10e]"></a>_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message</STRONG> (Thumb, 536 bytes, Stack size 792 bytes, mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740<LI>Call Chain = _ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message &rArr; _ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned*)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[10f]"></a>_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message</STRONG> (Thumb, 632 bytes, Stack size 928 bytes, mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1884 + Unknown Stack Size
<LI>Call Chain = _ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message &rArr; _ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::get_CharStr(char*)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendParamList()
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[11f]"></a>_ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mavlinkrcprocess.o(.text._ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[113]"></a>_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message</STRONG> (Thumb, 224 bytes, Stack size 352 bytes, mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244<LI>Call Chain = _ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message &rArr; _ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[117]"></a>_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message</STRONG> (Thumb, 544 bytes, Stack size 568 bytes, mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2740 + Unknown Stack Size
<LI>Call Chain = _ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message &rArr; ReadMission(unsigned short, MissionInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(const char*, const char*, const void*, unsigned, unsigned, double) &rArr; lfs_mkdir &rArr; lfs_rawmkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_drop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[118]"></a>_ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = _ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message &rArr; SetMsgRate(unsigned char, unsigned short, float, double) &rArr; std::__1::pair&lang;std::__1::__tree_iterator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*, int&rang;, bool&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__emplace_unique_key_args&lang;unsigned short, &lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(const T1&, T2&&...) &rArr; std::__1::unique_ptr&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;, std::__1::__tree_node_destructor&lang;std::__1::allocator&lang;std::__1::__tree_node&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;&rang;&rang;&rang; std::__1::__tree&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::__map_value_compare&lang;unsigned short, std::__1::__value_type&lang;unsigned short, SDMsg&rang;, std::__1::less&lang;unsigned short&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::__construct_node&lang;&lang;std::__1::pair&lang;unsigned short, SDMsg&rang;&rang;&rang;(T1&&...) &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[53d]"></a>_ZL25mavlink_set_proto_versionhj</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL25mavlink_set_proto_versionhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _ZL25mavlink_set_proto_versionhj &rArr; _ZL26mavlink_get_channel_statush
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14Msg0_HEARTBEAThPK17__mavlink_message
</UL>

<P><STRONG><a name="[114]"></a>_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message</STRONG> (Thumb, 192 bytes, Stack size 376 bytes, mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1284<LI>Call Chain = _ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message &rArr; _ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissionsCount()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[5c9]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25mavlink_set_proto_versionhj
</UL>

<P><STRONG><a name="[546]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, mavlinkrcprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[11c]"></a>_ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, mavlinkrcprocess.o(.text._ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = _ZL28Msg103_VISION_SPEED_ESTIMATEhPK17__mavlink_message &rArr; PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[5e3]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinkrcprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
</UL>

<P><STRONG><a name="[11b]"></a>_ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message</STRONG> (Thumb, 428 bytes, Stack size 144 bytes, mavlinkrcprocess.o(.text._ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = _ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message &rArr; PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; _ZL10Lock_SDLogd &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, vector3&lang;double&rang;, bool, double, double, double, const double*, double)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, const double*, double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[5e4]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinkrcprocess.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5c0]"></a>_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc</STRONG> (Thumb, 154 bytes, Stack size 120 bytes, mavlinkrcprocess.o(.text._ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[569]"></a>_ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, mavlinkrcprocess.o(.text._ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = _ZL33mavlink_msg_mission_ack_pack_chanhhhP17__mavlink_messagehhhh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[545]"></a>_ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, mavlinkrcprocess.o(.text._ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = _ZL33mavlink_msg_param_value_pack_chanhhhP17__mavlink_messagePKcfhtt &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15Msg23_PARAM_SEThPK17__mavlink_message
</UL>

<P><STRONG><a name="[5cb]"></a>_ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, mavlinkrcprocess.o(.text._ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = _ZL35mavlink_msg_mission_count_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message
</UL>

<P><STRONG><a name="[5c7]"></a>_ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, mavlinkrcprocess.o(.text._ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = _ZL37mavlink_msg_mission_current_pack_chanhhhP17__mavlink_messaget &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message
</UL>

<P><STRONG><a name="[568]"></a>_ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, mavlinkrcprocess.o(.text._ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = _ZL37mavlink_msg_mission_request_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18Msg39_MISSION_ITEMhPK17__mavlink_message
</UL>

<P><STRONG><a name="[59f]"></a>_ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh</STRONG> (Thumb, 308 bytes, Stack size 168 bytes, mavlinkrcprocess.o(.text._ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = _ZL38mavlink_msg_mission_item_int_pack_chanhhhP17__mavlink_messagehhththhffffiifh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21Msg40_MISSION_REQUESThPK17__mavlink_message
</UL>

<P><STRONG><a name="[575]"></a>_ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, mavlinkrcprocess.o(.text._ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = _ZL41mavlink_msg_mission_request_int_pack_chanhhhP17__mavlink_messagehhth &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19Msg44_MISSION_COUNThPK17__mavlink_message
</UL>

<P><STRONG><a name="[52f]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[2af]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mavlinkrcprocess.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init &rArr; TIME::TIME__sub_object(bool) &rArr; TIME::now() &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MavlinkRCProcess.cpp
</UL>

<P><STRONG><a name="[169]"></a>_GLOBAL__sub_I_Modes.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modes.o(.text._GLOBAL__sub_I_Modes.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _GLOBAL__sub_I_Modes.cpp &rArr; __cxx_global_var_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.init_array)
</UL>
<P><STRONG><a name="[508]"></a>_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg</STRONG> (Thumb, 432 bytes, Stack size 400 bytes, modes.o(.text._ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = _ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg &rArr; _ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
</UL>

<P><STRONG><a name="[ac]"></a>_ZL12Modes_ServerPv</STRONG> (Thumb, 3200 bytes, Stack size 1816 bytes, modes.o(.text._ZL12Modes_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4876 + Unknown Stack Size
<LI>Call Chain = _ZL12Modes_ServerPv &rArr; process_AuxFuncs(const Receiver*) &rArr; AuxCamTakePhoto() &rArr; _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::now()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::operator =(const TIME&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object(bool)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(const Receiver*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.text._Z10init_Modesv)
</UL>
<P><STRONG><a name="[531]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, modes.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[533]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, modes.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[55b]"></a>_ZL16mav_array_memcpyPvPKvj</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, modes.o(.text._ZL16mav_array_memcpyPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL16mav_array_memcpyPvPKvj
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
</UL>

<P><STRONG><a name="[5d1]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, modes.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5af]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, modes.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[58c]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, modes.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[58b]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, modes.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a6]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, modes.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[58d]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, modes.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[58e]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, modes.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5e6]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, modes.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[50a]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, modes.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
</UL>

<P><STRONG><a name="[5e5]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, modes.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc
</UL>

<P><STRONG><a name="[5e7]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, modes.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[517]"></a>_ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc</STRONG> (Thumb, 154 bytes, Stack size 120 bytes, modes.o(.text._ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _ZL32mavlink_msg_statustext_pack_chanhhhP17__mavlink_messagehPKc &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mav_array_memcpyPvPKvj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
</UL>

<P><STRONG><a name="[509]"></a>_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, modes.o(.text._ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = _ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12Modes_ServerPv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg
</UL>

<P><STRONG><a name="[532]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, modes.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[2b1]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modes.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __cxx_global_var_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Modes.cpp
</UL>

<P><STRONG><a name="[60c]"></a>_ZL8get_F_dFPdS_S_S_</STRONG> (Thumb, 1266 bytes, Stack size 176 bytes, m12_acccalib.o(.text._ZL8get_F_dFPdS_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _ZL8get_F_dFPdS_S_S_
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[60d]"></a>_ZL8get_F_dFhPdS_S_PK12MagCalibInfo</STRONG> (Thumb, 2274 bytes, Stack size 144 bytes, m13_magcalib.o(.text._ZL8get_F_dFhPdS_S_PK12MagCalibInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ZL8get_F_dFhPdS_S_PK12MagCalibInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[534]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[536]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m32_posctrl.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[5d3]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, m32_posctrl.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5b0]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, m32_posctrl.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[590]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, m32_posctrl.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[58f]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, m32_posctrl.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a7]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[591]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, m32_posctrl.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5b7]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, m32_posctrl.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[592]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, m32_posctrl.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5e9]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, m32_posctrl.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5d2]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, m32_posctrl.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[5e8]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, m32_posctrl.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
</UL>

<P><STRONG><a name="[5ea]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, m32_posctrl.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5f4]"></a>_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m32_posctrl.o(.text._ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = _ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[535]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, m32_posctrl.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[537]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[539]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m35_auto1.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[5d5]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, m35_auto1.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5b1]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, m35_auto1.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[594]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, m35_auto1.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[593]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, m35_auto1.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a8]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[595]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, m35_auto1.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[596]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, m35_auto1.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[5ec]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, m35_auto1.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5d4]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, m35_auto1.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[5eb]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, m35_auto1.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh
</UL>

<P><STRONG><a name="[5ed]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, m35_auto1.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[5f5]"></a>_ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m35_auto1.o(.text._ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = _ZL33mavlink_msg_command_ack_pack_chanhhhP17__mavlink_messagethhihh &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned)
</UL>

<P><STRONG><a name="[538]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, m35_auto1.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[ab]"></a>_ZL12MSafe_ServerPv</STRONG> (Thumb, 3192 bytes, Stack size 1208 bytes, msafe.o(.text._ZL12MSafe_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2468<LI>Call Chain = _ZL12MSafe_ServerPv &rArr; Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver__sub_object()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_mode(unsigned short, unsigned short, unsigned short)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 sq&lang;double&rang;(T1)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryVoltage_filted()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 remove_deadband&lang;double&rang;(T1, T1)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_NavCmdInf(NavCmdInf*)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 sq&lang;float&rang;(T1)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msafe.o(.text._Z10init_MSafev)
</UL>
<P><STRONG><a name="[510]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, msafe.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL12MSafe_ServerPv
</UL>

<P><STRONG><a name="[139]"></a>_ZL13NavCmd21_LANDdhPdP9NavCmdInf</STRONG> (Thumb, 2752 bytes, Stack size 744 bytes, navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = _ZL13NavCmd21_LANDdhPdP9NavCmdInf &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnormal(double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_LandVel()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[13b]"></a>_ZL14NavCmd93_DELAYdhPdP9NavCmdInf</STRONG> (Thumb, 624 bytes, Stack size 112 bytes, navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _ZL14NavCmd93_DELAYdhPdP9NavCmdInf &rArr; Position_Control_set_XYLock(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[13a]"></a>_ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf &rArr; Position_Control_Takeoff_HeightGlobal(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[137]"></a>_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf</STRONG> (Thumb, 2672 bytes, Stack size 736 bytes, navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = _ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf &rArr; Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::getYaw() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnormal(double)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, double)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[493]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, navcmdprocess.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetAB(unsigned char, double*, vector3&lang;double&rang;*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13NavCmd21_LANDdhPdP9NavCmdInf
</UL>

<P><STRONG><a name="[138]"></a>_ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf</STRONG> (Thumb, 1336 bytes, Stack size 544 bytes, navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468<LI>Call Chain = _ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_LandVel()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22map_projection_projectPK14Map_ProjectionddPdS2_
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[13c]"></a>_ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd</STRONG> (Thumb, 696 bytes, Stack size 176 bytes, inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd &rArr; Position_Control_set_XYZAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[13d]"></a>_ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = _ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd &rArr; InflightCmd_SetGimbalPitch(double) &rArr; AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd_SetGimbalPitch(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[13e]"></a>_ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[16a]"></a>_GLOBAL__sub_I_AuxFuncs.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, auxfuncs.o(.text._GLOBAL__sub_I_AuxFuncs.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_AuxFuncs.cpp &rArr; __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxfuncs.o(.init_array)
</UL>
<P><STRONG><a name="[408]"></a>_ZL13SD_Pos_Recordv</STRONG> (Thumb, 1300 bytes, Stack size 1392 bytes, auxfuncs.o(.text._ZL13SD_Pos_Recordv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2412 + Unknown Stack Size
<LI>Call Chain = _ZL13SD_Pos_Recordv &rArr; _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(const char*, unsigned short, double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Sensor::Position_Sensor__sub_object()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Enu2Ned()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf3::PosSensorHealthInf3__sub_object()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[53a]"></a>_ZL13crc_calculatePKht</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, auxfuncs.o(.text._ZL13crc_calculatePKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL13crc_calculatePKht &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8crc_initPt
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[53c]"></a>_ZL14crc_accumulatehPt</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, auxfuncs.o(.text._ZL14crc_accumulatehPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[5d6]"></a>_ZL17_mav_trim_payloadPKch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, auxfuncs.o(.text._ZL17_mav_trim_payloadPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd
</UL>

<P><STRONG><a name="[5b2]"></a>_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, auxfuncs.o(.text._ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
</UL>

<P><STRONG><a name="[598]"></a>_ZL19mavlink_sha256_initP18mavlink_sha256_ctx</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, auxfuncs.o(.text._ZL19mavlink_sha256_initP18mavlink_sha256_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[597]"></a>_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, auxfuncs.o(.text._ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_initP18mavlink_sha256_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[5a9]"></a>_ZL21crc_accumulate_bufferPtPKct</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, auxfuncs.o(.text._ZL21crc_accumulate_bufferPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ZL21crc_accumulate_bufferPtPKct &rArr; _ZL14crc_accumulatehPt
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
</UL>

<P><STRONG><a name="[599]"></a>_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, auxfuncs.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[59a]"></a>_ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, auxfuncs.o(.text._ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
</UL>

<P><STRONG><a name="[520]"></a>_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, auxfuncs.o(.text._ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[5ef]"></a>_ZL26mavlink_get_channel_statush</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, auxfuncs.o(.text._ZL26mavlink_get_channel_statush))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[406]"></a>_ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, auxfuncs.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd &rArr; _ZL17_mav_trim_payloadPKch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[5ee]"></a>_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, auxfuncs.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26mavlink_get_channel_statush
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff
</UL>

<P><STRONG><a name="[5f0]"></a>_ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, auxfuncs.o(.text._ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21crc_accumulate_bufferPtPKct
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17_mav_trim_payloadPKch
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14crc_accumulatehPt
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
</UL>

<P><STRONG><a name="[404]"></a>_ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff</STRONG> (Thumb, 228 bytes, Stack size 136 bytes, auxfuncs.o(.text._ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = _ZL35mavlink_msg_camera_status_pack_chanhhhP17__mavlink_messageyhhthffff &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[521]"></a>_ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht</STRONG> (Thumb, 286 bytes, Stack size 184 bytes, auxfuncs.o(.text._ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = _ZL37mavlink_msg_camera_feedback_pack_chanhhhP17__mavlink_messageyhhtiiffffffht &rArr; _ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh &rArr; _ZL31mavlink_finalize_message_bufferP17__mavlink_messagehhP16__mavlink_statushhh &rArr; _ZL19mavlink_sign_packetP17__mavlink_signingPhPKhhS3_hS3_ &rArr; _ZL23mavlink_sha256_final_48P18mavlink_sha256_ctxPh &rArr; _ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj &rArr; _ZL19mavlink_sha256_calcP18mavlink_sha256_ctxPj
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13SD_Pos_Recordv
</UL>

<P><STRONG><a name="[53b]"></a>_ZL8crc_initPt</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, auxfuncs.o(.text._ZL8crc_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL8crc_initPt
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13crc_calculatePKht
</UL>

<P><STRONG><a name="[29e]"></a>__cxx_global_var_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, auxfuncs.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_AuxFuncs.cpp
</UL>

<P><STRONG><a name="[29f]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, auxfuncs.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.1 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_AuxFuncs.cpp
</UL>

<P><STRONG><a name="[2a0]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, auxfuncs.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init.2 &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_AuxFuncs.cpp
</UL>

<P><STRONG><a name="[16b]"></a>_GLOBAL__sub_I_ctrl_Main.cpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GLOBAL__sub_I_ctrl_Main.cpp &rArr; __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.init_array)
</UL>
<P><STRONG><a name="[e0]"></a>_ZL18ControlSystem_TaskPv</STRONG> (Thumb, 1024 bytes, Stack size 368 bytes, ctrl_main.o(.text._ZL18ControlSystem_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5132 + Unknown Stack Size
<LI>Call Chain = _ZL18ControlSystem_TaskPv &rArr; ctrl_Position() &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAV_MainMotorCount(unsigned char)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Sensor::IMU_Sensor__sub_object()
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::track4(double, double, double, double, double, double)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::reset()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::run(double)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::set_cutoff_frequency(double, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUAccelerometer()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUGyroscope()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_2()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.text._Z18init_ControlSystemv)
</UL>
<P><STRONG><a name="[446]"></a>_ZL24get_MainBatteryRMPercentPK10BatteryCfg</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ctrl_main.o(.text._ZL24get_MainBatteryRMPercentPK10BatteryCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = _ZL24get_MainBatteryRMPercentPK10BatteryCfg &rArr; Get_MainBaterry_Voltage() &rArr; ReadParam(SName, unsigned*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, Param&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, Param&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, Param&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, Param&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MainBaterry_Voltage()
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainBatteryInf(float*, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[2c2]"></a>__cxx_global_var_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ctrl_main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __cxx_global_var_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[2c3]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.1 &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[2c4]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.2 &rArr; TIME::TIME__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::TIME__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[2c5]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __cxx_global_var_init.3 &rArr; TD4_Lite::TD4_Lite__sub_object() &rArr; TD4_Lite::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_Lite::TD4_Lite__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[2c6]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.4 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[2c7]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.5 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
</UL>

<P><STRONG><a name="[16c]"></a>_GLOBAL__sub_I_Ctrl_Attitude.cpp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._GLOBAL__sub_I_Ctrl_Attitude.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_Ctrl_Attitude.cpp &rArr; __cxx_global_var_init.2 &rArr; ESO_AngularRate::ESO_AngularRate__sub_object() &rArr; Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.init_array)
</UL>
<P><STRONG><a name="[360]"></a>_ZL22update_output_throttledd</STRONG> (Thumb, 1272 bytes, Stack size 480 bytes, ctrl_attitude.o(.text._ZL22update_output_throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228<LI>Call Chain = _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSensorHealthInf2::PosSensorHealthInf2__sub_object()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator *(double) const
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::operator =(const vector3&lang;double&rang;&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_lean_angle_cosin() const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::run(double)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_axis_z() const
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::get_hover_throttle()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::reset(double)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::run(double)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24ctrl_Attitude_MultiRotorhdddPdS_
</UL>

<P><STRONG><a name="[385]"></a>_ZL24ctrl_Attitude_MultiRotorhdddPdS_</STRONG> (Thumb, 2048 bytes, Stack size 360 bytes, ctrl_attitude.o(.text._ZL24ctrl_Attitude_MultiRotorhdddPdS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1588<LI>Call Chain = _ZL24ctrl_Attitude_MultiRotorhdddPdS_ &rArr; _ZL22update_output_throttledd &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31throttle_nonlinear_compensationPd
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[5bc]"></a>_ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, ctrl_attitude.o(.text._ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ZL24map_projection_reprojectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad2degree(double)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22update_output_throttledd
</UL>

<P><STRONG><a name="[5c3]"></a>_ZL31throttle_nonlinear_compensationPd</STRONG> (Thumb, 512 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._ZL31throttle_nonlinear_compensationPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ZL31throttle_nonlinear_compensationPd &rArr; safe_sqrt(double) &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24ctrl_Attitude_MultiRotorhdddPdS_
</UL>

<P><STRONG><a name="[2a2]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a3]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.1 &rArr; vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a4]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.2 &rArr; ESO_AngularRate::ESO_AngularRate__sub_object() &rArr; Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::ESO_AngularRate__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a5]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.3 &rArr; ESO_h::ESO_h__sub_object() &rArr; Filter_Butter2_LP::Filter_Butter2_LP__sub_object() &rArr; Filter_Butter2_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::ESO_h__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a6]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.4 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a7]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.5 &rArr; Filter_LP_IIR_1::Filter_LP_IIR_1__sub_object() &rArr; Filter_LP_IIR_1::set_value(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LP_IIR_1::Filter_LP_IIR_1__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a8]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxx_global_var_init.6 &rArr; TD3_2DSL::TD3_2DSL__sub_object() &rArr; TD3_2DSL::reset() &rArr; vector2&lang;double&rang;::zero()
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::TD3_2DSL__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2a9]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __cxx_global_var_init.7 &rArr; TD4_SL::TD4_SL__sub_object() &rArr; TD4_SL::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::TD4_SL__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[2aa]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.8 &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ctrl_Attitude.cpp
</UL>

<P><STRONG><a name="[16d]"></a>_GLOBAL__sub_I_ctrl_Position.cpp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GLOBAL__sub_I_ctrl_Position.cpp &rArr; __cxx_global_var_init.7 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_position.o(.init_array)
</UL>
<P><STRONG><a name="[4e0]"></a>_ZL22map_projection_projectPK14Map_ProjectionddPdS2_</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, ctrl_position.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ZL22map_projection_projectPK14Map_ProjectionddPdS2_ &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degree2rad(double)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, double)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, double)
</UL>

<P><STRONG><a name="[2c8]"></a>__cxx_global_var_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_position.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxx_global_var_init &rArr; TD4_SL::TD4_SL__sub_object() &rArr; TD4_SL::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::TD4_SL__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2c9]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_position.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxx_global_var_init.1 &rArr; TD3_2DSL::TD3_2DSL__sub_object() &rArr; TD3_2DSL::reset() &rArr; vector2&lang;double&rang;::zero()
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::TD3_2DSL__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2ca]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_position.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.2 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2cb]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_position.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.3 &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2cc]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_position.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.4 &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2cd]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_position.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.5 &rArr; vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2&lang;double&rang;::vector2__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2ce]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl_position.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.6 &rArr; vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3&lang;double&rang;::vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[2cf]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl_position.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.7 &rArr; Filter_Butter4_LP::Filter_Butter4_LP__sub_object() &rArr; Filter_Butter4_LP::reset(double)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP::Filter_Butter4_LP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
</UL>

<P><STRONG><a name="[469]"></a>_ZL16NVIC_SystemResetv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_bootloader.o(.text._ZL16NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[651]"></a>_prep_out_transaction</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usb_composite.o(.text._prep_out_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _prep_out_transaction &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[720]"></a>proc_read10_cmd</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usb_composite.o(.text.proc_read10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = proc_read10_cmd &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[721]"></a>proc_write10_cmd</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usb_composite.o(.text.proc_write10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_write10_cmd &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[16e]"></a>_GLOBAL__sub_I_MS_Attitude.cpp</STRONG> (Thumb, 1192 bytes, Stack size 40 bytes, ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _GLOBAL__sub_I_MS_Attitude.cpp &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.init_array)
</UL>
<P><STRONG><a name="[307]"></a>_ZL18MS_AttitudeHeadingdPP9PosAccInf</STRONG> (Thumb, 7096 bytes, Stack size 592 bytes, ms_attitude.o(.text._ZL18MS_AttitudeHeadingdPP9PosAccInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = _ZL18MS_AttitudeHeadingdPP9PosAccInf &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::find&lang;SName&rang;(const T1&) &rArr; std::__1::__tree_iterator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang; std::__1::__tree&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::__map_value_compare&lang;SName, std::__1::__value_type&lang;SName, ParamGroup*&rang;, std::__1::less&lang;SName&rang;, (bool)1&rang;, std::__1::allocator&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__lower_bound&lang;SName&rang;(const T1&, std::__1::__tree_node&lang;std::__1::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, std::__1::__tree_end_node&lang;std::__1::__tree_node_base&lang;void*&rang;*&rang;*) &rArr; SName::operator &lang;(const SName&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(const char*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[16f]"></a>_GLOBAL__sub_I_MS_Position.cpp</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _GLOBAL__sub_I_MS_Position.cpp &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; TIME::get_pass_time_fromStartUp() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_position.o(.init_array)
</UL>
<P><STRONG><a name="[98]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1db]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
